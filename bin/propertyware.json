{
  "openapi": "3.0.0",
  "info": {
    "description": "﻿<script type=\"text/javascript\" src=\"https://buildium.atlassian.net/s/d41d8cd98f00b204e9800998ecf8427e-T/-raa8on/b/8/c95134bc67d3a521bb3f4331beb9b804/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector.js?locale=en-US&collectorId=e43cd15d\"></script>\r\n\r\n# Introduction\r\n\r\nWelcome to Propertyware’s API—a powerful, RESTful programming interface that lets you leverage valuable Propertyware data.\r\n\r\n## Account Configuration\r\nBefore you can use Propertyware’s API, you’ll need to make some tweaks to your account settings. \r\n\r\n<br />\r\n\r\n### Enabling the API \r\nIn order to start creating your keys and making requests, you’ll need to enable the API.\r\n\r\n>  **Tip:** You’ll need an administrator user role with access to ***Administration Setup > API Keys*** to set things up properly. \r\n\r\n**Let's Begin!** \r\n\r\n1. Sign in to your [Propertyware](https://app.propertyware.com/pw/login.jsp) account from your browser. \r\n\r\n2. Open the ***Setup*** page\r\n\r\n3. On the left navigation bar, expand ***Administration Setup*** and then click ***API Keys***. \r\n\r\nIf you are having issues accessing the API keys page within your account you can submit a [Support](#section/API-Overview/Support) request for assistance.\r\n\r\n## API Keys\r\nAccount-level API keys authenticate every request and keep things secure. \r\n\r\nAPI keys have two components: a “client ID” and a “secret”.\r\n\r\n* **Client IDs** are similar to usernames. They’re used to identify your Propertyware API key and are safe to share.\r\n* **Secrets** are similar to passwords. They must be kept confidential. \r\n\r\nWhenever you make a request, you’ll need the API key’s client ID and secret. If you forget it, make a mistake, or try to use information that’s linked to a deleted key, the API will return a `401` response code.\r\n\r\n>  **Tip:** We compiled a list of best practices that detail how securely store API keys. [Give it a read](#section/Getting-Started/Keeping-API-Keys-Safe)!\r\n\r\n## Creating API Keys \r\n\r\nNow that the Open API is enabled, you’ll be able to create API keys. You’re almost there!\r\n\r\n**How to create an API key** \r\n\r\n1. On the API Keys page, click ***Create API Key***. A modal will appear.\r\n\r\n<p>\r\n    <img src=\"APIKey_Page.JPG\"/>\r\n</p>\r\n\r\n<p>\r\n    <img src=\"APIKey_New.JPG\"/>\r\n</p>\r\n\r\n2. Enter a clear, memorable name and description for your API key. It’ll make it easier to locate the right key when you make a request.\r\n\r\n3. Now, choose which pieces of Propertyware data you want this API key to have access to by selecting the corresponding radio buttons. Once finished, click **GENERATE KEY**.\r\n\r\n4. You have successfully created an API key! The client id and secret associated to this key will be presented. \r\n\r\n<p>\r\n    <img src=\"APIKey_Generate.JPG\"/>\r\n</p>\r\n\r\n> **Important:** This is your only chance to record the secret. Make sure it’s stored somewhere secure! If it’s forgotten, you’ll need to delete this key and start from scratch.\r\n\r\n\r\nYou have now successfully created an API key and have everything you need to  send requests to the Propertyware API! \r\n\r\nBefore moving on to [making your first request](#section/Getting-Started/How-to-Make-a-Request) please review [Keeping API Keys Safe](#section/Getting-Started/Keeping-API-Keys-Safe) for an overview on securely storing your API keys.  \r\n<br />\r\nIf you are having issues creating API keys you can submit a [Support](#section/API-Overview/Support) request for assistance.\r\n\r\n## Keeping API Keys Safe\r\n\r\nBased on their permissions, API keys could have full access to your account’s Propertyware data. It’s important that you only grant access to trusted applications, securely record secrets, and consider a password manager to stay organized.\r\n\r\n### Recommended Practices\r\n\r\n- Avoid hard-coding client IDs and secrets inside source files.\r\n- Avoid storing client IDs and secrets in any files that may be committed to source control, particularly cloud-based source control platforms.\r\n- Apply restrictions to client IDs and secrets shared with your staff. You can restrict a key to particular Propertyware entities or to read-only access (GET resources only).\r\n- Avoid sharing client IDs and secrets across public, insecure platforms.\r\n- Establish a process to regularly recreate your client IDs and secrets from your Propertyware account.\r\n<br />\r\n<br />\r\n\r\n## How to Make a Request \r\n\r\nYou’ve done a great job setting up your account, Now, we’ll walk you through how to access your data. It’s very straightforward and should only take a few minutes!\r\n\r\n> **Tip:** Looking for the right HTTP client? If you’re just getting started, we recommend Postman. \r\n\r\n### Let's Get Started!\r\n\r\n#### Step 1: Get Your API Key\r\n\r\nIf you haven't yet done so, obtain your API key client ID and secret from your Propertyware account. Your API key is how the Propertyware API authenticates requests and ensures only you can access your data.\r\n\r\n#### Step 2: Install a HTTP client\r\n\r\nThe Propertyware API supports any standard HTTP client. If you're looking for a user-friendly HTTP client application, we recommend [Postman](https://www.postman.com/product/api-client) – it allows you to access the Propertyware API without writing code. We’ll use Postman for our example below to demonstrate sending an API request.\r\n\r\n#### Step 3: Make a Sample Request\r\n\r\nLet's dive in and make a simple request to get all the [Buildings](#operation/getBuildingsUsingGET) in your account. This will confirm your connectivity to our platform and validate the keys you created on our website. Simply follow the instructions below.\r\n\r\n1. Open the Postman application. \r\n2. Open the *verb* menu and select **GET**.\r\n3. Enter the request endpoint in the field next to GET. \r\n   - Here’s the endpoint to get all buildings: https://api.propertyware.com/pw/api/rest/v1/buildings.\r\n4. To authenticate the request, enter your `client ID`, your `secret` and your `organization iD` respectively in these request headers: \r\n   - `x-propertyware-client-id`\r\n   - `x-propertyware-client-secret`\r\n   - `x-propertyware-system-id` _(organization id)_\r\n\r\nThe organization id uniquely identifies your Propertyware account and is an additional measure to enforce proper access to the correct data. ___Your client id and secret pair will only work with the organization it belongs to___.\r\n\r\nYour full request should look similar to the image below.\r\n<kbd><img src=\"request_example.png\" /></kbd>\r\n\r\n5. Review the parameters of your request on last time. Once finished, click **Send**.\r\n\r\n6. If successful, you should see a JSON response and a `200` HTTP status code. Congratulations! You've connected to the Propertyware API.\r\n\r\nYou now have the knowledge required to make requests for any of our resources.\r\n\r\nIf you've received an error response please review the JSON response message for a description of how to resolve the issue. You can also see more information about HTTP status codes in the [Response Codes](#section/API-Overview/Response-Codes) section. If you are still having trouble making a request after reviewing these sections please submit a [Support](#section/API-Overview/Support) request.\r\n\r\n# API Overview\r\nThe Propertyware API is built upon standard REST conventions. It's designed to use consistent resource-oriented URLs, accept and return JSON-encoded messages, and use standard HTTP status codes and verbs.\r\n\r\n## Base URL\r\nThe base URL for production environment API requests is: `https://api.propertyware.com/pw/api/v1/rest`\r\n\r\nIn order to ensure all requests and responses are secure between the API consumer and Propertyware servers, requests must be made using the `https` protocol. Any requests not made with the `https` protocol will be refused by the Propertyware API platform. \r\n\r\n> **Note:** URL paths are case-sensitive to stay consistent with common REST standards. If your request doesn’t align with the documented URL path, you’ll receive a `404` response code reminding you of this constraint.\r\n\r\n## API Versioning\r\nThe Propertyware API is version controlled. Versioning ensures backwards-incompatible changes to the API don’t impact any existing integrations.\r\n\r\nPropertyware uses only a major version nomenclature to manage changes. The current version of the Propertyware API is version 1. By specifying a version in the resource request URL, you'll get expected responses regardless of future changes to the API. Here's an example of calling version 1 of the retrieve all leases resource:\r\n\r\n`https://api.propertyware.com/pw/api/rest/v1/leases`\r\n\r\nAny request submitted without the version in the URL path will result in a `404` error response code. \r\n\r\n### Releasing Changes to the API\r\nThe Propertyware API will continue to evolve to ensure it meets the needs of our customers. Changes will be defined as either backwards-compatible or backwards-incompatible. \r\n\r\nWe’ll provide advance notice for all API releases–regardless of the type of modifications being made. \r\n\r\n#### Backward-compatible Changes\r\nBackward-compatible changes are modifications to the API that shouldn't impact existing integrations. They'll apply to the current version of the API. Simply put: you won’t need to change the version to consume new changes like these. \r\n\r\nIt's important as you develop against the Propertyware API that you ensure  these types of changes don't impact your integration. Here's are examples of backward-compatible modifications. \r\n\r\n* Adding new API resources and/or endpoints.\r\n* Adding new optional request parameters to existing API methods.\r\n* Adding new properties to existing API responses and non-required properties for request messages.\r\n* Changing property order in existing API responses.\r\n\r\nAll backward-compatible changes to the API will be documented in the [Changelog](#section/Changelog).\r\n\r\n#### Backwards-incompatible Changes\r\n\r\nWhen backwards-incompatible changes to the API occur, a new version of the API will be released. You’ll need to update the URL path  to consume resources under the new API version. \r\n\r\nBackwards-incompatible changes include:\r\n\r\n* Removing a property from a request and/or response message.\r\n* Changing the name of a property in a message.\r\n* Adding a required parameter to a request message.\r\n* Changing existing enumeration values.\r\n\r\nNew versions of the API will have full reference documentation and an upgrade guide. \r\n\r\n## Authentication\r\n\r\nThe Propertyware API uses API key’s client IDs and secrets to authenticate requests. \r\n\r\nAn organization ID, an API key client ID and secret must be passed in every request header using the following parameters: \r\n\r\n- `x-propertyware-client-id`\r\n- `x-propertyware-client-secret`\r\n- `x-propertyware-system-id`\r\n\r\nFailing to provide both of them in the request header will cause the API to return a `401` HTTP status code.\r\n<!--\r\n## Rate Limiting (FUTURE)\r\nRate limits help us ensure consistent and reliable performance for all users, even during peak loads. That’s why we limit clients to **10 concurrent requests per second**.\r\n\r\nIf your request rate violates that limit, a response code of `429` is returned. Simply retry the request after a short interval (~200ms).\r\n-->\r\n\r\n## Bulk Request Options\r\nAll top-level API resources support bulk fetches. For instance, you can retrieve all [Portfolios](#operation/getPortfoliosUsingGET). These resources also allow for filtering criteria. Each resource has descriptions of the filter criteria available.\r\n\r\nIn addition to filtering, our API gives you the ability to control the returned data’s pagination and the sort order. \r\n\r\n### Pagination\r\nEndpoints that return result sets allow for pagination using `limit` and `offset` request parameters to reduce the amount of data returned.\r\n\r\nThe `limit` request parameter will cap the number of results that come back in the response. If you don't specify a `limit` value, a **default of 100 results** are returned. The maximum `limit` value is 500. If a `limit` value is specified greater than 500, it will be overridden to the default to 500. \r\n\r\nThe `offset` request parameter indicates the record position within the resultset to start at when returning the results. The `offset` is zero-based and is inclusive. If no `offset` value is submitted it will default to 0. \r\n\r\n\r\nThe total resultset count is returned in the HTTP Header `X-Total-Count`\r\n\r\n\r\n#### Pagination Example\r\n\r\nAs an example, let's say we make a request to retrieve all rental properties with no paging parameters. Our response indicates in the `X-Total-Count` header that there are 150 total rental properties. We want to get only the last 50 results so we would submit a request with the `offset` set to 100 and the `limit` set to 50.\r\n\r\n> **Note:** The `limit` and `offset` parameter names are case-sensitive. If they aren't formatted correctly, the API will return a `404` HTTP status code.\r\n\r\n### Sorting Results\r\n\r\nYou can specify the sort order of returned data by assigning properties from the returned object to the `orderby` parameter in the querystring. For example:\r\n```\r\norderby=name\r\n```\r\nBy default, the sort is performed in ascending order. To specify sort order, use \"asc\" for ascending or \"desc\" for descending. For example:\r\n```\r\norderby=name desc\r\n```\r\nAdditionally, you can sort by multiple properties by comma separating the properties. For example:\r\n```\r\norderby=abbreviation asc,name desc\r\n```\r\n\r\n> **Note:** While the `orderby` parameter is case-sensitive, the properties specified in the `orderby` value aren't. \r\n\r\n## Response Codes\r\nThe Propertyware API supports standard HTTP status codes.\r\n\r\n|Response Code          |Description  |\r\n|--|--|\r\n|200 OK | Everything worked as expected. |\r\n|400 Bad Request | The request was unacceptable, often due to missing a required parameter.|\r\n|401 Unauthorized|The API client ID and secret weren’t provided or they’re no longer valid. Be sure that the client ID and secret combination are correct and they are still active.|\r\n|403 Forbidden|The API key doesn't have permission to perform the request. This could be due to authorization for the given endpoint or an inability to access given entities within the platform (e.g. properties).\r\n|404 Not Found|The requested resource doesn't exist.|\r\n|415 Unsupported Media Type |Ensure you have the appropriate content-type header value set on your request. Each resource is documented with media type(s) that are accepted.|\r\n|429 Too Many Requests |Too many requests against the API too quickly. We recommend an exponential backoff of your requests.|\r\n|500 and above - Server Errors|Something went wrong on Propertyware's end. Review the JSON response message for more details about the error.|\r\n\r\n## API Date Format\r\n* For all request and response date fields allowing ISO date format: YYYY-MM-DD (e.g.2019-08-24).\r\n* For all request and response dateAndTime fields format is allowing: YYYY-MM-dd'T'HH:mm:ssXXX (e.g.2022-06-28T08:47:13Z).\r\n\r\n## Support\r\nIf you are unable to resolve your issue after reviewing the API documentation our support team can assist you.\r\n\r\n# Changelog\r\n### 2023-08-28\r\n* Update a document\r\n\r\n### 2023-07-11\r\n* Delete a document\r\n\r\n### 2023-07-11\r\n* Retrieve all documents\r\n* Retrieve a document\r\n* Download a document\r\n\r\n### 2023-06-10\r\n* Lease contacts are included in Retrieve all leases API response\r\n* Lease contacts are included in Retrieve a lease API response\r\n\r\n### 2023-04-24\r\n* Bulk Insertion: Prospects\r\n* Bulk Insertion: Bill Payments\r\n\r\n### 2023-04-11\r\n\r\n* Bulk Insertion: Portfolios\r\n* Bulk Insertion: Buildings\r\n* Bulk Insertion: Units\r\n\r\n### 2023-03-19\r\n\r\n* Bulk insertion: contacts\r\n\r\n### 2023-03-08\r\n\r\n* Bulk insertion: bills\r\n\r\n### 2023-01-24\r\n\r\n* Custom fields in \"Get all\" endpoints\r\n* Prospect creation\r\n* Bill removals \r\n \r\n### 2022-10-25\r\n\r\n* API Read operations for non-financial data\r\n\r\n### 2022-09-21\r\n\r\n* API Read operations available ",
    "version": "1.0",
    "title": "Open API, powered by Propertyware",
    "contact": { "name": "Propertyware", "email": "support@propertyware.com" },
    "x-logo": {
      "url": "logo.png",
      "backgroundColor": "#fff",
      "altText": "Propertyware, A RealPage Company",
      "href": "https://www.propertyware.com"
    }
  },
  "tags": [
    {
      "name": "Accounting",
      "description": "Resources providing access to accounting data such as general ledger accounts and financial transactions."
    },
    {
      "name": "Bills",
      "description": "Resources providing access to bills and bill payments."
    },
    {
      "name": "Buildings",
      "description": "Resources providing access to buildings."
    },
    {
      "name": "Contacts",
      "description": "Resources providing access to contacts."
    },
    {
      "name": "CustomField fields",
      "description": "Resources providing access to custom fields."
    },
    {
      "name": "Documents",
      "description": "Resources providing access to documents."
    },
    { "name": "Health check", "description": "API health check resources." },
    {
      "name": "Inspections",
      "description": "Resources providing access to inspections."
    },
    {
      "name": "Leases",
      "description": "Resources providing access to rental property leases."
    },
    {
      "name": "Portfolios",
      "description": "Resources providing access to portfolios."
    },
    {
      "name": "Prospects",
      "description": "Resources providing access to prospects."
    },
    { "name": "Units", "description": "Resources providing access to units." },
    {
      "name": "Vendors",
      "description": "Resources providing access to vendors."
    },
    {
      "name": "Work orders",
      "description": "Resources providing access to work orders."
    }
  ],
  "paths": {
    "/accounting/bankdeposits": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create a bank deposit (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a bank deposit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GENERAL LEDGER</span> - <code>Write</code>\n",
        "operationId": "createBankDeposit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveBankDeposit" }
            }
          },
          "description": "saveBankDeposit",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BankDeposit" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/accounting/bankdeposits/{bankDepositID}": {
      "delete": {
        "tags": ["Accounting"],
        "summary": "Delete a Bank Deposit (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDelete a Bank Deposit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GENERAL LEDGER</span> - <code>Delete</code>\n",
        "operationId": "deleteBankDeposit",
        "parameters": [
          {
            "name": "bankDepositID",
            "in": "path",
            "description": "Bank Deposit ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/accounting/generalledger": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve all general ledger transactions (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a list of general ledger transactions.<br /><br />At least of the following date ranges must be passed as a filter: \n * `lastModifiedDateStart`-`lastModifiedDateEnd` \n * `createdDateStart`-`createdDateEnd`<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GENERAL LEDGER</span> - <code>Read</code>\n",
        "operationId": "getGeneralLedgerTransactions",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "leaseID",
            "in": "query",
            "description": "Filters results to transactions associated with a specific lease.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "ownerID",
            "in": "query",
            "description": "Filters results to transactions associated with a specific owner.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "vendorID",
            "in": "query",
            "description": "Filters results to transactions associated with a specific vendor.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results to transactions associated with a specific Portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any transaction with post date on or after to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any transaction with post date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/GLItem" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/accounting/glaccounts": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve all the general ledger accounts (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a list of general ledger accounts.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>accountcode</code>, <code>id</code>, <code>accountnumber</code>",
        "operationId": "getAccounts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "accountNumber",
            "in": "query",
            "description": "Filters results to accounts with a specific number.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeDeactivated",
            "in": "query",
            "description": "Include deactivated results if a `true` value is passed. If no value is specified, only active accounts will be returned.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "accountCode",
            "in": "query",
            "description": "Filters results to accounts with a specific code.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "parentGLAccountId",
            "in": "query",
            "description": "Filters results to accounts that are a children of a specific parent account.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Account" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Accounting"],
        "summary": "Create a general ledger account (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreate a general ledger account.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Write</code>\n",
        "operationId": "createGLAccount",
        "requestBody": { "$ref": "#/components/requestBodies/SaveAccount" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Account" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/accounting/glaccounts/bulk": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create general ledger accounts in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates general ledger accounts in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Write</code>\n",
        "operationId": "createBillPayments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SaveAccount" }
              }
            }
          },
          "description": "saveAccount",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/accounting/glaccounts/{glAccountID}": {
      "put": {
        "tags": ["Accounting"],
        "summary": "Update a general ledger account (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates a general ledger account.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Write</code>\n",
        "operationId": "updateGLAccount",
        "parameters": [
          {
            "name": "glAccountID",
            "in": "path",
            "description": "GL Account ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveAccount" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Account" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/accounting/glaccounts/{glAccount}": {
      "delete": {
        "tags": ["Accounting"],
        "summary": "Delete a general ledger account (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDelete a general ledger account.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Delete</code>\n",
        "operationId": "deleteGLAccount",
        "parameters": [
          {
            "name": "glAccount",
            "in": "path",
            "description": "GL Account ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/accounting/ownercontributions": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve all the owner contributions (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a list of owner contributions.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getOwnerContributions",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "leaseID",
            "in": "query",
            "description": "Filters results with Lease ID.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results to with Lease Status.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/OwnerContribution" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Accounting"],
        "summary": "Create an owner contribution (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates an owner contribution for a specified owner contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Write</code>\n",
        "operationId": "createOwnerContribution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveOwnerContribution" }
            }
          },
          "description": "saveOwnerContribution",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OwnerContribution" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/accounting/ownercontributions/{ownerContributionID}": {
      "delete": {
        "tags": ["Accounting"],
        "summary": "Delete Owner Contribution (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDelete Owner Contribution.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Delete</code>\n",
        "operationId": "deleteOwnerContribution",
        "parameters": [
          {
            "name": "ownerContributionID",
            "in": "path",
            "description": "Owner Contribution ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/accounting/ownerdraws": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve all the owner draws (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a list of owner draws.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>portfolioid</code>, <code>id</code>",
        "operationId": "getOwnerDraws",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results to with portfolioID.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/OwnerDraw" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Accounting"],
        "summary": "Create an owner draw (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates an owner draw for a specified owner contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Write</code>\n",
        "operationId": "createOwnerDraw",
        "requestBody": { "$ref": "#/components/requestBodies/SaveOwnerDraw" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OwnerDraw" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/accounting/ownerdraws/{drawID}": {
      "put": {
        "tags": ["Accounting"],
        "summary": "Update an owner draw (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates an owner draw for a specified owner contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Write</code>\n",
        "operationId": "updateOwnerDraw",
        "parameters": [
          {
            "name": "drawID",
            "in": "path",
            "description": "Owner Draw ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveOwnerDraw" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OwnerDraw" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/bills": {
      "get": {
        "tags": ["Bills"],
        "summary": "Retrieve all bills (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a list of bills.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>billdate</code>, <code>billnumber</code>, <code>lastmodifieddatetime</code>, <code>duedate</code>, <code>id</code>",
        "operationId": "getBills",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results to bills associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "vendorID",
            "in": "query",
            "description": "Filters results to bills associated with a specific vendor.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "workOrderID",
            "in": "query",
            "description": "Filters results to bills associated with a specific work order.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "markupGLAccountID",
            "in": "query",
            "description": "Filters results to bills associated with a specific markup general ledger account.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "paid",
            "in": "query",
            "description": "Filters results by the bill's paid status. If no status is specified, bills with any status will be returned.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "billDateStart",
            "in": "query",
            "description": "Filters results to any bill with a billing date on or after to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "billDateEnd",
            "in": "query",
            "description": "Filters results to any bill with a billing date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "dueDateStart",
            "in": "query",
            "description": "Filters results to any bill with a due date on or after to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "dueDateEnd",
            "in": "query",
            "description": "Filters results to any bill with a due date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Bill" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Bills"],
        "summary": "Create a bill (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a bill.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Write</code>\n",
        "operationId": "createBill",
        "requestBody": { "$ref": "#/components/requestBodies/SaveBill" },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Bill" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/bills/bulk": {
      "post": {
        "tags": ["Bills"],
        "summary": "Create bills in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates bills in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Write</code>\n",
        "operationId": "createBills",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SaveBill" }
              }
            }
          },
          "description": "saveBill",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/bills/credit": {
      "post": {
        "tags": ["Bills"],
        "summary": "Create a credit (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a credit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Write</code>\n",
        "operationId": "createCredit",
        "requestBody": { "$ref": "#/components/requestBodies/SaveCredit" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Bill" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/bills/credit/{creditID}": {
      "put": {
        "tags": ["Bills"],
        "summary": "Update a Credit (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdate an existing Credit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Write</code>\n",
        "operationId": "updateCredit",
        "parameters": [
          {
            "name": "creditID",
            "in": "path",
            "description": "Credit ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveCredit" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Bill" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/bills/payment": {
      "post": {
        "tags": ["Bills"],
        "summary": "Creates Bill Payment (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates Bill Payment<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code>\n",
        "operationId": "createBillPayment",
        "requestBody": { "$ref": "#/components/requestBodies/SaveBillPayment" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BillPayment" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/bills/payment/{billPaymentID}": {
      "put": {
        "tags": ["Bills"],
        "summary": "Update a Bill Payment (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdate a Bill Payment<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code>\n",
        "operationId": "updateBillPayment",
        "parameters": [
          {
            "name": "billPaymentID",
            "in": "path",
            "description": "Bill Payment ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveBillPayment" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BillPayment" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/bills/payments": {
      "get": {
        "tags": ["Bills"],
        "summary": "Retrieve all bill payments (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a list of bill payments.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>vendorid</code>, <code>lastmodifieddatetime</code>, <code>paymentdate</code>, <code>checknumber</code>, <code>id</code>",
        "operationId": "getBillPayments",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "vendorID",
            "in": "query",
            "description": "Filters results to bills associated with a specific vendor.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "paymentGLAccountID",
            "in": "query",
            "description": "Filters results to bills associated with a specific payment general ledger account.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "paymentDateStart",
            "in": "query",
            "description": "Filters results to any payment with a date on or after to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "paymentDateEnd",
            "in": "query",
            "description": "Filters results to any payment with a date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BillPayment" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/bills/payments/bulk": {
      "post": {
        "tags": ["Bills"],
        "summary": "Create bill payments in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates bill payments in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code>\n",
        "operationId": "createBillPaymentsUsingPOST_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SaveBillPayment" }
              }
            }
          },
          "description": "saveBillPayment",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/bills/payments/{billPaymentID}": {
      "get": {
        "tags": ["Bills"],
        "summary": "Retrieve a bill payment (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a specific bill payment.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Read</code>\n",
        "operationId": "getBillPayment",
        "parameters": [
          {
            "name": "billPaymentID",
            "in": "path",
            "description": "Bill Payment ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BillPayment" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/bills/vendorChecks": {
      "get": {
        "tags": ["Bills"],
        "summary": "Retrieve all Vendor checks (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a list of Vendor checks.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>postdate</code>, <code>createddate</code>, <code>vendorid</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getVendorChecks",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "vendorID",
            "in": "query",
            "description": "Filters results to transactions associated with a specific vendor.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Check" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Bills"],
        "summary": "Create a Vendor check (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a Vendor check.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code>\n",
        "operationId": "createVendorCheck",
        "requestBody": { "$ref": "#/components/requestBodies/SaveCheck" },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Check" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/bills/vendorChecks/{vendorCheckID}": {
      "put": {
        "tags": ["Bills"],
        "summary": "Update a Vendor check (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdate an existing Vendor check.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code>\n",
        "operationId": "updateVendorCheck",
        "parameters": [
          {
            "name": "vendorCheckID",
            "in": "path",
            "description": "Vendor Check ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveCheck" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Check" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/bills/{billID}": {
      "get": {
        "tags": ["Bills"],
        "summary": "Retrieve a bill (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a specific bill.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Read</code>\n",
        "operationId": "getBill",
        "parameters": [
          {
            "name": "billID",
            "in": "path",
            "description": "Bill ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Bill" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Bills"],
        "summary": "Delete a Bill (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDelete a Bill.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Delete</code>\n",
        "operationId": "deleteBill",
        "parameters": [
          {
            "name": "billID",
            "in": "path",
            "description": "Bill ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/bills/{billId}": {
      "put": {
        "tags": ["Bills"],
        "summary": "Update a Bill (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdate an existing bill.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Write</code>\n",
        "operationId": "updateBill",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "description": "Bill ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveBill" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Bill" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/buildings": {
      "get": {
        "tags": ["Buildings"],
        "summary": "Retrieve all buildings",
        "description": "Retrieves a list of buildings.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>idnumber</code>, <code>name</code>, <code>abbreviation</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getBuildings",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "vacant",
            "in": "query",
            "description": "Filters results by the building's vacancy status. If no value is specified, buildings with any status will be returned.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "publishedForRent",
            "in": "query",
            "description": "Filters results by the building's \"published for rent\" status. If no value is specified, buildings with any status will be returned.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "leaseID",
            "in": "query",
            "description": "Filters results to buildings associated with a specific lease.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results to buildings associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeDeactivated",
            "in": "query",
            "description": "Filters results to buildings with a deactivated records.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "Include custom fields in the response.",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Building" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Buildings"],
        "summary": "Create a building (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Write</code>\n",
        "operationId": "createBuilding",
        "requestBody": { "$ref": "#/components/requestBodies/SaveBuilding" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Building" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/buildings/bulk": {
      "post": {
        "tags": ["Buildings"],
        "summary": "Create buildings in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates buildings in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Write</code>\n",
        "operationId": "createContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SaveBuilding" }
              }
            }
          },
          "description": "saveBuilding",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/buildings/{buildingID}": {
      "get": {
        "tags": ["Buildings"],
        "summary": "Retrieve a building",
        "description": "Retrieves a specific building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code>\n",
        "operationId": "getBuilding",
        "parameters": [
          {
            "name": "buildingID",
            "in": "path",
            "description": "Building ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "Include custom fields in the response.",
            "required": false,
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Building" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "put": {
        "tags": ["Buildings"],
        "summary": "Update a building (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Write</code>\n",
        "operationId": "updateBuilding",
        "parameters": [
          {
            "name": "buildingID",
            "in": "path",
            "description": "Building ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveBuilding" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Building" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Buildings"],
        "summary": "Delete a building (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDelete a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Delete</code>\n",
        "operationId": "deleteBuilding",
        "parameters": [
          {
            "name": "buildingID",
            "in": "path",
            "description": "Building ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/buildings/{buildingID}/conversations": {
      "get": {
        "tags": ["Buildings"],
        "summary": "Retrieve all building conversations",
        "description": "Retrieves all the conversations of a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getBuildingConversations",
        "parameters": [
          {
            "name": "buildingID",
            "in": "path",
            "description": "Building ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results by the conversation type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Conversation" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/buildings/{buildingID}/conversations/{conversationID}": {
      "get": {
        "tags": ["Buildings"],
        "summary": "Retrieve a building conversation",
        "description": "Retrieves a specific building conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code>\n",
        "operationId": "getBuildingConversation",
        "parameters": [
          {
            "name": "buildingID",
            "in": "path",
            "description": "Building ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Buildings"],
        "summary": "Delete a building conversation (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a specific building conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Delete</code>\n",
        "operationId": "deleteBuildingConversation",
        "parameters": [
          {
            "name": "buildingID",
            "in": "path",
            "description": "Building ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/buildings/{buildingID}/managementfees": {
      "get": {
        "tags": ["Buildings"],
        "summary": "Retrieve all building management fees (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves all the management fee rules of a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code>\n",
        "operationId": "getBuildingManagementFee",
        "parameters": [
          {
            "name": "buildingID",
            "in": "path",
            "description": "Building ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ManagementFee" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/buildings/{buildingID}/managers": {
      "get": {
        "tags": ["Buildings"],
        "summary": "Retrieve all building property managers",
        "description": "Retrieves all the property managers of a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code>\n",
        "operationId": "getBuildingManagers",
        "parameters": [
          {
            "name": "buildingID",
            "in": "path",
            "description": "Building ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PropertyManager" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/buildings/{buildingID}/notes": {
      "get": {
        "tags": ["Buildings"],
        "summary": "Retrieve all building notes",
        "description": "Retrieves all the notes of a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code>\n",
        "operationId": "getBuildingNotes",
        "parameters": [
          {
            "name": "buildingID",
            "in": "path",
            "description": "Building ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Note" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Retrieve all contacts",
        "description": "Retrieves a list of contacts.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CONTACTS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>firstname</code>, <code>createddate</code>, <code>lastname</code>, <code>email</code>, <code>type</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getContacts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results by the contact type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["TENANT", "PROSPECT", "OWNER", "VENDOR", "OTHER"]
            }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Contact" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Contacts"],
        "summary": "Create a contact (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CONTACTS</span> - <code>Write</code>\n",
        "operationId": "createContact",
        "requestBody": { "$ref": "#/components/requestBodies/SaveContact" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Contact" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/contacts/bulk": {
      "post": {
        "tags": ["Contacts"],
        "summary": "Create contacts in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates contacts in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CONTACTS</span> - <code>Write</code>\n",
        "operationId": "createContactsUsingPOST_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SaveContact" }
              }
            }
          },
          "description": "saveContact",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/contacts/categories": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Retrieve all contact categories",
        "description": "Retrieves a list of contact categories.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CONTACTS</span> - <code>Read</code>\n",
        "operationId": "getContactCategories",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ContactCategory" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactID}": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Retrieve a contact",
        "description": "Retrieves a specific contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CONTACTS</span> - <code>Read</code>\n",
        "operationId": "getContact",
        "parameters": [
          {
            "name": "contactID",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Contact" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "put": {
        "tags": ["Contacts"],
        "summary": "Update a contact (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates a contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CONTACTS</span> - <code>Write</code>\n",
        "operationId": "updateContact",
        "parameters": [
          {
            "name": "contactID",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveContact" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Contact" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Contacts"],
        "summary": "Delete a contact (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CONTACTS</span> - <code>Delete</code>\n",
        "operationId": "deleteContact",
        "parameters": [
          {
            "name": "contactID",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/contacts/{contactID}/conversations": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Retrieve all contact conversations",
        "description": "Retrieves all the conversations of a contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CONTACTS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getContactConversations",
        "parameters": [
          {
            "name": "contactID",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results by the conversation type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Conversation" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/contacts/{contactID}/conversations/{conversationID}": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Retrieve a contact conversation",
        "description": "Retrieves a specific contact conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CONTACTS</span> - <code>Read</code>\n",
        "operationId": "getContactConversation",
        "parameters": [
          {
            "name": "contactID",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Contacts"],
        "summary": "Delete a contact conversation (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a specific contact conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CONTACTS</span> - <code>Delete</code>\n",
        "operationId": "deleteContactConversation",
        "parameters": [
          {
            "name": "contactID",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/customfields/{entityType}/definitions": {
      "get": {
        "tags": ["CustomField fields"],
        "summary": "Retrieve list of custom field definitions.",
        "description": "Retrieve list of custom field definitions.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">CUSTOM FIELD</span> - <code>Read</code>\n",
        "operationId": "retrieveCustomFieldDefinitions",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "Entity type, allowed entity types (Asset, Building, Contact, Lease, Portfolio, Prospect, Unit, Vendor, WorkOrder, ServiceAgreement)",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldDefinition"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/docs": {
      "get": {
        "tags": ["Documents"],
        "summary": "Retrieve all documents",
        "description": "Retrieves a list of documents associated with a specific entity.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "retrieveAllDocuments",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Filters results to documents associated with a specific entity type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "APPOINTMENT",
                "ASSET",
                "BILL",
                "BANK_DEPOSIT",
                "BILL_PAYMENT",
                "BUILDING",
                "CONTACT",
                "FLOOR_PLAN",
                "DESKTOP",
                "EMAIL_TEMPLATE",
                "INSPECTION",
                "LEASE",
                "OTHER",
                "PORTFOLIO",
                "PROSPECT",
                "RECONCILIATION",
                "TASK",
                "TRANSACTION",
                "UNIT",
                "VENDOR",
                "WORK_ORDER"
              ]
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "Filters results to documents associated with a specific entity id. entity ID is not required for DESKTOP and OTHER. Remaining entities need entity ID.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Document" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Documents"],
        "summary": "Upload a document (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpload a document<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Write</code>\n",
        "operationId": "uploadDocument",
        "parameters": [
          {
            "name": "entityId",
            "in": "query",
            "description": "Unique identifier of an entity document is attached to.",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "publishToTenantPortal",
            "in": "query",
            "description": "Indicates if the document is published to the tenant portal.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "publishToOwnerPortal",
            "in": "query",
            "description": "Indicates if the document is published to the owner portal.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Entity type Document is attached to (Asset, Bill, Bank Deposit, Building, Desktop, Lease, Owner, Portfolio, Prospect, Prospect Contact, Tenant, Unit, Vendor, Check, Credit, Service Agreement, Journal Entry, Work Order)",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": { "type": "string", "format": "binary" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Document" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/docs/{documentId}": {
      "get": {
        "tags": ["Documents"],
        "summary": "Retrieve a document",
        "description": "Retrieves the metadata of a specific document.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Read</code>\n",
        "operationId": "retrieveDocument",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "ID of the document to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Document" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "put": {
        "tags": ["Documents"],
        "summary": "Update a document (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates the metadata of a specific document.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Write</code>\n",
        "operationId": "updateDocument",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "ID of the document to be updated",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateDocument" }
            }
          },
          "description": "updateDocument",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Document" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Documents"],
        "summary": "Delete a document (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a specific document and its associated content.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Delete</code>\n",
        "operationId": "deleteDocument",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "ID of the document to delete",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/docs/{documentId}/download": {
      "get": {
        "tags": ["Documents"],
        "summary": "Download a document",
        "description": "Retrieve a temporary download URL for a specific document.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Read</code>\n",
        "operationId": "downloadDocument",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "ID of the document to download",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Document-Type": {
                "description": "Header indicates the type of a document",
                "schema": { "type": "string" }
              },
              "X-Document-Name": {
                "description": "Header indicates the name of a document",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/octet-stream": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/octet-stream": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/octet-stream": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["Health check"],
        "summary": "Health check",
        "description": "Indicates whether the API is up and running correctly.<br/><br/>",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/inspections": {
      "get": {
        "tags": ["Inspections"],
        "summary": "Retrieve all inspections",
        "description": "Retrieves a list of inspections.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">INSPECTIONS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>number</code>, <code>lastmodifieddatetime</code>, <code>status</code>, <code>id</code>",
        "operationId": "getInspections",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results to inspections with a specific status.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results to inspections associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "buildingID",
            "in": "query",
            "description": "Filters results to inspections associated with a specific building.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results to inspections with a specific type.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Inspection" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/inspections/{inspectionId}": {
      "get": {
        "tags": ["Inspections"],
        "summary": "Retrieve a inspection",
        "description": "Retrieves a specific inspection.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">INSPECTIONS</span> - <code>Read</code>\n",
        "operationId": "getInspection",
        "parameters": [
          {
            "name": "inspectionId",
            "in": "path",
            "description": "Inspection ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Inspection" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all leases",
        "description": "Retrieves a list of leases.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>startdate</code>, <code>idnumber</code>, <code>scheduledmoveoutdate</code>, <code>enddate</code>, <code>lastmodifieddatetime</code>, <code>status</code>, <code>moveoutdate</code>, <code>id</code>, <code>moveindate</code>",
        "operationId": "getLeases",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "startDateStart",
            "in": "query",
            "description": "Filters results to any lease with a start date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "startDateEnd",
            "in": "query",
            "description": "Filters results to any lease with a start date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "endDateStart",
            "in": "query",
            "description": "Filters results to any lease with a end date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "endDateEnd",
            "in": "query",
            "description": "Filters results to any lease with a end date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "moveInDateStart",
            "in": "query",
            "description": "Filters results to any lease with a move-in date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "moveInDateEnd",
            "in": "query",
            "description": "Filters results to any lease with a move-in date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "scheduleMoveOutDateStart",
            "in": "query",
            "description": "Filters results to any lease with a move-out date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "scheduleMoveOutDateEnd",
            "in": "query",
            "description": "Filters results to any lease with a move-out date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results to leases associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "buildingID",
            "in": "query",
            "description": "Filters results to leases associated with a specific building.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "unitID",
            "in": "query",
            "description": "Filters results to leases associated with a specific unit.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results to inspections with a specific status.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Lease" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Leases"],
        "summary": "Create a lease (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a new lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "createLease",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveLease" }
            }
          },
          "description": "saveLease",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Lease" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/adjustments": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all the adjustments",
        "description": "Retrieves a list of adjustments.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>id</code>",
        "operationId": "getLeaseAdjustments",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "leaseID",
            "in": "query",
            "description": "Filters results with Lease ID.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results to with Lease Status.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Adjustment" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Leases"],
        "summary": "Create a lease adjustment (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a lease adjustment.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "createLeaseAdjustment",
        "requestBody": { "$ref": "#/components/requestBodies/SaveAdjustment" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Adjustment" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/leases/adjustments/{adjustmentID}": {
      "put": {
        "tags": ["Leases"],
        "summary": "Update a lease adjustment (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates an lease adjustment.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "updateLeaseAdjustment",
        "parameters": [
          {
            "name": "adjustmentID",
            "in": "path",
            "description": "Adjustment ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveAdjustment" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Adjustment" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/charges": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all the lease charges",
        "description": "Retrieves a list of lease charges.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getLeaseCharges",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "leaseID",
            "in": "query",
            "description": "Filters results with Lease ID.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results to with Lease Status.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ChargeTx" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Leases"],
        "summary": "Create a lease charge (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a lease charge.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "createLeaseCharge",
        "requestBody": { "$ref": "#/components/requestBodies/SaveCharge" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChargeTx" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/leases/charges/bulk": {
      "post": {
        "tags": ["Leases"],
        "summary": "Create lease charges in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates lease charges in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "createLeaseCharges",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SaveCharge" }
              }
            }
          },
          "description": "saveCharge",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/leases/charges/{chargeID}": {
      "put": {
        "tags": ["Leases"],
        "summary": "Update a lease charge (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates a lease charge.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "updateLeaseCharge",
        "parameters": [
          {
            "name": "chargeID",
            "in": "path",
            "description": "Charge ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveCharge" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChargeTx" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/creditmemos": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all the credit memos",
        "description": "Retrieves a list of credit memos.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getLeaseCreditMemos",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "leaseID",
            "in": "query",
            "description": "Filters results with Lease ID.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results to with Lease Status.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CreditMemo" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/discounts": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all the lease discounts",
        "description": "Retrieves a list of lease discounts<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getLeaseDiscounts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "leaseID",
            "in": "query",
            "description": "Filters results to any LeaseID.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any discount with a start date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any discount with a start date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Discount" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Leases"],
        "summary": "Create a lease discount (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a lease discount.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "createLeaseDiscount",
        "requestBody": { "$ref": "#/components/requestBodies/SaveDiscount" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Discount" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/leases/discounts/{discountID}": {
      "put": {
        "tags": ["Leases"],
        "summary": "Updates a lease Discount (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates a lease Discount.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "updateLeaseDiscount",
        "parameters": [
          {
            "name": "discountID",
            "in": "path",
            "description": "Discount ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveDiscount" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Discount" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/journalentries": {
      "post": {
        "tags": ["Leases"],
        "summary": "Create a lease journal entry (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a lease journal entry.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "createJournalEntry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveLeaseJournalEntry" }
            }
          },
          "description": "saveLeaseJournalEntry",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/JournalEntry" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/leases/journalentries/{journalentryID}": {
      "put": {
        "tags": ["Leases"],
        "summary": "Update a lease journal entry (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates a lease journal entry.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n<br/><br/><b>Sortable by:</b> <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "updateLeaseJournalEntry",
        "parameters": [
          {
            "name": "journalentryID",
            "in": "path",
            "description": "Journal Entry ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaseJournalEntry"
              }
            }
          },
          "description": "updateLeaseJournalEntry",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/JournalEntry" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/journalentries/{leaseID}": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease journal entries ",
        "description": "Retrieves a specific lease journal entries.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseJournalEntry",
        "parameters": [
          {
            "name": "leaseID",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "leaseID",
            "in": "query",
            "description": "Filters results to transactions associated with a specific lease.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any transaction with post date on or after to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any transaction with post date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/JournalEntry" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/payments": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all the lease payments",
        "description": "Retrieves a list of lease payments.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getLeasePayments",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "leaseID",
            "in": "query",
            "description": "Filters results with Lease ID.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results to with Lease Status.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Payment" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Leases"],
        "summary": "Create a lease payment (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a lease payment.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "createLeasePayment",
        "requestBody": { "$ref": "#/components/requestBodies/SavePayment" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Payment" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/leases/payments/{entityID}": {
      "put": {
        "tags": ["Leases"],
        "summary": "Update a lease payment (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates a lease payment.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "updateLeasePayment",
        "parameters": [
          {
            "name": "entityID",
            "in": "path",
            "description": "Lease Payment ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SavePayment" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Payment" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/refunds": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all the tenant refunds",
        "description": "Retrieves a list of tenant refunds.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getLeaseRefunds",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "postDateStart",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or after the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "postDateEnd",
            "in": "query",
            "description": "Filters results to any transaction with a start date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "leaseID",
            "in": "query",
            "description": "Filters results with Lease ID.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results to with Lease Status.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Refund" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Leases"],
        "summary": "Create a lease refund (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a lease refund.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "createLeaseRefund",
        "requestBody": { "$ref": "#/components/requestBodies/SaveRefund" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Refund" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/leases/refunds/{refundID}": {
      "put": {
        "tags": ["Leases"],
        "summary": "Update a lease refund (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdate an lease refund.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "updateLeaseRefund",
        "parameters": [
          {
            "name": "refundID",
            "in": "path",
            "description": "Refund ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveRefund" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Refund" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/statuses": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease statuses (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a list of all lease statuses<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getAllLeaseStatuses",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LeaseStatus" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseID}": {
      "delete": {
        "tags": ["Leases"],
        "summary": "Delete a lease (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a lease<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Delete</code>\n",
        "operationId": "deleteLease",
        "parameters": [
          {
            "name": "leaseID",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseID}/conversations": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease conversations",
        "description": "Retrieves all the conversations of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getLeaseConversations",
        "parameters": [
          {
            "name": "leaseID",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results by the conversation type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Conversation" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "post": {
        "tags": ["Leases"],
        "summary": "Create a lease conversation (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a specific lease conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "createLeaseConversation",
        "parameters": [
          {
            "name": "leaseID",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SaveConversation"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseID}/conversations/{conversationID}": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve a lease conversation",
        "description": "Retrieves a specific lease conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseConversation",
        "parameters": [
          {
            "name": "leaseID",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Leases"],
        "summary": "Delete a lease conversation (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a specific lease conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Delete</code>\n",
        "operationId": "deleteLeaseConversation",
        "parameters": [
          {
            "name": "leaseID",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseID}/conversations/{conversationID}/comments": {
      "post": {
        "tags": ["Leases"],
        "summary": "Add comment to a lease conversation (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nAdds comment to a lease conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "addCommentToLeaseConversation",
        "parameters": [
          {
            "name": "leaseID",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveComment" }
            }
          },
          "description": "saveComment",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Comment" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseId}": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve a lease",
        "description": "Retrieves a specific lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLease",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Lease" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "put": {
        "tags": ["Leases"],
        "summary": "Update a lease (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates an existing lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code>\n",
        "operationId": "updateLease",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveLease" }
            }
          },
          "description": "lease",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Lease" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseId}/autocharges": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease auto charges",
        "description": "Retrieves all the auto charges of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseAutoCharges",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Charge" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseId}/autoepayments": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease auto ePayments (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves all the auto ePayments of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseAutoEPayments",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AutoPayment" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseId}/autojournalentries": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease auto journal entries (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves all the auto journal entries of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseAutoJournalEntries",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AutoJournalEntry" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseId}/contacts": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease contacts",
        "description": "Retrieves all the contacts of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseContacts",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "Include contact custom fields in the response.",
            "in": "query",
            "description": "Include contact custom fields in the response.",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Contact" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseId}/customfields": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease custom fields",
        "description": "Retrieves all the custom fields of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseCustomFields",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CustomField" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseId}/document": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease documents",
        "description": "Retrieves all the documents of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseDocuments",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Document" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseId}/latefeerule": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve the lease late fee rule",
        "description": "Retrieves the lease late fee rule.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseLateFee",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LateFeeRule" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseId}/notes": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease notes",
        "description": "Retrieves all the notes of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseNotes",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Note" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/leases/{leaseId}/workorders": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease work orders",
        "description": "Retrieves all the work orders of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code>\n",
        "operationId": "getLeaseWorkOrders",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "Lease ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WorkOrder" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/portfolios": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Retrieve all portfolios",
        "description": "Retrieves a list of portfolios.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>name</code>, <code>abbreviation</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getPortfolios",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeDeactivated",
            "in": "query",
            "description": "Filters results to portfolios with a deactivated records.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Portfolio" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Portfolios"],
        "summary": "Create a portfolio (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a portfolio.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Write</code>\n",
        "operationId": "createPortfolio",
        "requestBody": { "$ref": "#/components/requestBodies/SavePortfolio" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Portfolio" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/portfolios/bulk": {
      "post": {
        "tags": ["Portfolios"],
        "summary": "Create Portfolios in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates Portfolios in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Write</code>\n",
        "operationId": "createContactsUsingPOST_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SavePortfolio" }
              }
            }
          },
          "description": "savePortfolio",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/portfolios/{portfolioID}": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Retrieve a portfolio",
        "description": "Retrieves a specific portfolio.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Read</code>\n",
        "operationId": "getPortfolio",
        "parameters": [
          {
            "name": "portfolioID",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Portfolio" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "put": {
        "tags": ["Portfolios"],
        "summary": "Update a portfolio (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdates an existing portfolio.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Write</code>\n",
        "operationId": "updatePortfolio",
        "parameters": [
          {
            "name": "portfolioID",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SavePortfolio" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Portfolio" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/portfolios/{portfolioID}/conversations": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Retrieve all portfolio conversations",
        "description": "Retrieves all the conversations of a portfolio.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getPortfolioConversations",
        "parameters": [
          {
            "name": "portfolioID",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results by the conversation type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Conversation" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/portfolios/{portfolioID}/conversations/{conversationID}": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Retrieve a portfolio conversation",
        "description": "Retrieves a specific portfolio conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Read</code>\n",
        "operationId": "getPortfolioConversation",
        "parameters": [
          {
            "name": "portfolioID",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Portfolios"],
        "summary": "Delete a portfolio conversation (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a specific portfolio conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Delete</code>\n",
        "operationId": "deletePortfolioConversation",
        "parameters": [
          {
            "name": "portfolioID",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/prospects": {
      "get": {
        "tags": ["Prospects"],
        "summary": "Retrieve all prospects",
        "description": "Retrieves a list of prospects.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>type</code>, <code>lastmodifieddatetime</code>, <code>status</code>, <code>id</code>",
        "operationId": "getProspects",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results to prospects with a specific status.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results to prospects associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "buildingID",
            "in": "query",
            "description": "Filters results to prospects associated with a specific building.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results to prospects with a specific type.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Prospect" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Prospects"],
        "summary": "Create a prospect (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a specific prospect.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Write</code>\n",
        "operationId": "createProspect",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveProspect" }
            }
          },
          "description": "saveProspect",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Prospect" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/prospects/bulk": {
      "post": {
        "tags": ["Prospects"],
        "summary": "Create prospects in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates prospects in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Write</code>\n",
        "operationId": "createContactsUsingPOST_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SaveProspect" }
              }
            }
          },
          "description": "saveProspect",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/prospects/statuses": {
      "get": {
        "tags": ["Prospects"],
        "summary": "Retrieve all prospect statuses (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves a list of all prospect statuses<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code>\n",
        "operationId": "getProspectStatuses",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ProspectStatus" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/prospects/{prospectID}": {
      "get": {
        "tags": ["Prospects"],
        "summary": "Retrieve a prospect",
        "description": "Retrieves a specific prospect.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code>\n",
        "operationId": "getProspect",
        "parameters": [
          {
            "name": "prospectID",
            "in": "path",
            "description": "Prospect ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Prospect" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/prospects/{prospectID}/campaign": {
      "get": {
        "tags": ["Prospects"],
        "summary": "Retrieve prospect campaign",
        "description": "Retrieves the campaign details of a prospect.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code>\n",
        "operationId": "getProspectCampaign",
        "parameters": [
          {
            "name": "prospectID",
            "in": "path",
            "description": "Prospect ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Campaign" }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/prospects/{prospectID}/conversations": {
      "get": {
        "tags": ["Prospects"],
        "summary": "Retrieve all prospect conversations",
        "description": "Retrieves all the conversations of a prospect.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getProspectConversations",
        "parameters": [
          {
            "name": "prospectID",
            "in": "path",
            "description": "Prospect ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results by the conversation type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Conversation" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "post": {
        "tags": ["Prospects"],
        "summary": "Create a prospect conversation (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a specific prospect conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Write</code>\n",
        "operationId": "createProspectConversation",
        "parameters": [
          {
            "name": "prospectID",
            "in": "path",
            "description": "Prospect ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SaveConversation"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/prospects/{prospectID}/conversations/{conversationID}": {
      "get": {
        "tags": ["Prospects"],
        "summary": "Retrieve a prospect conversation",
        "description": "Retrieves a specific prospect conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code>\n",
        "operationId": "getProspectConversation",
        "parameters": [
          {
            "name": "prospectID",
            "in": "path",
            "description": "Prospect ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Prospects"],
        "summary": "Delete a prospect conversation (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a specific prospect conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Delete</code>\n",
        "operationId": "deleteProspectConversation",
        "parameters": [
          {
            "name": "prospectID",
            "in": "path",
            "description": "Prospect ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/units": {
      "get": {
        "tags": ["Units"],
        "summary": "Retrieve all units",
        "description": "Retrieves a list of units.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>idnumber</code>, <code>name</code>, <code>abbreviation</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getUnits",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "vacant",
            "in": "query",
            "description": "Filters results by the unit's vacancy status. If no value is specified, units with any status will be returned.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "publishedForRent",
            "in": "query",
            "description": "Filters results by the unit's \"published for rent\" status. If no value is specified, units with any status will be returned.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results to units associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "buildingID",
            "in": "query",
            "description": "Filters results to units associated with a specific building.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results to units with a specific type.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeDeactivated",
            "in": "query",
            "description": "Include inactive units in the results.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Unit" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Units"],
        "summary": "Create a unit (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a unit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Write</code>\n",
        "operationId": "createUnit",
        "requestBody": { "$ref": "#/components/requestBodies/SaveUnit" },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unit" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/units/bulk": {
      "post": {
        "tags": ["Units"],
        "summary": "Create units in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates units in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Write</code>\n",
        "operationId": "createContactsUsingPOST_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SaveUnit" }
              }
            }
          },
          "description": "saveUnit",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/units/{unitID}": {
      "get": {
        "tags": ["Units"],
        "summary": "Retrieve a unit",
        "description": "Retrieves a specific unit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Read</code>\n",
        "operationId": "getUnit",
        "parameters": [
          {
            "name": "unitID",
            "in": "path",
            "description": "Unit ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unit" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "put": {
        "tags": ["Units"],
        "summary": "Update a unit (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdate as unit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Write</code>\n",
        "operationId": "updateUnit",
        "parameters": [
          {
            "name": "unitID",
            "in": "path",
            "description": "Unit ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SaveUnit" },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unit" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Units"],
        "summary": "Delete a unit (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a specific unit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Delete</code>\n",
        "operationId": "deleteUnit",
        "parameters": [
          {
            "name": "unitID",
            "in": "path",
            "description": "Unit ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/units/{unitID}/conversations": {
      "get": {
        "tags": ["Units"],
        "summary": "Retrieve all unit conversations",
        "description": "Retrieves all the conversations of a unit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getUnitConversations",
        "parameters": [
          {
            "name": "unitID",
            "in": "path",
            "description": "Unit ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results by the conversation type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Conversation" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/units/{unitID}/conversations/{conversationID}": {
      "get": {
        "tags": ["Units"],
        "summary": "Retrieve a unit conversation",
        "description": "Retrieves a specific unit conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Read</code>\n",
        "operationId": "getUnitConversation",
        "parameters": [
          {
            "name": "unitID",
            "in": "path",
            "description": "Unit ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Units"],
        "summary": "Delete a unit conversation (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a specific unit conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Delete</code>\n",
        "operationId": "deleteUnitConversation",
        "parameters": [
          {
            "name": "unitID",
            "in": "path",
            "description": "Unit ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/units/{unitID}/customFields": {
      "get": {
        "tags": ["Units"],
        "summary": "Retrieve all unit custom fields",
        "description": "Retrieves all the custom fields of a unit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Read</code>\n",
        "operationId": "getLeaseCustomFieldsUsingGET_1",
        "parameters": [
          {
            "name": "unitID",
            "in": "path",
            "description": "Unit ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Unit" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/vendors": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve all vendors",
        "description": "Retrieves a list of vendors.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>vendortype</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getVendors",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Filters results by the vendor's status. If no value is specified, vendors with any status will be returned.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results to units with a specific type.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Vendor" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Vendors"],
        "summary": "Create a vendor (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a vendor.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code>\n",
        "operationId": "createVendor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveVendor" }
            }
          },
          "description": "saveVendor",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Vendor" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/vendors/bulk": {
      "post": {
        "tags": ["Vendors"],
        "summary": "Create Vendors in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates Vendors in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code>\n",
        "operationId": "createVendors",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SaveVendor" }
              }
            }
          },
          "description": "saveVendor",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/vendors/{vendorID}": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve a vendor",
        "description": "Retrieves a specific vendor.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code>\n",
        "operationId": "getVendor",
        "parameters": [
          {
            "name": "vendorID",
            "in": "path",
            "description": "Vendor ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Vendor" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/vendors/{vendorID}/account": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve vendor GL account (BETA)",
        "description": "<p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p>\nRetrieves the default general ledger account of a vendor.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code>\n",
        "operationId": "getVendorAccount",
        "parameters": [
          {
            "name": "vendorID",
            "in": "path",
            "description": "Vendor ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Account" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/vendors/{vendorID}/conversations": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve all vendor conversations",
        "description": "Retrieves all the conversations of a vendor.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getVendorConversations",
        "parameters": [
          {
            "name": "vendorID",
            "in": "path",
            "description": "Vendor ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results by the conversation type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Conversation" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/vendors/{vendorID}/conversations/{conversationID}": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve a vendor conversation",
        "description": "Retrieves a specific vendor conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code>\n",
        "operationId": "getVendorConversation",
        "parameters": [
          {
            "name": "vendorID",
            "in": "path",
            "description": "Vendor ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "conversationID",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/workorders": {
      "get": {
        "tags": ["Work orders"],
        "summary": "Retrieve all work orders",
        "description": "Retrieves a list of work orders.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>number</code>, <code>type</code>, <code>lastmodifieddatetime</code>, <code>status</code>, <code>id</code>",
        "operationId": "getWorkOrders",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "portfolioID",
            "in": "query",
            "description": "Filters results to prospects associated with a specific portfolio.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "buildingID",
            "in": "query",
            "description": "Filters results to prospects associated with a specific building.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results to work orders with a specific status.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results to work orders with a specific type.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "priority",
            "in": "query",
            "description": "Filters results to work orders with a specific priority.",
            "required": false,
            "schema": { "type": "string", "enum": ["HIGH", "MEDIUM", "LOW"] }
          },
          {
            "name": "completedDateStart",
            "in": "query",
            "description": "Filters results to any payment with a date on or after to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "completedDateEnd",
            "in": "query",
            "description": "Filters results to any payment with a date on or prior to the date specified.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WorkOrder" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Work orders"],
        "summary": "Create a work order (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates a work order.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code>\n",
        "operationId": "createWorkOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveWorkOrder" }
            }
          },
          "description": "saveWorkOrder",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkOrder" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/workorders/bulk": {
      "post": {
        "tags": ["Work orders"],
        "summary": "Create work orders in bulk (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreates word orders in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code>\n",
        "operationId": "createWorkOrders",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SaveWorkOrder" }
              }
            }
          },
          "description": "saveWorkOrder",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkSuccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RESTAPIBulkErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/workorders/{workOrderID}": {
      "delete": {
        "tags": ["Work orders"],
        "summary": "Delete a Work Order (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDelete a Work Order.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Delete</code>\n",
        "operationId": "deleteWorkOrder",
        "parameters": [
          {
            "name": "workOrderID",
            "in": "path",
            "description": "Work Order ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/workorders/{workOrderID}/tasks/{taskID}": {
      "get": {
        "tags": ["Work orders"],
        "summary": "Retrieve a work order task",
        "description": "Retrieves a specific work order task.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Read</code>\n",
        "operationId": "getWorkOrderTask",
        "parameters": [
          {
            "name": "workOrderID",
            "in": "path",
            "description": "Work Order ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Task" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "delete": {
        "tags": ["Work orders"],
        "summary": "Delete a work order task (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nDeletes a specific work order task.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Delete</code>\n",
        "operationId": "deleteWorkOrderTask",
        "parameters": [
          {
            "name": "workOrderID",
            "in": "path",
            "description": "Work Order ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResponseEntity" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/workorders/{workOrderId}": {
      "get": {
        "tags": ["Work orders"],
        "summary": "Retrieve a work order",
        "description": "Retrieves a specific work order.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Read</code>\n",
        "operationId": "getWorkOrder",
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "description": "Work Order ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "includeCustomFields",
            "required": false,
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkOrder" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/workorders/{workOrderId}/tasks": {
      "get": {
        "tags": ["Work orders"],
        "summary": "Retrieve all work order tasks",
        "description": "Retrieves a list of work order tasks.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Read</code>\n<br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>",
        "operationId": "getWorkOrderTasks",
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "description": "Work Order ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The offset is zero-based and the default is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 500 and the default is 100.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 }
          },
          {
            "name": "lastModifiedDateTimeStart",
            "in": "query",
            "description": "Filters results to any item modified on or after the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "lastModifiedDateTimeEnd",
            "in": "query",
            "description": "Filters results to any item modified on or prior to the date time specified. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Indicates the field(s) and direction to sort the results in the response.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "dueDate",
            "in": "query",
            "description": "Filters results by due day.",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "completed",
            "in": "query",
            "description": "Filters results by task status.",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total resultset count",
                "schema": { "type": "integer", "format": "int64" }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Task" }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      },
      "post": {
        "tags": ["Work orders"],
        "summary": "Create a task to workOrder (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nCreate a task to an workOrder.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code>\n",
        "operationId": "createWorkOrderTask",
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "description": "Work Order ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SaveWorkOrderTask"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Task" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    },
    "/workorders/{workOrderId}/tasks/{taskId}": {
      "put": {
        "tags": ["Work orders"],
        "summary": "Update a task in workOrder (BETA)",
        "description": "<p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p>\nUpdate an existing workOrder task.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code>\n",
        "operationId": "updateWorkOrderTask",
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "description": "Work Order ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SaveWorkOrderTask"
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Task" }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resources.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": { "description": "Entity not found." }
        }
      }
    }
  },
  "servers": [{ "url": "https://api.propertyware.com/pw/api/rest/v1" }],
  "components": {
    "requestBodies": {
      "SaveBill": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveBill" }
          }
        },
        "description": "saveBill",
        "required": true
      },
      "SaveUnit": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveUnit" }
          }
        },
        "description": "saveUnit",
        "required": true
      },
      "SaveContact": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveContact" }
          }
        },
        "description": "saveContact",
        "required": true
      },
      "SaveCharge": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveCharge" }
          }
        },
        "description": "saveCharge",
        "required": true
      },
      "SaveCredit": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveCredit" }
          }
        },
        "description": "saveCredit",
        "required": true
      },
      "SaveConversation": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveConversation" }
          }
        },
        "description": "saveConversation",
        "required": true
      },
      "SavePortfolio": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SavePortfolio" }
          }
        },
        "description": "savePortfolio",
        "required": true
      },
      "SaveAccount": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveAccount" }
          }
        },
        "description": "saveAccount",
        "required": true
      },
      "SaveOwnerDraw": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveOwnerDraw" }
          }
        },
        "description": "saveOwnerDraw",
        "required": true
      },
      "SaveBillPayment": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveBillPayment" }
          }
        },
        "description": "saveBillPayment",
        "required": true
      },
      "SaveCheck": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveCheck" }
          }
        },
        "description": "saveCheck",
        "required": true
      },
      "SaveBuilding": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveBuilding" }
          }
        },
        "description": "saveBuilding",
        "required": true
      },
      "SaveAdjustment": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveAdjustment" }
          }
        },
        "description": "saveAdjustment",
        "required": true
      },
      "SaveDiscount": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveDiscount" }
          }
        },
        "description": "saveDiscount",
        "required": true
      },
      "SavePayment": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SavePayment" }
          }
        },
        "description": "savePayment",
        "required": true
      },
      "SaveRefund": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveRefund" }
          }
        },
        "description": "saveRefund",
        "required": true
      },
      "SaveWorkOrderTask": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SaveWorkOrderTask" }
          }
        },
        "description": "saveWorkOrderTask",
        "required": true
      }
    },
    "schemas": {
      "Marketing": {
        "type": "object",
        "properties": {
          "availableDate": {
            "type": "string",
            "format": "date",
            "description": "Available date to lease for a unit/building."
          },
          "comments": {
            "type": "string",
            "description": "Marketing description."
          },
          "featured": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if property is featured for rent or sale."
          },
          "featuredForRent": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the unit/building is featured for rent."
          },
          "featuredForSale": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if unit/building is featured for sale."
          },
          "forSale": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if this building/unit is for sale."
          },
          "latitude": {
            "type": "number",
            "description": "Latitude for geolocation of this building/unit."
          },
          "leaseTerms": {
            "type": "integer",
            "format": "int32",
            "description": "Lease terms of a unit/building."
          },
          "leaseTermsUnits": {
            "type": "string",
            "description": "Unit/building lease terms units."
          },
          "longitude": {
            "type": "number",
            "description": "Longitude for geolocation of this building/unit."
          },
          "marketingName": {
            "type": "string",
            "description": "Marketing name."
          },
          "mlsLeaseNumber": {
            "type": "string",
            "description": "MLS lease number of this building/unit."
          },
          "mlsNumber": {
            "type": "string",
            "description": "MLS number of this building/unit."
          },
          "otherTenantCharges": {
            "type": "string",
            "description": "Other tenant charges."
          },
          "parcelNumber": {
            "type": "string",
            "description": "Parcel number of this building/unit."
          },
          "petsAllowed": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if pets are allowed in a unit/building."
          },
          "postingTitle": {
            "type": "string",
            "description": "Posting title name for marketing this building/unit."
          },
          "publishedForSale": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the unit/building is published for sale."
          },
          "salePrice": {
            "type": "number",
            "format": "double",
            "description": "Sale price of this building/unit."
          },
          "saleTerms": {
            "type": "string",
            "description": "Sale terms of this building/unit."
          },
          "shortDescription": {
            "type": "string",
            "description": "Marketing short description."
          },
          "smokingAllowed": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if smoking is allowed in this unit/building."
          },
          "specials": {
            "type": "string",
            "description": "Specials of this building/unit."
          }
        },
        "description": "Marketing Information"
      },
      "LeaseContact": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "description": "Company where the contact is employed."
          },
          "email": { "type": "string", "description": "E-mail address." },
          "firstName": { "type": "string", "description": "First name." },
          "homePhone": { "type": "string", "description": "Home phone." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastName": { "type": "string", "description": "Last name." },
          "mobilePhone": { "type": "string", "description": "Mobile phone." },
          "namedOnLease": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if contact is named on lease."
          },
          "primary": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if contact is primary contact of the lease."
          },
          "workPhone": { "type": "string", "description": "Work phone." }
        },
        "description": "Contact of the lease"
      },
      "GLItem": {
        "type": "object",
        "properties": {
          "comment": { "type": "string", "description": "Comments." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "glentries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Entry" }
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with this transaction."
          },
          "ownerID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the owner associated with this transaction."
          },
          "transactionType": {
            "type": "string",
            "description": "Transaction type."
          },
          "txDate": {
            "type": "string",
            "format": "date",
            "description": "Transaction date."
          },
          "vendorID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the vendor associated with this transaction."
          }
        },
        "description": "General Ledger Transaction"
      },
      "LeaseClause": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the clause."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "name": { "type": "string", "description": "Name of the clause." }
        }
      },
      "CampaignSource": {
        "type": "object",
        "properties": {
          "callTrackingGroupID": {
            "type": "string",
            "description": "Call tracking group id."
          },
          "default": { "type": "boolean" },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "name": {
            "type": "string",
            "description": "Name of the campaign source."
          },
          "referrerDomain": {
            "type": "string",
            "description": "Referrer domain."
          }
        },
        "description": "CampaignSource"
      },
      "BankDeposit": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "description": { "type": "string", "description": "Description." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "name": { "type": "string", "description": "Bank deposit name." },
          "status": { "type": "string", "description": "Status." }
        },
        "description": "Bank Deposit"
      },
      "SaveConversation": {
        "type": "object",
        "required": ["text", "type"],
        "properties": {
          "text": { "type": "string", "description": "Comment text." },
          "type": {
            "type": "string",
            "description": "Conversation type.",
            "enum": ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
          }
        },
        "description": "Conversation for Request"
      },
      "CustomFieldDefinition": {
        "type": "object",
        "properties": {
          "dataType": { "type": "string" },
          "defaultValue": { "type": "string" },
          "fieldName": { "type": "string" },
          "groupName": { "type": "string" },
          "requiredField": { "type": "string" }
        },
        "description": "Custom field definition."
      },
      "Campaign": {
        "type": "object",
        "properties": {
          "acceptedCallTrackingTerms": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the call tracking terms have been accepted."
          },
          "callTrackingCampaignID": {
            "type": "string",
            "description": "Campaign ID used for call tracking."
          },
          "callTrackingEnabled": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if call tracking is enabled for the campaign."
          },
          "callTrackingForwar": {
            "type": "string",
            "description": "Number to which call tracking calls are forwarded."
          },
          "callTrackingForwarAfterHours": {
            "type": "string",
            "description": "Number to which call tracking calls are forwarded after hours."
          },
          "callTrackingPhoneNumber": {
            "type": "string",
            "description": "Phone number used for call tracking."
          },
          "callTrackingReferrer": {
            "type": "string",
            "description": "Referrer for call tracking."
          },
          "callTrackingSearchPhrase": {
            "type": "string",
            "description": "Search phrase for call tracking."
          },
          "campaignSource": { "$ref": "#/components/schemas/CampaignSource" },
          "code": { "type": "string", "description": "Code of the campaign." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "customFields": {
            "type": "array",
            "description": "Custom fields.",
            "items": { "$ref": "#/components/schemas/CustomField" }
          },
          "description": {
            "type": "string",
            "description": "Description of the campaign."
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "End date of the campaign."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "name": { "type": "string", "description": "Name of the campaign." },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Start date of the campaign."
          },
          "targetProspectType": {
            "type": "string",
            "description": "Type of the targeted prospect."
          },
          "timezone": {
            "type": "string",
            "description": "Time zone of the campaign."
          }
        },
        "description": "Campaign"
      },
      "UpdateDocument": {
        "type": "object",
        "required": ["fileName"],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the document."
          },
          "fileName": {
            "type": "string",
            "description": "Name of the document."
          },
          "publishToOwnerPortal": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the document is published to the owner portal."
          },
          "publishToTenantPortal": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the document is published to the tenant portal."
          }
        },
        "description": "Update Document "
      },
      "SaveAutoCharge": {
        "type": "object",
        "required": [
          "amount",
          "dueDay",
          "frequency",
          "glAccountID",
          "startDate"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Auto charge amount."
          },
          "dueDay": {
            "type": "integer",
            "format": "int32",
            "description": "Charge due day."
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "Auto charge end date."
          },
          "frequency": {
            "type": "string",
            "description": "Charge frequency.",
            "enum": [
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY",
              "SEMIANUUAL",
              "ANUUAL",
              "ANUUAL_ACCRUAL"
            ]
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "GL Account ID."
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Auto charge start date."
          }
        },
        "description": "Auto charge request"
      },
      "SaveDiscount": {
        "type": "object",
        "required": ["amount", "date", "discountAccountID", "leaseID"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount, should be negative."
          },
          "comments": { "type": "string", "description": "Comments." },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date."
          },
          "discountAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Discount GL Account ID."
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with this discount."
          },
          "refNo": { "type": "string", "description": "Ref No." }
        },
        "description": "Discount for Request"
      },
      "SaveBillSplit": {
        "type": "object",
        "required": ["amount", "portfolioID"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Split amount."
          },
          "amountPaid": {
            "type": "number",
            "format": "double",
            "description": "Split amount paid."
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Location Building ID."
          },
          "comments": { "type": "string", "description": "Split comments." },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Split GL Account ID."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "markupDiscountSplit": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if markup discount split."
          },
          "paid": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if Bill Split is paid."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Location Portfolio ID."
          },
          "unitID": {
            "type": "integer",
            "format": "int64",
            "description": "Location Unit ID."
          }
        },
        "description": "Split"
      },
      "SaveUnit": {
        "type": "object",
        "required": [
          "abbreviation",
          "buildingID",
          "category",
          "name",
          "portfolioID",
          "type"
        ],
        "properties": {
          "abbreviation": {
            "type": "string",
            "description": "Abbreviation of Unit.",
            "minLength": 1,
            "maxLength": 12
          },
          "address": { "$ref": "#/components/schemas/SaveAddress" },
          "availableDate": {
            "type": "string",
            "format": "date",
            "description": "Unit Available date to lease."
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with this unit."
          },
          "category": {
            "type": "string",
            "description": "Unit Category.",
            "enum": ["RESIDENTIAL", "COMMERCIAL"]
          },
          "county": {
            "type": "string",
            "description": "Unit region of a state."
          },
          "description": {
            "type": "string",
            "description": "Marketing Description.",
            "minLength": 0,
            "maxLength": 65535
          },
          "floorNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Floor number.",
            "enum": [0, 1, 2]
          },
          "name": { "type": "string", "description": "Name of the unit." },
          "neighborhood": {
            "type": "string",
            "description": "Neighborhood.",
            "minLength": 0,
            "maxLength": 30
          },
          "numberBathrooms": {
            "type": "number",
            "format": "double",
            "description": "Number of bathrooms in the unit.",
            "enum": [
              0, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5,
              9, 9.5, 10
            ]
          },
          "numberBedrooms": {
            "type": "integer",
            "format": "int32",
            "description": "Number of bedrooms in the unit.",
            "minimum": 0,
            "maximum": 20
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this unit."
          },
          "ready": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if property is ready to be leased."
          },
          "reasonForPropertyLost": {
            "type": "string",
            "description": "Reason for property lost.",
            "enum": [
              "EMPTY",
              "ABANDONED",
              "FORECLOSURE",
              "MGR_RETURNED_TO_OWNER",
              "OTB_AS_FRBO",
              "OWNER_MOVED_BACK",
              "REFERRED_TO_SALES",
              "REFERRED_TO_SALES_OR_SOLD"
            ]
          },
          "residential": {
            "type": "boolean",
            "example": false,
            "description": "Is Unit is Residential or Commercial."
          },
          "searchTag": {
            "type": "string",
            "description": "Search tag.",
            "minLength": 0,
            "maxLength": 25
          },
          "targetDeposit": {
            "type": "number",
            "format": "double",
            "description": "Target deposit amount."
          },
          "targetRent": {
            "type": "number",
            "format": "double",
            "description": "Market rent for the unit."
          },
          "targetRentUnits": {
            "type": "string",
            "description": "Property target rent units.",
            "enum": [
              "DOLLAR_PER_SQ_FT_MONTH",
              "DOLLAR_PER_SQ_FT_YEAR",
              "DOLLAR_PER_SQ_M_MONTH",
              "DOLLAR_PER_SQ_M_YEAR",
              "DOLLAR_PER_MONTH",
              "DOLLAR_PER_WEEK",
              "DOLLAR_PER_NIGHT"
            ]
          },
          "totalArea": {
            "type": "number",
            "format": "double",
            "description": "Unit Area."
          },
          "type": {
            "type": "string",
            "description": "Indicates Unit type like Business Office,Medical Office,Showroom,R  and  D,Assigned Parking (Indoor),Assigned Parking (Outdoor),Warehouse,Restaurant,Shopping Mall Retail,Street Retail,Manufacturing,House,Town House,Apartment,Flat,Studio,Loft,Assigned Parking (Indoor),Assigned Parking (Outdoor) etc."
          }
        },
        "description": "SaveUnit"
      },
      "Entry": {
        "type": "object",
        "properties": {
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with this entry."
          },
          "comment": {
            "type": "string",
            "description": "Transaction comment."
          },
          "credit": {
            "type": "number",
            "format": "double",
            "description": "Credit amount."
          },
          "debit": {
            "type": "number",
            "format": "double",
            "description": "Debit amount."
          },
          "glaccountCode": { "type": "string" },
          "glaccountID": { "type": "integer", "format": "int64" },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this entry."
          },
          "unitID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the unit associated with this entry."
          }
        },
        "description": "General Ledger Entry"
      },
      "SavePortfolio": {
        "type": "object",
        "required": ["abbreviation", "name"],
        "properties": {
          "abbreviation": {
            "type": "string",
            "description": "Abbreviated name assigned to the portfolio."
          },
          "cashAccrual": {
            "type": "string",
            "description": "Cash or accrual accounting basis.",
            "enum": ["COMPANY_DEFAULT", "CASH", "ACCRUAL"]
          },
          "closingDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the accounting period for the portfolio will close."
          },
          "defaultBankAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Portfolio Default Bank Account ID"
          },
          "defaultSecdepAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Portfolio Default Security Deposit Bank Account ID"
          },
          "doNotPayOwnerDraw": {
            "type": "boolean",
            "example": false,
            "description": "Indicates that the owner should not be paid owner draws."
          },
          "maintenanceSpendingLimit": {
            "type": "number",
            "format": "double",
            "description": "Monthly or yearly Maintenance Spending Limit set for the portfolio for maintenance bills created by work orders."
          },
          "maintenanceSpendingLimitTime": {
            "type": "string",
            "description": "Monthly or Yearly Maintenance Spending Limit Time set for the portfolio for maintenance bills created by work orders.",
            "enum": ["NO_LIMIT", "DOLLAR_PER_MONTH", "DOLLAR_PER_YEAR"]
          },
          "name": { "type": "string", "description": "Name of the portfolio." },
          "ownerIds": {
            "type": "array",
            "description": "Portfolio owner Ids",
            "items": { "type": "integer", "format": "int64" }
          },
          "ownerStatementReportID": {
            "type": "integer",
            "format": "int64",
            "description": "Portfolio Owner Statement Report ID"
          },
          "owners": {
            "type": "array",
            "description": "Portfolio owners.",
            "items": { "$ref": "#/components/schemas/SaveOwner" }
          },
          "stickyNote": {
            "type": "string",
            "description": "Sticky notes. Maximum 500 characters."
          },
          "targetOperatingReserve": {
            "type": "number",
            "format": "double",
            "description": "Minimum balance to be maintained within the portfolio at all times."
          }
        },
        "description": "Save Portfolio "
      },
      "Prospect": {
        "type": "object",
        "properties": {
          "applicationFeePaid": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the application fee has been paid by the prospect."
          },
          "assigneFullName": {
            "type": "string",
            "description": "Name of the assigned prospect."
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with the prospect."
          },
          "cityDesired": { "type": "string", "description": "Desired city." },
          "comments": {
            "type": "string",
            "description": "Indicates if the prospect has any comments."
          },
          "contacts": {
            "type": "array",
            "description": "Contacts of the prospect",
            "items": { "$ref": "#/components/schemas/ProspectContact" }
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "currentHomeType": {
            "type": "string",
            "description": "Current home type."
          },
          "currentRentMortgage": {
            "type": "number",
            "format": "double",
            "description": "Current home mortgage."
          },
          "customFields": {
            "type": "array",
            "description": "Custom fields.",
            "items": { "$ref": "#/components/schemas/CustomField" }
          },
          "hasPets": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the prospect has pets."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseEndDate": {
            "type": "string",
            "format": "date",
            "description": "Confirmed lease end date."
          },
          "leaseStartDate": {
            "type": "string",
            "format": "date",
            "description": "Confirmed lease start date."
          },
          "moveInDate": {
            "type": "string",
            "format": "date",
            "description": "Desired move-in date."
          },
          "neighborhoodDesired": {
            "type": "string",
            "description": "Desired neighborhood."
          },
          "numberBathrooms": {
            "type": "number",
            "format": "double",
            "description": "Number of bathrooms desired by the prospect."
          },
          "numberBedrooms": {
            "type": "integer",
            "format": "int32",
            "description": "Number of bedrooms desired by the prospect."
          },
          "numberOfPets": {
            "type": "integer",
            "format": "int32",
            "description": "Number of pets."
          },
          "petType": { "type": "string", "description": "Pet type." },
          "petWeights": { "type": "string", "description": "Pet weights." },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with the prospect."
          },
          "preferredContactMethod": {
            "type": "string",
            "description": "Preferred contact method."
          },
          "propertyAddress": {
            "type": "string",
            "description": "Address of the property."
          },
          "propertyAddress2": {
            "type": "string",
            "description": "Additional address information of the property."
          },
          "propertyArea": {
            "type": "number",
            "format": "double",
            "description": "Area of the property."
          },
          "propertyAreaUnits": {
            "type": "string",
            "description": "Unit of measurement for the area of the property."
          },
          "propertyCity": {
            "type": "string",
            "description": "City of the property."
          },
          "propertyCountry": {
            "type": "string",
            "description": "Country of the property."
          },
          "propertyNumberBathrooms": {
            "type": "number",
            "format": "double",
            "description": "Number of bathrooms."
          },
          "propertyNumberBedrooms": {
            "type": "integer",
            "format": "int32",
            "description": "Number of bedrooms."
          },
          "propertyState": {
            "type": "string",
            "description": "State of the property."
          },
          "propertyZip": {
            "type": "string",
            "description": "Zip code of the property."
          },
          "reasonForMoving": {
            "type": "string",
            "description": "Reason for moving."
          },
          "rent": {
            "type": "number",
            "format": "double",
            "description": "Confirmed lease rent."
          },
          "rentMax": {
            "type": "number",
            "format": "double",
            "description": "Maximum desired rent."
          },
          "rentMin": {
            "type": "number",
            "format": "double",
            "description": "Minimum desired rent."
          },
          "securityDeposit": {
            "type": "number",
            "format": "double",
            "description": "Confirmed lease security deposit."
          },
          "source": { "type": "string", "description": "Prospect source." },
          "stateDesired": { "type": "string", "description": "Desired state." },
          "status": { "type": "string", "description": "Status." },
          "timeAtCurrentResidence": {
            "type": "string",
            "description": "Time the prospect is living at the current residence."
          },
          "type": { "type": "string", "description": "Prospect type." },
          "typeOfInquiry": {
            "type": "string",
            "description": "Type of inquiry made by the prospect."
          },
          "unitDesired": { "type": "string", "description": "Desired unit." },
          "unitID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the unit associated with the prospect."
          },
          "unitTypeDesired": {
            "type": "string",
            "description": "Desired unit type."
          },
          "zipDesired": { "type": "string", "description": "Desired zip code." }
        },
        "description": "Prospect"
      },
      "ProspectContact": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "description": "E-mail address." },
          "firstName": { "type": "string", "description": "First name." },
          "homePhone": { "type": "string", "description": "Home phone." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastName": { "type": "string", "description": "Last name." },
          "mobilePhone": { "type": "string", "description": "Mobile phone." },
          "workPhone": { "type": "string", "description": "Work phone." }
        },
        "description": "Contact of the prospect"
      },
      "BillPaid": {
        "type": "object",
        "properties": {
          "billDate": {
            "type": "string",
            "format": "date",
            "description": "Bill date."
          },
          "billNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Bill number."
          },
          "billSplits": {
            "type": "array",
            "description": "List of bill splits.",
            "items": { "$ref": "#/components/schemas/SplitPaid" }
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          }
        }
      },
      "BillPay": {
        "type": "object",
        "properties": {
          "billSplits": {
            "type": "array",
            "description": "Bill splits list.",
            "items": { "$ref": "#/components/schemas/SplitPay" }
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          }
        }
      },
      "SaveLease": {
        "type": "object",
        "required": [
          "endDate",
          "moveInDate",
          "primaryContactID",
          "startDate",
          "tenantIDs",
          "unitID"
        ],
        "properties": {
          "baseRent": {
            "type": "number",
            "format": "double",
            "description": "Property base rent."
          },
          "comments": { "type": "string", "description": "Comments." },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "End date of the lease term."
          },
          "leasingFeeAmount": {
            "type": "number",
            "format": "double",
            "description": "Move in leasing fee amount."
          },
          "leasingFeeDate": {
            "type": "string",
            "format": "date",
            "description": "Move in leasing fee post date."
          },
          "leasingFeeRefNo": {
            "type": "string",
            "description": "Move in leasing fee reference number."
          },
          "moveInDate": {
            "type": "string",
            "format": "date",
            "description": "Move In Date."
          },
          "moveOutDate": {
            "type": "string",
            "format": "date",
            "description": "Move Out Date."
          },
          "postFirstCharge": {
            "type": "boolean",
            "example": false,
            "description": "Indicates how to post first rent charge while move in."
          },
          "primaryContactID": {
            "type": "integer",
            "format": "int64",
            "description": "Primary contact ID, Should be one of tenant IDs."
          },
          "prorateMonth": {
            "type": "string",
            "description": "Indicates how to post first rent charge while move in.",
            "enum": [
              "DO_NOT_PRORATE",
              "FIRST_MONTH_PRORATE",
              "SECOND_MONTH_PRORATE"
            ]
          },
          "publicAssistanceProgram": {
            "type": "string",
            "description": "Public assistance program. Allowed values are 'None', 'Section 8', 'SCRIE', 'Rent Control', 'EDEN INC. - Shelter Care Plus', 'CLC', 'DHAP', 'FEMA', 'Harris County' etc. "
          },
          "rentAutoCharge": { "$ref": "#/components/schemas/SaveAutoCharge" },
          "scheduleMoveOutDate": {
            "type": "string",
            "format": "date",
            "description": "Scheduled move out date."
          },
          "searchTag": { "type": "string", "description": "Search tag." },
          "secDepAmount": {
            "type": "number",
            "format": "double",
            "description": "Move in security deposit amount."
          },
          "secDepChargeDate": {
            "type": "string",
            "format": "date",
            "description": "Move in security deposit charge date."
          },
          "signedDate": {
            "type": "string",
            "format": "date",
            "description": "Lease signed date."
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Start date of the lease term."
          },
          "status": {
            "type": "string",
            "description": "Indicates lease status. Allowed values are 'Active', 'Active - Notice Given', 'Draft', 'Eviction', 'Terminated' etc. "
          },
          "tenantIDs": {
            "type": "array",
            "description": "List of tenant IDs.",
            "items": { "type": "integer", "format": "int64" }
          },
          "unitID": {
            "type": "integer",
            "format": "int64",
            "description": "Unit/Building ID associated with this lease."
          }
        },
        "description": "Lease for Request"
      },
      "SplitPaid": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "amountPaid": {
            "type": "number",
            "format": "double",
            "description": "Total amount paid for this line item."
          },
          "amountPaidByBillPayment": {
            "type": "number",
            "format": "double",
            "description": "Amount that was paid in this payment."
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with this line item."
          },
          "comments": { "type": "string", "description": "Comments." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "paid": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if this line item is paid."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this line item."
          },
          "unitID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the unit associated with this line item."
          }
        }
      },
      "NonCurrentLiability": {
        "type": "object",
        "properties": {
          "discountAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a discount account."
          },
          "escrowAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a escrow account."
          },
          "excludeFrom1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from Form1099."
          },
          "excludeFromPayInFull": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from paying in full."
          },
          "excludeLateFee": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if excluding from late fees."
          },
          "rentAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a rent account."
          },
          "taxAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a tax account."
          }
        },
        "description": "Non Current Liability for Request"
      },
      "SaveBuilding": {
        "type": "object",
        "required": [
          "abbreviation",
          "category",
          "countUnit",
          "name",
          "portfolioID",
          "propertyType",
          "type"
        ],
        "properties": {
          "abbreviation": {
            "type": "string",
            "description": "Abbreviation of Building."
          },
          "address": { "$ref": "#/components/schemas/SaveAddress" },
          "allocationMethod": {
            "type": "string",
            "description": "Allocation method.",
            "enum": ["By Square Foot", "By Percent"]
          },
          "availableDate": {
            "type": "string",
            "format": "date",
            "description": "Date the building is available for leasing."
          },
          "category": {
            "type": "string",
            "description": "Building category.",
            "enum": ["RESIDENTIAL", "COMMERCIAL"]
          },
          "countUnit": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates number of units in the building."
          },
          "description": {
            "type": "string",
            "description": "Marketing description."
          },
          "floorNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Floor number."
          },
          "managementFeeType": {
            "type": "string",
            "description": "Indicates management fee type of a building."
          },
          "managementFlatFee": {
            "type": "number",
            "format": "double",
            "description": "Indicates management flat fee."
          },
          "marketingName": {
            "type": "string",
            "description": "Marketing name."
          },
          "multiUnit": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the building is multi family or single family."
          },
          "name": { "type": "string", "description": "Name of the building." },
          "naming": {
            "type": "string",
            "description": "Unit naming (Unit, Suite, Space, Custom)."
          },
          "neighborhood": { "type": "string", "description": "Neighborhood." },
          "numberBathrooms": {
            "type": "number",
            "format": "double",
            "description": "Number of bathrooms in the building."
          },
          "numberBedrooms": {
            "type": "integer",
            "format": "int32",
            "description": "Number of bedrooms in the building."
          },
          "numberFloors": {
            "type": "integer",
            "format": "int32",
            "description": "Number of floors."
          },
          "numbered": {
            "type": "string",
            "description": "Numbered alpha, numeric."
          },
          "otherTenantCharges": {
            "type": "string",
            "description": "Other tenant charges."
          },
          "parcelNumber": { "type": "string", "description": "Parcel number." },
          "petsAllowed": {
            "type": "boolean",
            "example": false,
            "description": "Pets allowed."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the portfolio associated with this building."
          },
          "postingTitle": {
            "type": "string",
            "description": "Marketing posting title."
          },
          "propertyType": {
            "type": "string",
            "description": "Property type.",
            "enum": [
              "NONE",
              "APARTMENT",
              "CONDO",
              "COMMERCIAL",
              "DU_FOUR_PLEX",
              "HOUSE",
              "SECTION_8_AFFORDABLE",
              "SENIOR",
              "SHORT_TERM_VACATION",
              "STUDENT",
              "TOWNHOUSE",
              "OTHER"
            ]
          },
          "publishedForRent": {
            "type": "string",
            "description": "Published for rent.",
            "enum": ["Yes", "No"]
          },
          "rentable": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the building is rentable."
          },
          "searchTag": { "type": "string", "description": "Search tag name." },
          "shortDescription": {
            "type": "string",
            "description": "Marketing short description."
          },
          "targetDeposit": {
            "type": "number",
            "format": "double",
            "description": "Target deposit amount."
          },
          "targetRent": {
            "type": "number",
            "format": "double",
            "description": "Market rent for the building."
          },
          "totalArea": {
            "type": "number",
            "format": "double",
            "description": "Building area."
          },
          "type": {
            "type": "string",
            "description": "Indicates Building type like Office, Industrial, Retail, Healthcare, Government, Airport, Garage/Parking, Apartment Building, Duplex / Triplex, Mobile Home / RV Community etc."
          },
          "yearBuiltAsString": {
            "type": "string",
            "description": "Building built year."
          }
        },
        "description": "SaveBuilding"
      },
      "Document": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "description": {
            "type": "string",
            "description": "Description of a document."
          },
          "entityId": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier of an entity document is attached to."
          },
          "entityType": {
            "type": "string",
            "description": "Type of an entity document is attached to.",
            "enum": [
              "APPOINTMENT",
              "ASSET",
              "BILL",
              "BANK_DEPOSIT",
              "BILL_PAYMENT",
              "BUILDING",
              "CONTACT",
              "FLOOR_PLAN",
              "DESKTOP",
              "EMAIL_TEMPLATE",
              "INSPECTION",
              "LEASE",
              "OTHER",
              "PORTFOLIO",
              "PROSPECT",
              "RECONCILIATION",
              "TASK",
              "TRANSACTION",
              "UNIT",
              "VENDOR",
              "WORK_ORDER"
            ]
          },
          "fileName": { "type": "string", "description": "File name." },
          "fileType": { "type": "string", "description": "File type." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "publishToOwnerPortal": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the document is published to the owner portal."
          },
          "publishToTenantPortal": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the document is published to the tenant portal."
          }
        }
      },
      "InspectionItem": {
        "type": "object",
        "properties": {
          "comments": { "type": "string", "description": "Comments." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "name": {
            "type": "string",
            "description": "Name of the inspection item."
          },
          "status": {
            "type": "string",
            "description": "Status of the inspection."
          }
        },
        "description": "InspectionItem"
      },
      "JournalEntrySplitResponse": {
        "type": "object",
        "required": ["creditAmount", "debitAmount", "glAccountID"],
        "properties": {
          "creditAmount": {
            "type": "number",
            "format": "double",
            "description": "Credit amount."
          },
          "debitAmount": {
            "type": "number",
            "format": "double",
            "description": "Debit amount."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this journal entry split."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          }
        }
      },
      "SaveCheckSplit": {
        "type": "object",
        "required": ["glAccountID", "portfolioID"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Check Split amount."
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Check Location Building ID."
          },
          "comments": {
            "type": "string",
            "description": "CheckSplit Comments."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Split GL Account ID."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Portfolio id to apply payment."
          },
          "unitID": {
            "type": "integer",
            "format": "int64",
            "description": "Check Location Unit ID."
          }
        },
        "description": "SaveCheckfor Request"
      },
      "WorkOrder": {
        "type": "object",
        "properties": {
          "age": {
            "type": "integer",
            "format": "int64",
            "description": "Number of days that have passed since the work order was created."
          },
          "approved": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if work order is approved."
          },
          "approvedDate": {
            "type": "string",
            "format": "date",
            "description": "Work order approved Date."
          },
          "assignedVendors": {
            "type": "array",
            "description": "List of vendors attached to the work order.",
            "items": { "$ref": "#/components/schemas/BasicVendor" }
          },
          "authorizeEnter": {
            "type": "string",
            "description": "Indicates if the tenant has granted your management staff access to enter his or her buildings and/or units.",
            "enum": ["NO", "ANYTIME", "SPECIFIEDTIME"]
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with this work order."
          },
          "category": {
            "type": "string",
            "description": "This classifies the work order into a category."
          },
          "completedDate": {
            "type": "string",
            "format": "date",
            "description": "Date on which the work was completed."
          },
          "contractNumber": {
            "type": "string",
            "description": "Contract number."
          },
          "costEstimate": {
            "type": "number",
            "format": "double",
            "description": "This indicates the estimated cost as entered by a person, the actual cost as determined by the work order bills, and the invoiced amount is the amount the owner will see on his or her statement based on the bill and markup/discount amount."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "customFields": {
            "type": "array",
            "description": "Custom fields.",
            "items": { "$ref": "#/components/schemas/CustomField" }
          },
          "dateToEnter": {
            "type": "string",
            "format": "date-time",
            "description": "Authorized date to enter unit."
          },
          "description": {
            "type": "string",
            "description": "This is a detailed description of the problem."
          },
          "hourEstimate": {
            "type": "number",
            "format": "double",
            "description": "Expected number of hours to complete the work order."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "lease": {
            "type": "string",
            "description": "If the work order is attached to an occupied building or unit, this is the lease name of that lease."
          },
          "location": {
            "type": "string",
            "description": "Buildings and/or units associated with this work order."
          },
          "maintenanceNotice": {
            "type": "string",
            "description": "Maintenance notice defined for the building that the work order is attached to."
          },
          "managedBy": {
            "type": "string",
            "description": "Name of the person who is responsible for managing the work order."
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "description": "Number assigned to this work order."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this work order."
          },
          "priority": {
            "type": "string",
            "description": "This identifies the priority of the work order as low, medium, or high.",
            "enum": ["HIGH", "MEDIUM", "LOW"]
          },
          "requestedBy": {
            "type": "string",
            "description": "This identifies the person that reported the problem, typically the tenant or owner associated with the buildings or units."
          },
          "requiredMaterials": {
            "type": "string",
            "description": "List of materials required to complete the work order."
          },
          "scheduledEndDate": {
            "type": "string",
            "format": "date",
            "description": "Date on which the work is scheduled to be completed."
          },
          "searchTag": { "type": "string", "description": "Search tag name." },
          "source": {
            "type": "string",
            "description": "This identifies how the problem was reported, such as telephone, in person, email, etc."
          },
          "specificLocation": {
            "type": "string",
            "description": "This describes the location in the buildings or units where the work is needed."
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Date on which the work was started."
          },
          "status": {
            "type": "string",
            "description": "Current status of the work order."
          },
          "type": {
            "type": "string",
            "description": "This classifies the work order into one of the following types: general, service request, turnover, inspection, estimate etc."
          }
        },
        "description": "Work Order"
      },
      "Adjustment": {
        "type": "object",
        "required": ["amount", "date"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post date."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this charge."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with this charge."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this charge."
          },
          "refNo": { "type": "string", "description": "Reference number." }
        },
        "description": "Adjustment"
      },
      "Refund": {
        "type": "object",
        "required": ["amount", "date"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post date."
          },
          "destinationAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the bank account to send the refund from."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with the refund."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with the refund."
          },
          "payeePayer": {
            "type": "string",
            "description": "Name of the payee."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with the refund."
          },
          "refNo": { "type": "string", "description": "Reference number." },
          "toBePrinted": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the check is to be printed."
          }
        },
        "description": "Tenant Refund"
      },
      "Comment": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "text": { "type": "string", "description": "Comment text." }
        },
        "description": "Comment"
      },
      "RESTAPIBulkErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/RESTAPIError" }
          },
          "index": { "type": "integer", "format": "int32" },
          "success": { "type": "boolean" }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "body": { "type": "string", "description": "Content of the note." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date the note was created."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "private": { "type": "boolean" },
          "subject": { "type": "string", "description": "Subject." }
        }
      },
      "SplitPay": {
        "type": "object",
        "properties": {
          "amountToPay": {
            "type": "number",
            "format": "double",
            "description": "Amount to pay."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          }
        }
      },
      "AutoJournalEntry": {
        "type": "object",
        "properties": {
          "comments": { "type": "string", "description": "Comments." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "credit": { "type": "string", "description": "Credit amount." },
          "debit": { "type": "string", "description": "Debit amount." },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "End date."
          },
          "frequency": {
            "type": "string",
            "description": "Frequency.",
            "enum": ["WEEKLY", "MONTHLY", "YEARLY", "MANUALLY"]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "lastPostDate": {
            "type": "string",
            "format": "date",
            "description": "Last post date."
          },
          "name": {
            "type": "string",
            "description": "Auto journal entry name."
          },
          "nextPostDate": {
            "type": "string",
            "format": "date",
            "description": "Next post date."
          },
          "payDay": { "type": "string", "description": "Pay day." },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Start date."
          }
        }
      },
      "NonOperatingInome": {
        "type": "object",
        "properties": {
          "camRecoveryAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a CAM recovery account."
          },
          "discountAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a discount account."
          },
          "escrowAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a escrow account."
          },
          "excludeFrom1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from Form1099."
          },
          "excludeFromPayInFull": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from paying in full."
          },
          "excludeLateFee": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if excluding from late fees."
          },
          "rentAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a rent account."
          },
          "taxAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a tax account."
          }
        },
        "description": "Non Operating Income for Request"
      },
      "SaveCharge": {
        "type": "object",
        "required": ["amount", "date", "glAccountID", "leaseID"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post Date."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "GL Account ID."
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Lease ID."
          },
          "refNo": { "type": "string", "description": "Charge reference No." }
        },
        "description": "Charge for Request"
      },
      "CurrentLiability": {
        "type": "object",
        "properties": {
          "discountAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is a discount account."
          },
          "escrowAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is a escrow account."
          },
          "excludeFrom1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is excluded from 1099 tax forms."
          },
          "excludeFromPayInFull": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is excluded from paying in full."
          },
          "excludeLateFee": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is excluded from late fees."
          },
          "rentAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is a rent account."
          },
          "taxAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is a tax account."
          }
        },
        "description": "Current Liability for Request"
      },
      "Charge": {
        "type": "object",
        "required": ["frequency", "startDate"],
        "properties": {
          "account": {
            "type": "string",
            "description": "General ledger account."
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Auto charge amount."
          },
          "description": {
            "type": "string",
            "description": "Description of the auto charge."
          },
          "dueDay": {
            "type": "string",
            "description": "Description of the day when the auto charge is due."
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "End date of auto charge."
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the auto charge.",
            "enum": [
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY",
              "SEMIANUUAL",
              "ANUUAL",
              "ANUUAL_ACCRUAL"
            ]
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the General Ledger Account associated to this auto charge."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastPostDate": {
            "type": "string",
            "format": "date",
            "description": "Last post date."
          },
          "referenceNumber": {
            "type": "string",
            "description": "Reference number."
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Start date of auto charge."
          }
        }
      },
      "Equity": {
        "type": "object",
        "properties": {
          "discountAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a discount account."
          },
          "escrowAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a escrow account."
          },
          "excludeFrom1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from Form1099."
          },
          "excludeFromPayInFull": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from paying in full."
          },
          "excludeLateFee": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if excluding from late fees."
          },
          "rentAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a rent account."
          },
          "taxAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a tax account."
          },
          "transferBalanceToRetainedEarnings": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if Transfer balance at year end to Retained earnings."
          }
        },
        "description": "Equity for Request"
      },
      "Task": {
        "type": "object",
        "properties": {
          "completed": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the task has been completed."
          },
          "completedTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the task was completed."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "delegates": {
            "type": "string",
            "description": "Comma separated IDs of users to whom the task has been delegated."
          },
          "description": {
            "type": "string",
            "description": "Description of the task."
          },
          "dueDate": {
            "type": "string",
            "format": "date",
            "description": "Date the task is due."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "privateTask": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the task is private."
          },
          "starred": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the task has been marked with a star."
          },
          "tags": {
            "type": "string",
            "description": "List of tags associated with the task."
          }
        },
        "description": "Task"
      },
      "CreditCardAccount": {
        "type": "object",
        "properties": {
          "creditCardNumber": {
            "type": "string",
            "description": "Credit card number."
          }
        },
        "description": "Credit Card Account for Request"
      },
      "SaveComment": {
        "type": "object",
        "required": ["text"],
        "properties": {
          "text": { "type": "string", "description": "Comment text." }
        },
        "description": "Comment for Request"
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errorCode": { "type": "string" },
          "errors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/RESTAPIError" }
          },
          "userMessage": { "type": "string" }
        }
      },
      "ResponseEntity": {
        "type": "object",
        "properties": {
          "body": { "type": "object" },
          "statusCode": {
            "type": "string",
            "enum": [
              "100",
              "101",
              "102",
              "103",
              "200",
              "201",
              "202",
              "203",
              "204",
              "205",
              "206",
              "207",
              "208",
              "226",
              "300",
              "301",
              "302",
              "303",
              "304",
              "305",
              "307",
              "308",
              "400",
              "401",
              "402",
              "403",
              "404",
              "405",
              "406",
              "407",
              "408",
              "409",
              "410",
              "411",
              "412",
              "413",
              "414",
              "415",
              "416",
              "417",
              "418",
              "419",
              "420",
              "421",
              "422",
              "423",
              "424",
              "426",
              "428",
              "429",
              "431",
              "500",
              "501",
              "502",
              "503",
              "504",
              "505",
              "506",
              "507",
              "508",
              "509",
              "510",
              "511"
            ]
          }
        }
      },
      "SaveAccount": {
        "type": "object",
        "required": ["accountNumber", "accountType", "code", "description"],
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Account number."
          },
          "accountType": {
            "type": "integer",
            "format": "int32",
            "description": "Valid account types - 1:Bank, 2:Credit Card, 5:Current Asset, 12:Non-Current Asset, 6:Current Liability, 13:Non-Current Liability, 7:Equity, 8:Income, 9:Expense, 10:Non-Operating Income, 11:Non-Operating Expense."
          },
          "autoApplyPrepayment": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if prepayments should be auto applied."
          },
          "bank": { "$ref": "#/components/schemas/Bank" },
          "code": { "type": "string", "description": "Account code." },
          "creditCard": { "$ref": "#/components/schemas/CreditCardAccount" },
          "currentAsset": { "$ref": "#/components/schemas/CurrentAsset" },
          "currentLiability": {
            "$ref": "#/components/schemas/CurrentLiability"
          },
          "description": { "type": "string", "description": "Description." },
          "equity": { "$ref": "#/components/schemas/Equity" },
          "expense": { "$ref": "#/components/schemas/Expense" },
          "income": { "$ref": "#/components/schemas/Income" },
          "nonCurrentAsset": { "$ref": "#/components/schemas/NonCurrentAsset" },
          "nonCurrentLiability": {
            "$ref": "#/components/schemas/NonCurrentLiability"
          },
          "nonOperatingExpense": {
            "$ref": "#/components/schemas/NonOperatingExpense"
          },
          "nonOperatingInome": {
            "$ref": "#/components/schemas/NonOperatingInome"
          },
          "parentGLAccountId": {
            "type": "integer",
            "format": "int64",
            "description": "Parent account ID."
          },
          "taxable": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is taxable."
          }
        },
        "description": "Create GL Account Request"
      },
      "Account": {
        "type": "object",
        "properties": {
          "accountCode": { "type": "string", "description": "Account code." },
          "accountNumber": {
            "type": "string",
            "description": "Account number."
          },
          "accountType": { "type": "string", "description": "Account type." },
          "active": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is active."
          },
          "autoApplyPrepayment": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if prepayments should be auto applied."
          },
          "bankAccountHolder": {
            "type": "string",
            "description": "Bank account holder name."
          },
          "bankAccountNumber": {
            "type": "string",
            "description": "Bank account number."
          },
          "bankAddress": { "type": "string", "description": "Bank address." },
          "bankAddress2": {
            "type": "string",
            "description": "Bank address 2."
          },
          "bankCity": { "type": "string", "description": "Bank city." },
          "bankInstitution": {
            "type": "string",
            "description": "Bank institution name."
          },
          "bankRoutingNumber": {
            "type": "string",
            "description": "Bank account routing number."
          },
          "bankState": { "type": "string", "description": "Bank state." },
          "bankZip": { "type": "string", "description": "Bank zip code." },
          "camRecoveryAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a CAM recovery account."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "discountAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a discount account."
          },
          "escrowAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a escrow account."
          },
          "excludeFrom1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from Form1099."
          },
          "excludeFromPayInFull": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from paying in full."
          },
          "excludeLateFee": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if excluding from late fees."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "lateFeeApplicable": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if a late fee is applicable."
          },
          "name": { "type": "string", "description": "Account name." },
          "parentGLAccountId": {
            "type": "integer",
            "format": "int64",
            "description": "Parent account ID."
          },
          "parentRef": {
            "type": "string",
            "description": "Parent account reference."
          },
          "paymentPriority": {
            "type": "integer",
            "format": "int32",
            "description": "Account payment priority."
          },
          "rentAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a rent account."
          },
          "section8": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a section8 account."
          },
          "taxAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a tax account."
          },
          "transferBalanceToRetainedEarnings": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account balance should be transferred to retained earnings."
          }
        },
        "description": "General Ledger Account"
      },
      "SaveWorkOrder": {
        "type": "object",
        "required": ["buildingID"],
        "properties": {
          "authorizeEnter": {
            "type": "string",
            "description": "This field indicates if the tenant has granted the maintenance staff permission to enter the unit.",
            "enum": ["NO", "ANYTIME", "SPECIFIEDTIME"]
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with this work order."
          },
          "category": {
            "type": "string",
            "description": "Category of the work order."
          },
          "costEstimate": {
            "type": "number",
            "format": "double",
            "description": "Enter an estimate of the cost for performing the work outlined in the work order."
          },
          "dateToEnter": {
            "type": "string",
            "format": "date",
            "description": "Authorized date to enter unit."
          },
          "description": {
            "type": "string",
            "description": "Description of the work order."
          },
          "hourEstimate": {
            "type": "number",
            "format": "double",
            "description": "Estimated number of hours to complete the work order."
          },
          "hourToEnter": {
            "type": "integer",
            "format": "int32",
            "description": "Hour to enter. Allowed Value : 0 , 1, 2 ... 23"
          },
          "minuteToEnter": {
            "type": "integer",
            "format": "int32",
            "description": "Minute to enter. Allowed Value : 0, 10, 20, 30, 40, 50"
          },
          "priority": {
            "type": "string",
            "description": "Priority of the work order.",
            "enum": ["HIGH", "MEDIUM", "LOW"]
          },
          "requestedBy": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the person that reported the problem, typically the tenant or owner associated with the buildings or units."
          },
          "scheduledEndDate": {
            "type": "string",
            "format": "date",
            "description": "Date on which the work is scheduled to be completed."
          },
          "searchTag": {
            "type": "string",
            "description": "Enter a key term to allow you to quickly locate the work order."
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Date on which the work was started."
          },
          "type": {
            "type": "string",
            "description": "This classifies the work order into one of the following types: General, Service Request, Turnover, Inspection, Estimate etc."
          },
          "unitIDs": {
            "type": "array",
            "description": "List of unit Ids that are attached to the building.",
            "items": { "type": "integer", "format": "int64" }
          }
        },
        "description": "Work Order for Request"
      },
      "BasicVendor": {
        "type": "object",
        "properties": {
          "address": { "type": "string", "description": "Address." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "customFields": {
            "type": "array",
            "description": "Custom fields.",
            "items": { "$ref": "#/components/schemas/CustomField" }
          },
          "email": { "type": "string", "description": "Email address." },
          "fax": { "type": "string", "description": "Fax number." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "name": { "type": "string", "description": "Name." },
          "otherPhone": {
            "type": "string",
            "description": "Other phone number."
          },
          "phone": { "type": "string", "description": "Phone number." }
        }
      },
      "RESTAPIError": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "message": { "type": "string" }
        }
      },
      "SaveOwnerDraw": {
        "type": "object",
        "required": [
          "amount",
          "contactID",
          "date",
          "destinationAccountID",
          "glAccountID",
          "portfolioID",
          "toBePrinted"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "contactID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the contact associated with this owner draw."
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post Date."
          },
          "destinationAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the bank account where the payment will be made from."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this owner draw."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this owner draw."
          },
          "refNo": {
            "type": "string",
            "description": "Check no required when payment method is Hand written check (i.e toBePrinted = false)."
          },
          "toBePrinted": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if Check is to be printed."
          }
        },
        "description": "Owner Draw for Request"
      },
      "OwnerContribution": {
        "type": "object",
        "required": ["amount", "date"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "contactID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the contact associated with this owner contribution."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post date."
          },
          "destinationAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the bank account where the payment will be deposited."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this owner contribution."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "paymentType": {
            "type": "string",
            "description": "Payment type.",
            "enum": [
              "CHECK",
              "CHECK21",
              "CASHIERS_CHECK",
              "CREDIT_CARD",
              "CASH",
              "MONEY_ORDER",
              "OTHER",
              "CLICKPAY",
              "SECTION8",
              "EPAY",
              "ECHECK",
              "NACHA",
              "RENTMONEY",
              "PUBLIC_ASSISTANCE"
            ]
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio to apply the payment to."
          },
          "refNo": { "type": "string", "description": "Reference number." }
        },
        "description": "Owner Contribution"
      },
      "ManagementFee": {
        "type": "object",
        "properties": {
          "accountCode": {
            "type": "string",
            "description": "Management fee account code."
          },
          "accountNumber": {
            "type": "string",
            "description": "Management fee account number."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "manager": {
            "type": "string",
            "description": "Property manager name."
          },
          "managersCommissionPercentage": {
            "type": "number",
            "format": "double",
            "description": "Property manager commission percentage."
          },
          "passThrough": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the commission account is of the passthrough type."
          },
          "percentage": {
            "type": "number",
            "format": "double",
            "description": "Management fee percentage."
          }
        },
        "description": "Management Fee"
      },
      "JournalEntrySplit": {
        "type": "object",
        "required": ["creditAmount", "debitAmount", "glAccountID"],
        "properties": {
          "creditAmount": {
            "type": "number",
            "format": "double",
            "description": "Credit amount."
          },
          "debitAmount": {
            "type": "number",
            "format": "double",
            "description": "Debit amount."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this journal entry split."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          }
        },
        "description": "Journal Entry Split"
      },
      "Bill": {
        "type": "object",
        "properties": {
          "billDate": {
            "type": "string",
            "format": "date",
            "description": "Entry date."
          },
          "billNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Number."
          },
          "billSplits": {
            "type": "array",
            "description": "List of bill splits.",
            "items": { "$ref": "#/components/schemas/BillSplit" }
          },
          "comments": { "type": "string", "description": "Description." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "credit": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the bill is a credit."
          },
          "dueDate": {
            "type": "string",
            "format": "date",
            "description": "Due date."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "markupGLAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the general ledger account associated with the markup."
          },
          "markupPercentage": {
            "type": "number",
            "format": "double",
            "description": "The markup percentage."
          },
          "ownerDraw": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the bill is an owner draw."
          },
          "paymentDate": {
            "type": "string",
            "format": "date",
            "description": "Date the bill was paid."
          },
          "refNo": { "type": "string", "description": "Reference number." },
          "terms": { "type": "string", "description": "Bill terms." },
          "vendorID": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the vendor related to the bill."
          },
          "workOrderID": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the work order associated with the bill."
          }
        },
        "description": "Bill"
      },
      "NonCurrentAsset": {
        "type": "object",
        "properties": {
          "discountAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a discount account."
          },
          "escrowAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a escrow account."
          },
          "excludeFrom1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from Form1099."
          },
          "excludeFromPayInFull": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from paying in full."
          },
          "excludeLateFee": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if excluding from late fees."
          }
        },
        "description": "Non Current Asset for Request"
      },
      "UpdateLeaseJournalEntry": {
        "type": "object",
        "required": ["comments", "date", "leaseID"],
        "properties": {
          "comments": { "type": "string", "description": "Comments." },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Journal entry date."
          },
          "journalEntrySplit": {
            "type": "array",
            "description": "Journal Entry Splits.",
            "items": { "$ref": "#/components/schemas/JournalEntrySplit" }
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Lease id to apply journal entry."
          },
          "refNo": {
            "type": "string",
            "description": "Journal entry reference number."
          }
        },
        "description": "Update Lease Journal Entry"
      },
      "Contact": {
        "type": "object",
        "properties": {
          "address": { "$ref": "#/components/schemas/Address" },
          "allowESignature": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the contact can receive eSignature request e-mail messages sent through Propertyware."
          },
          "altEmail": {
            "type": "string",
            "description": "Alternate e-mail address."
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "Date of birth."
          },
          "category": { "type": "string", "description": "Contact category." },
          "comments": { "type": "string", "description": "Comments." },
          "company": {
            "type": "string",
            "description": "Company where the contact is employed."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "customFields": {
            "type": "array",
            "description": "Custom fields.",
            "items": { "$ref": "#/components/schemas/CustomField" }
          },
          "email": { "type": "string", "description": "E-mail address." },
          "fax": { "type": "string", "description": "Fax." },
          "firstName": { "type": "string", "description": "First name." },
          "gender": {
            "type": "string",
            "description": "Gender.",
            "enum": ["UNKNOWN", "MALE", "FEMALE", "DECLINE_TO_STATE"]
          },
          "homePhone": { "type": "string", "description": "Home phone." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "jobTitle": {
            "type": "string",
            "description": "Professional title or position for the contact."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "lastName": { "type": "string", "description": "Last name." },
          "middleName": { "type": "string", "description": "Middle name." },
          "mobilePhone": { "type": "string", "description": "Mobile phone." },
          "nameOnCheck": { "type": "string", "description": "Name on check." },
          "namedOnLease": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if contact is named on lease."
          },
          "otherPhone": { "type": "string", "description": "Other phone." },
          "salutation": { "type": "string", "description": "Salutation." },
          "suffix": { "type": "string", "description": "Suffix." },
          "type": {
            "type": "string",
            "description": "Contact type.",
            "enum": ["TENANT", "PROSPECT", "OWNER", "VENDOR", "OTHER"]
          },
          "workPhone": { "type": "string", "description": "Work phone." }
        },
        "description": "Contact Response"
      },
      "Building": {
        "type": "object",
        "properties": {
          "abbreviation": {
            "type": "string",
            "description": "Property abbreviation."
          },
          "active": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the property is active or inactive."
          },
          "address": { "$ref": "#/components/schemas/Address" },
          "amenities": {
            "type": "array",
            "description": "Property amenities list.",
            "items": { "$ref": "#/components/schemas/Amenity" }
          },
          "applicationFeeRule": {
            "type": "string",
            "description": "Application fee rule"
          },
          "areaUnits": {
            "type": "string",
            "description": "Property total area units.",
            "enum": ["Sq Ft", "Sq M"]
          },
          "category": {
            "type": "string",
            "description": "Property category.",
            "enum": ["RESIDENTIAL", "COMMERCIAL"]
          },
          "countUnit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of units in the building."
          },
          "county": {
            "type": "string",
            "description": "Property region of a state."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "customFields": {
            "type": "array",
            "description": "Custom fields.",
            "items": { "$ref": "#/components/schemas/CustomField" }
          },
          "floorNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Floor number."
          },
          "ftbDeductable": {
            "type": "number",
            "format": "double",
            "description": "FTB deductible amount"
          },
          "ftbWithholdingPercentage": {
            "type": "number",
            "format": "double",
            "description": "FTB withholding percentage"
          },
          "ftbWithholdingType": {
            "type": "string",
            "description": "FTB withholding type"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "idNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier for Global Search."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Related lease ID."
          },
          "maintenanceLaborSurchargeAmount": {
            "type": "number",
            "format": "double",
            "description": "Maintenance labor surcharge amount"
          },
          "maintenanceLaborSurchargeType": {
            "type": "string",
            "description": "Maintenance labor surcharge type"
          },
          "maintenanceNotice": {
            "type": "string",
            "description": "Property maintenance description."
          },
          "maintenanceSpendingLimitAmount": {
            "type": "number",
            "format": "double",
            "description": "Maintenance spending limit amount"
          },
          "maintenanceSpendingLimitTime": {
            "type": "string",
            "description": "Property maintenance spending limit.",
            "enum": ["NO_LIMIT", "MONTHLY_LIMIT", "YEARLY_LIMIT"]
          },
          "management": { "$ref": "#/components/schemas/ManagementSettings" },
          "marketing": { "$ref": "#/components/schemas/Marketing" },
          "multiUnit": {
            "type": "string",
            "description": "Indicates if the building is multi family or single family."
          },
          "name": { "type": "string", "description": "Name of the property." },
          "neighborhood": {
            "type": "string",
            "description": "Property neighborhood."
          },
          "numberFloors": {
            "type": "integer",
            "format": "int32",
            "description": "Number floors"
          },
          "numberOfBathrooms": {
            "type": "number",
            "format": "double",
            "description": "Number of bathrooms in the property."
          },
          "numberOfBedrooms": {
            "type": "integer",
            "format": "int32",
            "description": "Number of bedrooms in the property."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the portfolio associated with this property."
          },
          "propertyManagerList": {
            "type": "array",
            "description": "Property manager details.",
            "items": { "$ref": "#/components/schemas/PropertyManager" }
          },
          "propertyType": {
            "type": "string",
            "description": "Type of property.",
            "enum": [
              "NONE",
              "APARTMENT",
              "CONDO",
              "COMMERCIAL",
              "DU_FOUR_PLEX",
              "HOUSE",
              "SECTION_8_AFFORDABLE",
              "SENIOR",
              "SHORT_TERM_VACATION",
              "STUDENT",
              "TOWNHOUSE",
              "OTHER"
            ]
          },
          "ready": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the property is ready to lease."
          },
          "reasonForPropertyLost": {
            "type": "string",
            "description": "Reason for property lost"
          },
          "rentable": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the property is available for rent."
          },
          "searchTag": {
            "type": "string",
            "description": "Property search tag."
          },
          "status": {
            "type": "string",
            "description": "Property status (occupied/vacant)."
          },
          "syndicate": {
            "type": "boolean",
            "example": false,
            "description": "Property syndicate."
          },
          "targetDeposit": {
            "type": "number",
            "format": "double",
            "description": "Target deposit."
          },
          "targetRent": {
            "type": "number",
            "format": "double",
            "description": "Property target rent."
          },
          "targetRentUnits": {
            "type": "string",
            "description": "Property target rent units.",
            "enum": [
              "DOLLAR_PER_SQ_FT_MONTH",
              "DOLLAR_PER_SQ_FT_YEAR",
              "DOLLAR_PER_SQ_M_MONTH",
              "DOLLAR_PER_SQ_M_YEAR",
              "DOLLAR_PER_MONTH",
              "DOLLAR_PER_WEEK",
              "DOLLAR_PER_NIGHT"
            ]
          },
          "totalArea": {
            "type": "number",
            "format": "double",
            "description": "Property total area."
          },
          "type": { "type": "string", "description": "Property type." },
          "website": {
            "type": "string",
            "description": "Property website URL."
          },
          "yearBuilt": {
            "type": "integer",
            "format": "int32",
            "description": "Property built year."
          }
        },
        "description": "Building"
      },
      "RESTAPIBulkSuccessResponse": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } }
      },
      "SaveBillPayment": {
        "type": "object",
        "properties": {
          "bills": {
            "type": "array",
            "description": "Bills to pay.",
            "items": { "$ref": "#/components/schemas/BillPay" }
          },
          "checkNumber": {
            "type": "string",
            "description": "Payment check number."
          },
          "memo": { "type": "string", "description": "Memo." },
          "paymentAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Bank Account to pay from."
          },
          "paymentDate": {
            "type": "string",
            "format": "date",
            "description": "Payment Date."
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method.",
            "enum": ["Check", "Cash", "Bank Bill Pay", "Online Bank Transfer"]
          },
          "vendorID": {
            "type": "integer",
            "format": "int64",
            "description": "Vendor ID to Pay."
          }
        }
      },
      "Check": {
        "type": "object",
        "required": ["amount", "date", "destinationAccountID", "payeePayer"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "checkSplits": {
            "type": "array",
            "description": "List of check splits.",
            "items": { "$ref": "#/components/schemas/CheckSplit" }
          },
          "comments": { "type": "string", "description": "Comments." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post date."
          },
          "destinationAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Destination general ledger account ID associated with this check."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "payeePayer": {
            "type": "string",
            "description": "Name of the payee or payer."
          },
          "paymentType": {
            "type": "string",
            "description": "Type of payment.",
            "enum": [
              "CHECK",
              "CHECK21",
              "CASHIERS_CHECK",
              "CREDIT_CARD",
              "CASH",
              "MONEY_ORDER",
              "OTHER",
              "CLICKPAY",
              "SECTION8",
              "EPAY",
              "ECHECK",
              "NACHA",
              "RENTMONEY",
              "PUBLIC_ASSISTANCE"
            ]
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this transaction."
          },
          "refNo": { "type": "string", "description": "Reference number." },
          "toBePrinted": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the check is to be printed."
          },
          "vendorID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the vendor associated with this check."
          }
        },
        "description": "VendorCheck"
      },
      "SaveAddress": {
        "type": "object",
        "required": ["country"],
        "properties": {
          "address": {
            "type": "string",
            "description": "Primary street and/or unit address. Required only if country is USA or Canada."
          },
          "addressCont": {
            "type": "string",
            "description": "Address continuation."
          },
          "city": {
            "type": "string",
            "description": "City. Required only if Country is United States / Canada."
          },
          "country": {
            "type": "string",
            "description": "Country. For US addresses, this value should be \"United States\". For other countries, this should be the full country name (Canada, United Kingdom, ...)"
          },
          "postalCode": {
            "type": "string",
            "description": "Zip. Required only if Country is United States / Canada."
          },
          "stateRegion": {
            "type": "string",
            "description": "State. Required only if Country is United States / Canada."
          }
        },
        "description": "Address."
      },
      "Portfolio": {
        "type": "object",
        "properties": {
          "abbreviation": {
            "type": "string",
            "description": "Abbreviated name assigned to the portfolio."
          },
          "active": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if portfolio is active or inactive."
          },
          "cashAccrual": {
            "type": "string",
            "description": "Cash or accrual accounting basis.",
            "enum": ["COMPANY_DEFAULT", "CASH", "ACCRUAL"]
          },
          "closingDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the accounting period for the portfolio will close."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "customFields": {
            "type": "array",
            "description": "Custom fields.",
            "items": { "$ref": "#/components/schemas/CustomField" }
          },
          "defaultBankAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio's default bank account."
          },
          "defaultBankAccountNumberAndDescription": {
            "type": "string",
            "description": "Portfolio default bank account number and description"
          },
          "defaultSecurityDepositBankAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Portfolio default security deposit bank account ID"
          },
          "defaultSecurityDepositBankAccountNumberAndDescription": {
            "type": "string",
            "description": "Portfolio default security deposit bank account number and description"
          },
          "doNotPayOwnerDraw": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the owner should not be paid owner draws."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "maintenanceSpendingLimit": {
            "type": "number",
            "format": "double",
            "description": "Monthly or yearly maintenance spending limit set for the portfolio for maintenance bills created by work orders."
          },
          "maintenanceSpendingLimitTime": {
            "type": "string",
            "description": "Monthly or yearly maintenance spending limit time set for the portfolio for maintenance bills created by work orders.",
            "enum": ["NO_LIMIT", "DOLLAR_PER_MONTH", "DOLLAR_PER_YEAR"]
          },
          "modifiedBy": {
            "type": "string",
            "description": "Id of the user who last modified the portfolio information."
          },
          "name": { "type": "string", "description": "Portfolio name." },
          "ownerStatementReportID": {
            "type": "integer",
            "format": "int64",
            "description": "Portfolio Owner Statement Report ID"
          },
          "owners": {
            "type": "array",
            "description": "List of portfolio owners.",
            "items": { "$ref": "#/components/schemas/Owner" }
          },
          "stickyNote": { "type": "string", "description": "Sticky notes." },
          "targetOperatingReserve": {
            "type": "number",
            "format": "double",
            "description": "Minimum balance to be maintained within the portfolio at all times."
          }
        },
        "description": "Portfolio"
      },
      "SaveProspectContact": {
        "type": "object",
        "required": ["firstName", "lastName"],
        "properties": {
          "address": { "$ref": "#/components/schemas/SaveAddress" },
          "email": { "type": "string", "description": " EMail." },
          "firstName": { "type": "string", "description": "First Name." },
          "homePhone": { "type": "string", "description": " Home Phone." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastName": { "type": "string", "description": " Last Name." },
          "mobilePhone": { "type": "string", "description": " Mobile Phone." },
          "otherPhone": { "type": "string", "description": " Other Phone." },
          "percentageship": {
            "type": "number",
            "format": "double",
            "description": "ship percentage."
          },
          "workPhone": { "type": "string", "description": " Work Phone." }
        },
        "description": "Save Prospect Contact"
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Primary street and/or unit address."
          },
          "addressCont": {
            "type": "string",
            "description": "Address continuation."
          },
          "city": { "type": "string", "description": "City." },
          "country": { "type": "string", "description": "Country." },
          "postalCode": { "type": "string", "description": "Postal code." },
          "stateRegion": { "type": "string", "description": "State/region." }
        },
        "description": "Address"
      },
      "SaveLeaseJournalEntry": {
        "type": "object",
        "required": ["comments", "date", "leaseID"],
        "properties": {
          "comments": { "type": "string", "description": "Comments." },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Journal entry date."
          },
          "journalEntrySplit": {
            "type": "array",
            "description": "Journal Entry Splits.",
            "items": { "$ref": "#/components/schemas/SaveJournalEntrySplit" }
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Lease id to apply journal entry."
          },
          "refNo": {
            "type": "string",
            "description": "Journal entry reference number."
          }
        },
        "description": "Lease Journal Entry for Request"
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "description": "List of comments in the conversation.",
            "items": { "$ref": "#/components/schemas/Comment" }
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "entityID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the entity related to this conversation."
          },
          "entityType": {
            "type": "string",
            "description": "Type of the entity related to this conversation."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "subject": {
            "type": "string",
            "description": "Conversation subject."
          },
          "type": {
            "type": "string",
            "description": "Conversation type.",
            "enum": ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
          }
        },
        "description": "Conversation"
      },
      "Income": {
        "type": "object",
        "properties": {
          "camRecoveryAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a CAM recovery account."
          },
          "discountAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a discount account."
          },
          "escrowAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a escrow account."
          },
          "excludeFrom1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from Form1099."
          },
          "excludeFromPayInFull": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from paying in full."
          },
          "excludeLateFee": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if excluding from late fees."
          },
          "rentAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a rent account."
          },
          "section8": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a section8 account."
          },
          "taxAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a tax account."
          }
        },
        "description": "Income for Request"
      },
      "PropertyManager": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "description": "Email address." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "name": { "type": "string", "description": "Name." },
          "roleAsString": { "type": "string", "description": "Role name." },
          "userID": {
            "type": "integer",
            "format": "int64",
            "description": "User id."
          }
        },
        "description": "PropertyManager"
      },
      "SaveProspect": {
        "type": "object",
        "properties": {
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier of the building associated with the prospect."
          },
          "comments": {
            "type": "string",
            "description": "This is a description of the Prospect."
          },
          "contacts": {
            "type": "array",
            "description": "Prospect contacts.",
            "items": { "$ref": "#/components/schemas/SaveProspectContact" }
          },
          "currentHomeType": {
            "type": "string",
            "description": "Prospect Current Home Type."
          },
          "currentRentMortgage": {
            "type": "number",
            "format": "double",
            "description": "Prospect Current Home Mortgage."
          },
          "hasPets": {
            "type": "boolean",
            "example": false,
            "description": "Prospect Has Pets."
          },
          "moveInDate": {
            "type": "string",
            "format": "date",
            "description": "Prospect Move In Date."
          },
          "neighborhoodDesired": {
            "type": "string",
            "description": "Prospect Neighborhood Desired."
          },
          "numberBathrooms": {
            "type": "number",
            "format": "double",
            "description": "Prospect Number Of Bathrooms."
          },
          "numberBedrooms": {
            "type": "integer",
            "format": "int32",
            "description": "Prospect Number Of Bedrooms."
          },
          "numberOfPets": {
            "type": "integer",
            "format": "int32",
            "description": "Prospect Number Of Pets."
          },
          "petType": { "type": "string", "description": "Prospect Pet Type." },
          "petWeights": {
            "type": "string",
            "description": "Prospect Pet Weights."
          },
          "preferredContactMethod": {
            "type": "string",
            "description": "Prospect Preferred Contact Method."
          },
          "propertyAddress": {
            "type": "string",
            "description": "Property Address."
          },
          "propertyAddress2": {
            "type": "string",
            "description": "Property Address Continued."
          },
          "propertyCity": { "type": "string", "description": "Property City." },
          "propertyCountry": {
            "type": "string",
            "description": "Property Country."
          },
          "propertyNumberBathrooms": {
            "type": "number",
            "format": "double",
            "description": "Property Number Of Bath rooms."
          },
          "propertyNumberBedrooms": {
            "type": "integer",
            "format": "int32",
            "description": "Property Number Of Bedrooms."
          },
          "propertyState": {
            "type": "string",
            "description": "Property State."
          },
          "propertyZip": { "type": "string", "description": "Property Zip." },
          "reasonForMoving": {
            "type": "string",
            "description": "Prospect Reason For Moving."
          },
          "rentMax": {
            "type": "number",
            "format": "double",
            "description": "Prospect Rent Maximum."
          },
          "rentMin": {
            "type": "number",
            "format": "double",
            "description": "Prospect Rent Minimum."
          },
          "source": { "type": "string", "description": "Prospect Source." },
          "status": { "type": "string", "description": "Prospect Status." },
          "timeAtCurrentResidence": {
            "type": "string",
            "description": "Prospect Time At Current Residence."
          },
          "type": { "type": "string", "description": "Prospect Type." },
          "typeOfInquiry": {
            "type": "string",
            "description": "Prospect Type Of Inquiry."
          }
        },
        "description": "Save Prospect "
      },
      "Owner": {
        "type": "object",
        "properties": {
          "address": { "$ref": "#/components/schemas/Address" },
          "email": { "type": "string", "description": "Email address." },
          "firstName": { "type": "string", "description": "First name." },
          "homePhone": { "type": "string", "description": "Home phone." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastName": { "type": "string", "description": "Last name." },
          "mobilePhone": { "type": "string", "description": "Mobile phone." },
          "name": { "type": "string", "description": "Full name." },
          "otherPhone": { "type": "string", "description": "Other phone." },
          "percentageOwnership": {
            "type": "number",
            "format": "double",
            "description": "Percentage ownership."
          },
          "workPhone": { "type": "string", "description": "Work phone." }
        },
        "description": "Owner Contact"
      },
      "SaveRefund": {
        "type": "object",
        "required": [
          "amount",
          "date",
          "destinationAccountID",
          "glAccountID",
          "leaseID"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post Date."
          },
          "destinationAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the bank account to send the refund from."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with the refund."
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with the refund."
          },
          "refNo": { "type": "string", "description": "Reference number." },
          "toBePrinted": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the check is to be printed."
          },
          "toPrimaryTenant": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if refund is for primary contact only"
          }
        },
        "description": "Refund for Request"
      },
      "ProspectStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "readonly": {
            "type": "boolean",
            "example": false,
            "description": "Read Only"
          },
          "status": { "type": "string", "description": "Status" },
          "visibleOnPortal": {
            "type": "boolean",
            "example": false,
            "description": "Status visible On Portal"
          }
        },
        "description": "Prospect Status"
      },
      "PaymentCharge": {
        "type": "object",
        "required": ["amount", "date", "settledDate"],
        "properties": {
          "accountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the bank account where the payment was deposited."
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Payment applied date."
          },
          "payeePayer": { "type": "string", "description": "Payer name." },
          "paymentType": {
            "type": "string",
            "description": "Payment type. Electronic payments are only for book keeping.",
            "enum": [
              "CHECK",
              "CHECK21",
              "CASHIERS_CHECK",
              "CREDIT_CARD",
              "CASH",
              "MONEY_ORDER",
              "OTHER",
              "CLICKPAY",
              "SECTION8",
              "EPAY",
              "ECHECK",
              "NACHA",
              "RENTMONEY",
              "PUBLIC_ASSISTANCE"
            ]
          },
          "receiptNumber": {
            "type": "integer",
            "format": "int64",
            "description": "Payment receipt number."
          },
          "refNo": {
            "type": "string",
            "description": "Payment reference number."
          },
          "settledDate": {
            "type": "string",
            "format": "date",
            "description": "Payment settlement date."
          },
          "status": {
            "type": "string",
            "description": "Charge payment status."
          }
        },
        "description": "Tenant Payment"
      },
      "Unit": {
        "type": "object",
        "properties": {
          "abbreviation": {
            "type": "string",
            "description": "Property abbreviation."
          },
          "active": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the property is active or inactive."
          },
          "address": { "$ref": "#/components/schemas/Address" },
          "amenities": {
            "type": "array",
            "description": "Property amenities list.",
            "items": { "$ref": "#/components/schemas/Amenity" }
          },
          "areaUnits": {
            "type": "string",
            "description": "Property total area units.",
            "enum": ["Sq Ft", "Sq M"]
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with this unit."
          },
          "category": {
            "type": "string",
            "description": "Property category.",
            "enum": ["RESIDENTIAL", "COMMERCIAL"]
          },
          "county": {
            "type": "string",
            "description": "Property region of a state."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "customFields": {
            "type": "array",
            "description": "Custom fields.",
            "items": { "$ref": "#/components/schemas/CustomField" }
          },
          "floorNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Floor number."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "idNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier for Global Search."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Related lease ID."
          },
          "maintenanceNotice": {
            "type": "string",
            "description": "Property maintenance description."
          },
          "maintenanceSpendingLimitTime": {
            "type": "string",
            "description": "Property maintenance spending limit.",
            "enum": ["NO_LIMIT", "MONTHLY_LIMIT", "YEARLY_LIMIT"]
          },
          "management": { "$ref": "#/components/schemas/ManagementSettings" },
          "marketing": { "$ref": "#/components/schemas/Marketing" },
          "name": { "type": "string", "description": "Name of the property." },
          "neighborhood": {
            "type": "string",
            "description": "Property neighborhood."
          },
          "numberFloors": {
            "type": "integer",
            "format": "int32",
            "description": "Number floors"
          },
          "numberOfBathrooms": {
            "type": "number",
            "format": "double",
            "description": "Number of bathrooms in the property."
          },
          "numberOfBedrooms": {
            "type": "integer",
            "format": "int32",
            "description": "Number of bedrooms in the property."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the portfolio associated with this property."
          },
          "propertyManagerList": {
            "type": "array",
            "description": "Property manager details.",
            "items": { "$ref": "#/components/schemas/PropertyManager" }
          },
          "ready": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the property is ready to lease."
          },
          "rentable": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the property is available for rent."
          },
          "searchTag": {
            "type": "string",
            "description": "Property search tag."
          },
          "status": {
            "type": "string",
            "description": "Property status (occupied/vacant)."
          },
          "syndicate": {
            "type": "boolean",
            "example": false,
            "description": "Property syndicate."
          },
          "targetDeposit": {
            "type": "number",
            "format": "double",
            "description": "Target deposit."
          },
          "targetRent": {
            "type": "number",
            "format": "double",
            "description": "Property target rent."
          },
          "targetRentUnits": {
            "type": "string",
            "description": "Property target rent units.",
            "enum": [
              "DOLLAR_PER_SQ_FT_MONTH",
              "DOLLAR_PER_SQ_FT_YEAR",
              "DOLLAR_PER_SQ_M_MONTH",
              "DOLLAR_PER_SQ_M_YEAR",
              "DOLLAR_PER_MONTH",
              "DOLLAR_PER_WEEK",
              "DOLLAR_PER_NIGHT"
            ]
          },
          "totalArea": {
            "type": "number",
            "format": "double",
            "description": "Property total area."
          },
          "type": { "type": "string", "description": "Property type." },
          "website": {
            "type": "string",
            "description": "Property website URL."
          },
          "yearBuilt": {
            "type": "integer",
            "format": "int32",
            "description": "Property built year."
          }
        },
        "description": "Unit"
      },
      "SaveVendor": {
        "type": "object",
        "required": ["companyName", "name", "nameOnCheck", "vendorType"],
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Account Number"
          },
          "address": { "type": "string", "description": "Address" },
          "address2": { "type": "string", "description": "Address2" },
          "alertEmail": { "type": "string", "description": "Alert Email" },
          "city": { "type": "string", "description": "City" },
          "companyName": {
            "type": "string",
            "description": "Vendor Company Name"
          },
          "country": { "type": "string", "description": "Country" },
          "creditLimit": {
            "type": "number",
            "format": "double",
            "description": "Credit Limit"
          },
          "daysToPay": {
            "type": "integer",
            "format": "int32",
            "description": "Payment Terms days to pay.",
            "enum": [0, 5, 10, 15, 30, 45, 60, 90]
          },
          "defaultBillSplitAccountId": {
            "type": "integer",
            "format": "int64",
            "description": "Default bill split id"
          },
          "defaultMarkupDiscountPercentage": {
            "type": "number",
            "format": "double",
            "description": "Default markup discount"
          },
          "description": { "type": "string", "description": "Description" },
          "eligible1099": {
            "type": "boolean",
            "example": false,
            "description": "Eligible For 1099"
          },
          "email": { "type": "string", "description": "EMail" },
          "fax": { "type": "string", "description": "Fax" },
          "includeCompanyNameOn1099": {
            "type": "boolean",
            "example": false,
            "description": "Include company name on 1099"
          },
          "markupAccountId": {
            "type": "integer",
            "format": "int64",
            "description": "Markup account id"
          },
          "name": { "type": "string", "description": "Vendor Name" },
          "nameOnCheck": {
            "type": "string",
            "description": "Vendor Name On Check"
          },
          "phone": { "type": "string", "description": "Phone" },
          "searchTag": { "type": "string", "description": "Search Tag" },
          "state": { "type": "string", "description": "State" },
          "syncToVMM": {
            "type": "boolean",
            "example": false,
            "description": "Sync to maintenance"
          },
          "taxID": { "type": "string", "description": "Tax ID" },
          "taxPayerName": { "type": "string", "description": "Tax Payer Name" },
          "terms": {
            "type": "string",
            "description": "Payment Terms Description, default value('NET 30')"
          },
          "timeTracking": {
            "type": "boolean",
            "example": false,
            "description": "Time Tracking, is enabled or disabled"
          },
          "vendorType": {
            "type": "string",
            "description": "Vendor type. This is a user configurable list with the following initial default values <Banking - General>,\n <Banking - Mortgage>, <Banking - Investment>, <Contractors - Carpentry>, <Contractors - Dry Wall>, <Contractors - Electrical>, <Contractors - Fencing>, <Contractors - Flooring>, <Contractors - General>, <Contractors - HVAC>, <Contractors - Landscaping>, <Contractors - Masonry>, <Contractors - Miscellaneous>, <Contractors - Painting>, <Contractors - Paving>, <Contractors - Plumbing>, <Contractors - Roofing>, <Contractors - Sheet Metal>, <Contractors - Windows>, <Owners>, <Management Company>, <Suppliers - Carpets>, <Suppliers - Electrical>, <Suppliers - General>, <Suppliers - Lighting>, <Suppliers - Lumber>, <Suppliers - Plumbing>, <Suppliers - Security>, <Suppliers - Stone>, <Suppliers - Tiling>, <Suppliers - Windows>, <Utilities - Communications>, <Utilities - Gas & Electric>, <Utilities - Waste Management>, <Utilities - Water>"
          },
          "website": { "type": "string", "description": "Website" },
          "zip": { "type": "string", "description": "Zip" }
        },
        "description": "Vendor for Request"
      },
      "SaveJournalEntrySplit": {
        "type": "object",
        "required": ["creditAmount", "debitAmount", "glAccountID"],
        "properties": {
          "creditAmount": {
            "type": "number",
            "format": "double",
            "description": "Credit Amount."
          },
          "debitAmount": {
            "type": "number",
            "format": "double",
            "description": "Debit Amount."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "GL Account ID."
          }
        },
        "description": "Journal Entry Split for Request"
      },
      "Bank": {
        "type": "object",
        "properties": {
          "bankAccountHolder": {
            "type": "string",
            "description": "Account holder."
          },
          "bankAccountHolderSSNMasked": {
            "type": "string",
            "description": "Account holder SSN."
          },
          "bankAccountNumberDecrypted": {
            "type": "string",
            "description": "Bank account number."
          },
          "bankAccountType": {
            "type": "integer",
            "format": "int32",
            "description": "Bank account type - 1: Checking, 2: Savings"
          },
          "bankAddress": {
            "type": "string",
            "description": "Bank address line 1."
          },
          "bankAddress2": {
            "type": "string",
            "description": "Bank address line 2."
          },
          "bankCity": { "type": "string", "description": "City." },
          "bankInstitution": { "type": "string", "description": "Bank name." },
          "bankRoutingNumberDecrypted": {
            "type": "string",
            "description": "Bank routing number."
          },
          "bankState": { "type": "string", "description": "State." },
          "bankTransitFraction": {
            "type": "string",
            "description": "Bank transit fraction."
          },
          "bankZip": { "type": "string", "description": "Zip." },
          "depositTicketType": {
            "type": "integer",
            "format": "int32",
            "description": "Deposit ticket type."
          },
          "nachaCompanyID": {
            "type": "string",
            "description": "Nacha company ID."
          },
          "nachaEnabled": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if Nacha payment type is enabled."
          },
          "nachaImmediateDestinationNumber": {
            "type": "string",
            "description": "Nacha destination number."
          },
          "nachaImmediateOriginNumber": {
            "type": "string",
            "description": "Nacha immediate origin number."
          },
          "nachaOriginatingDFINumber": {
            "type": "string",
            "description": "Nacha originating DFI number."
          }
        },
        "description": "Bank for Request"
      },
      "ManagementSettings": {
        "type": "object",
        "properties": {
          "managementContractEndDate": {
            "type": "string",
            "format": "date",
            "description": "End date of the property contract."
          },
          "managementContractStartDate": {
            "type": "string",
            "format": "date",
            "description": "Start date of the property contract."
          },
          "managementFeeType": {
            "type": "string",
            "description": "Indicates the type of management fee."
          },
          "managementFees": {
            "type": "array",
            "description": "List of property management fee rules.",
            "items": { "$ref": "#/components/schemas/ManagementFee" }
          },
          "managementFlatFee": {
            "type": "number",
            "format": "double",
            "description": "Flat management fee amount."
          }
        },
        "description": "Property management information"
      },
      "SaveAdjustment": {
        "type": "object",
        "required": ["amount", "leaseID"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount, should be negative."
          },
          "comments": { "type": "string", "description": "Comments." },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Lease Adjustment date."
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with the Adjustment."
          },
          "refNo": { "type": "string", "description": "Reference number." }
        },
        "description": "Adjustment for Request"
      },
      "BillPayment": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Payment amount."
          },
          "bills": {
            "type": "array",
            "description": "List of bills that were paid.",
            "items": { "$ref": "#/components/schemas/BillPaid" }
          },
          "checkNumber": {
            "type": "string",
            "description": "Payment check number."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "memo": { "type": "string", "description": "Memo." },
          "nameOnCheck": { "type": "string", "description": "Name on check." },
          "paymentAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the payment account."
          },
          "paymentDate": {
            "type": "string",
            "format": "date",
            "description": "Payment date."
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method."
          },
          "toBePrinted": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the check should be printed."
          },
          "vendorID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the vendor associated with this payment."
          }
        },
        "description": "BillPayment"
      },
      "SaveContact": {
        "type": "object",
        "required": ["firstName", "lastName"],
        "properties": {
          "address": { "$ref": "#/components/schemas/SaveAddress" },
          "allowESignature": {
            "type": "boolean",
            "example": false,
            "description": "Indicate if the contact can receive eSignature request e-mail messages sent through Propertyware."
          },
          "altEmail": {
            "type": "string",
            "description": "Alternate Email Address."
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "Date of Birth."
          },
          "category": {
            "type": "string",
            "description": "Indicate contact category. Send empty \"\" value if contact is Uncategorized"
          },
          "comments": { "type": "string", "description": "Description." },
          "company": {
            "type": "string",
            "description": "Company where the contact is employed.",
            "minLength": 1,
            "maxLength": 75
          },
          "email": { "type": "string", "description": "E-mail Address." },
          "fax": { "type": "string", "description": "Fax." },
          "firstName": {
            "type": "string",
            "description": "First Name.",
            "minLength": 1,
            "maxLength": 30
          },
          "gender": {
            "type": "string",
            "description": "Gender.",
            "enum": ["UNKNOWN", "MALE", "FEMALE", "DECLINE_TO_STATE"]
          },
          "homePhone": {
            "type": "string",
            "description": "Home Phone.",
            "minLength": 1,
            "maxLength": 22
          },
          "jobTitle": {
            "type": "string",
            "description": "Professional title or position for the contact.",
            "minLength": 1,
            "maxLength": 75
          },
          "lastName": {
            "type": "string",
            "description": "Last Name.",
            "minLength": 1,
            "maxLength": 30
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name.",
            "minLength": 1,
            "maxLength": 30
          },
          "mobilePhone": {
            "type": "string",
            "description": "Mobile Phone.",
            "minLength": 1,
            "maxLength": 22
          },
          "nameOnCheck": {
            "type": "string",
            "description": "Name On Check.",
            "minLength": 1,
            "maxLength": 100
          },
          "namedOnLease": {
            "type": "boolean",
            "example": false,
            "description": "Is Named On Lease."
          },
          "otherPhone": {
            "type": "string",
            "description": "Other Phone.",
            "minLength": 1,
            "maxLength": 22
          },
          "salutation": { "type": "string", "description": "Salutation." },
          "searchTag": { "type": "string", "description": "SearchTag." },
          "suffix": { "type": "string", "description": "Suffix." },
          "workPhone": {
            "type": "string",
            "description": "Work Phone.",
            "minLength": 1,
            "maxLength": 22
          }
        },
        "description": "Contact for Request"
      },
      "Discount": {
        "type": "object",
        "required": ["amount", "date"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post date."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this discount."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with this discount."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this transaction."
          },
          "refNo": { "type": "string", "description": "Reference number." }
        },
        "description": "Discount"
      },
      "Amenity": {
        "type": "object",
        "properties": {
          "code": { "type": "string", "description": "Amenity code." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "name": { "type": "string", "description": "Amenity name." },
          "type": { "type": "string", "description": "Amenity type." }
        },
        "description": "Amenity"
      },
      "BillSplit": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "amountPaid": {
            "type": "number",
            "format": "double",
            "description": "Amount paid."
          },
          "buildingAbbr": {
            "type": "string",
            "description": "Abbreviation of the building associated with this bill split."
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with this bill split."
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the bill split."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this bill split."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "markupDiscountSplit": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the bill split is tied to a markup discount."
          },
          "paid": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the bill split has been paid."
          },
          "portfolioAbbr": {
            "type": "string",
            "description": "Abbreviation of the portfolio associated with this bill split."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this bill split."
          },
          "unitAbbr": {
            "type": "string",
            "description": "Abbreviation of the unit associated with this bill split."
          },
          "unitID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the unit associated with this bill split."
          }
        },
        "description": "BillSplit"
      },
      "ContactCategory": {
        "type": "object",
        "properties": {
          "categoryName": { "type": "string", "description": "Category name." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          }
        },
        "description": "ContactCategory"
      },
      "CheckSplit": {
        "type": "object",
        "required": ["portfolioID"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with this check split."
          },
          "comments": { "type": "string", "description": "Comments." },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this check split."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this check split."
          },
          "unitID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the unit associated with this check split."
          }
        },
        "description": "VendorCheckSplit"
      },
      "Inspection": {
        "type": "object",
        "properties": {
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with this inspection."
          },
          "closedDateAndTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the inspection closed (customer time zone)."
          },
          "comment": {
            "type": "string",
            "description": "Inspection comments."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "inspectedDateAndTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the inspection occurred (customer time zone)."
          },
          "inspectionAreas": {
            "type": "array",
            "description": "List of inspection areas.",
            "items": { "$ref": "#/components/schemas/InspectionArea" }
          },
          "inspectorID": {
            "type": "integer",
            "format": "int64",
            "description": "Inspector ID"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with this inspection."
          },
          "notesToInspector": {
            "type": "string",
            "description": "Notes to Inspector"
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "description": "Inspection number."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this inspection."
          },
          "scheduledDateAndTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the inspection is/was scheduled to occur (customer time zone)."
          },
          "status": { "type": "string", "description": "Inspection status." },
          "templateName": {
            "type": "string",
            "description": "Inspection template name."
          },
          "type": { "type": "string", "description": "Inspection type." }
        },
        "description": "Inspection"
      },
      "OwnerDraw": {
        "type": "object",
        "required": ["amount", "date"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "contactID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the contact associated with this owner draw."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post date."
          },
          "destinationAccountId": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the bank account where the payment will be made from."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this owner draw."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "paymentType": {
            "type": "string",
            "description": "Payment type.",
            "enum": [
              "CHECK",
              "CHECK21",
              "CASHIERS_CHECK",
              "CREDIT_CARD",
              "CASH",
              "MONEY_ORDER",
              "OTHER",
              "CLICKPAY",
              "SECTION8",
              "EPAY",
              "ECHECK",
              "NACHA",
              "RENTMONEY",
              "PUBLIC_ASSISTANCE"
            ]
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this owner draw."
          },
          "refNo": { "type": "string", "description": "Reference number." }
        },
        "description": "Owner Draw"
      },
      "CreditMemo": {
        "type": "object",
        "required": ["amount", "date"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments" },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post date."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this credit memo."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with this credit memo."
          },
          "parentTxID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the payment causing this prepay application."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this credit memo."
          },
          "refNo": { "type": "string", "description": "Reference number." }
        },
        "description": "Transaction"
      },
      "SaveCredit": {
        "type": "object",
        "required": ["billDate", "vendorID"],
        "properties": {
          "billDate": {
            "type": "string",
            "format": "date",
            "description": "Credit Date."
          },
          "billSplits": {
            "type": "array",
            "description": "Splits list.",
            "items": { "$ref": "#/components/schemas/SaveBillSplit" }
          },
          "comments": { "type": "string", "description": "Description." },
          "refNo": { "type": "string", "description": "Reference number." },
          "vendorID": {
            "type": "integer",
            "format": "int64",
            "description": "Related vendor ID."
          }
        },
        "description": "SaveCredit"
      },
      "InspectionArea": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "items": {
            "type": "array",
            "description": "List of items in the inspection.",
            "items": { "$ref": "#/components/schemas/InspectionItem" }
          },
          "name": {
            "type": "string",
            "description": "Name of the inspection area."
          }
        },
        "description": "Inspection Area"
      },
      "JournalEntry": {
        "type": "object",
        "properties": {
          "comments": { "type": "string", "description": "Comments." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "description": "Journal entry post date."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "journalEntrySplit": {
            "type": "array",
            "description": "List of journal entry splits.",
            "items": {
              "$ref": "#/components/schemas/JournalEntrySplitResponse"
            }
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with this journal entry."
          },
          "refNo": {
            "type": "string",
            "description": "Journal entry reference number."
          }
        },
        "description": "Journal Entry"
      },
      "Vendor": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Account number."
          },
          "active": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the vendor is active."
          },
          "address": { "type": "string", "description": "Address." },
          "address2": { "type": "string", "description": "Address line 2." },
          "alertEmail": { "type": "string", "description": "Alert Email" },
          "city": { "type": "string", "description": "City." },
          "comments": { "type": "string", "description": "Comments." },
          "companyName": {
            "type": "string",
            "description": "Name of the vendor's company."
          },
          "country": { "type": "string", "description": "Country." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "creditLimit": {
            "type": "number",
            "format": "double",
            "description": "Credit limit."
          },
          "customFields": {
            "type": "array",
            "description": "Custom fields.",
            "items": { "$ref": "#/components/schemas/CustomField" }
          },
          "defaultBillSplitAccountId": {
            "type": "integer",
            "format": "int64",
            "description": "Default bill split id"
          },
          "defaultMarkupDiscountPercentage": {
            "type": "number",
            "format": "double",
            "description": "Default markup discount"
          },
          "description": { "type": "string", "description": "Description." },
          "eligible1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the vendor is eligible for a 1099 form."
          },
          "email": { "type": "string", "description": "Email address." },
          "fax": { "type": "string", "description": "Fax number." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "includeCompanyNameOn1099": {
            "type": "boolean",
            "example": false,
            "description": "Include company name on 1099"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "markupAccountId": {
            "type": "integer",
            "format": "int64",
            "description": "Markup account id"
          },
          "name": { "type": "string", "description": "Name." },
          "nameOnCheck": {
            "type": "string",
            "description": "Name to be used on checks."
          },
          "otherPhone": {
            "type": "string",
            "description": "Other phone number."
          },
          "paymentTermDaysToPay": {
            "type": "integer",
            "format": "int32",
            "description": "The number of days within payments are due."
          },
          "paymentTerms": { "type": "string", "description": "Payment terms." },
          "phone": { "type": "string", "description": "Phone number." },
          "searchTag": { "type": "string", "description": "Search Tag" },
          "state": { "type": "string", "description": "State." },
          "syncToVMM": {
            "type": "boolean",
            "example": false,
            "description": "Vendor Sync To Maintenance."
          },
          "taxId": {
            "type": "string",
            "description": "Tax identification number."
          },
          "taxPayerName": { "type": "string", "description": "Tax Payer Name" },
          "timeTracking": {
            "type": "string",
            "description": "Time Tracking, is enabled or disabled"
          },
          "type": { "type": "string", "description": "The type of vendor." },
          "website": { "type": "string", "description": "Website URL." },
          "zip": { "type": "string", "description": "ZIP or postal code." }
        },
        "description": "Vendor"
      },
      "SaveOwnerContribution": {
        "type": "object",
        "required": [
          "amount",
          "contactID",
          "date",
          "destinationAccountID",
          "glAccountID",
          "paymentType",
          "portfolioID",
          "refNo"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "contactID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the contact associated with this owner contribution."
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post Date."
          },
          "destinationAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the bank account where the payment will be deposited."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this owner contribution."
          },
          "paymentType": {
            "type": "string",
            "description": "Payment Type.",
            "enum": [
              "CHECK",
              "CHECK21",
              "CASHIERS_CHECK",
              "CREDIT_CARD",
              "CASH",
              "MONEY_ORDER",
              "OTHER",
              "CLICKPAY",
              "SECTION8",
              "EPAY",
              "ECHECK",
              "NACHA",
              "RENTMONEY",
              "PUBLIC_ASSISTANCE"
            ]
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio to apply the payment to."
          },
          "refNo": { "type": "string", "description": "Reference No." }
        },
        "description": "Charge for request"
      },
      "SaveWorkOrderTask": {
        "type": "object",
        "required": ["description"],
        "properties": {
          "completed": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the task is completed."
          },
          "delegates": {
            "type": "string",
            "description": "Comma separated list of user ids to delegate the task to."
          },
          "description": {
            "type": "string",
            "description": "Task description."
          },
          "dueDate": {
            "type": "string",
            "format": "date",
            "description": "Task due date."
          },
          "isPrivate": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the task is private."
          },
          "starred": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the task is starred."
          },
          "tags": {
            "type": "string",
            "description": "Comma separated task tags."
          }
        },
        "description": "Work Order for Request"
      },
      "NonOperatingExpense": {
        "type": "object",
        "properties": {
          "camRecoveryAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a CAM recovery account."
          },
          "discountAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a discount account."
          },
          "escrowAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a escrow account."
          },
          "excludeFrom1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from Form1099."
          },
          "excludeFromPayInFull": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from paying in full."
          },
          "excludeLateFee": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if excluding from late fees."
          },
          "rentAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a rent account."
          },
          "taxAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a tax account."
          }
        },
        "description": "Non Operating Expense for Request"
      },
      "AutoPayment": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "description": "Payment general ledger account."
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Payment amount."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "description": { "type": "string", "description": "Description." },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "End date."
          },
          "feeAmount": {
            "type": "number",
            "format": "double",
            "description": "Fee amount."
          },
          "frequency": {
            "type": "string",
            "description": "Payment frequency.",
            "enum": ["WEEKLY", "MONTHLY", "QUARTERLY", "SEMIANNUAL", "YEARLY"]
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Payment general ledger account ID."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "lastPostDate": {
            "type": "string",
            "format": "date",
            "description": "Last post date."
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Start date."
          }
        }
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "description": "Data type of the custom field."
          },
          "definitionID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the custom field definition."
          },
          "fieldName": {
            "type": "string",
            "description": "Name of the custom field."
          },
          "value": {
            "type": "string",
            "description": "Value of the custom field."
          }
        },
        "description": "Custom field."
      },
      "SavePayment": {
        "type": "object",
        "required": [
          "amount",
          "contactID",
          "date",
          "depositDate",
          "destinationAccountID",
          "leaseID",
          "paymentType",
          "refNo"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "contactID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the contact associated with lease payment"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post Date."
          },
          "depositDate": {
            "type": "string",
            "format": "date",
            "description": "Payment deposit date."
          },
          "destinationAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Bank GL account ID to deposit."
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with this payment."
          },
          "paymentType": {
            "type": "string",
            "description": "Payment type.",
            "enum": [
              "CHECK",
              "CHECK21",
              "CASHIERS_CHECK",
              "CREDIT_CARD",
              "CASH",
              "MONEY_ORDER",
              "OTHER",
              "CLICKPAY",
              "SECTION8",
              "EPAY",
              "ECHECK",
              "NACHA",
              "RENTMONEY",
              "PUBLIC_ASSISTANCE"
            ]
          },
          "refNo": {
            "type": "string",
            "description": "Payment reference number"
          }
        },
        "description": "Tenant Payment for Request"
      },
      "LeaseStatus": {
        "type": "object",
        "properties": {
          "defineActive": { "type": "boolean" },
          "id": { "type": "integer", "format": "int64" },
          "orderIndex": { "type": "integer", "format": "int32" },
          "portalLoginEnabled": { "type": "boolean" },
          "readonly": { "type": "boolean" },
          "status": { "type": "string" }
        },
        "description": "Lease Status"
      },
      "LateFeeRule": {
        "type": "object",
        "properties": {
          "dueDay": {
            "type": "integer",
            "format": "int32",
            "description": "Fee due day."
          },
          "feeType": { "type": "string", "description": "Late fee type." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "minimumDue": {
            "type": "number",
            "format": "double",
            "description": "Minimum amount due to trigger the late fee process."
          },
          "summary": {
            "type": "string",
            "description": "Textual description of the late fee calculation."
          }
        }
      },
      "CurrentAsset": {
        "type": "object",
        "properties": {
          "discountAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is a discount account."
          },
          "escrowAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is a escrow account."
          },
          "excludeFrom1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is excluded from 1099 tax forms."
          },
          "excludeFromPayInFull": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is a tax account."
          },
          "excludeLateFee": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if excluded from late fees."
          },
          "rentAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is a rent account."
          },
          "taxAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the account is a tax account."
          }
        },
        "description": "Current Asset for Request"
      },
      "Payment": {
        "type": "object",
        "required": ["amount", "date"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "comments": { "type": "string", "description": "Comments." },
          "contactID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the contact associated with this payment."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post date."
          },
          "depositDate": {
            "type": "string",
            "format": "date",
            "description": "Date the payment was deposited."
          },
          "destinationAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the bank account where the payment was deposited."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "isDeposited": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the payment has been deposited."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with this payment."
          },
          "paymentType": {
            "type": "string",
            "description": "Payment type.",
            "enum": [
              "CHECK",
              "CHECK21",
              "CASHIERS_CHECK",
              "CREDIT_CARD",
              "CASH",
              "MONEY_ORDER",
              "OTHER",
              "CLICKPAY",
              "SECTION8",
              "EPAY",
              "ECHECK",
              "NACHA",
              "RENTMONEY",
              "PUBLIC_ASSISTANCE"
            ]
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this transaction."
          },
          "refNo": { "type": "string", "description": "Reference number." },
          "status": { "type": "string", "description": "Lease status." }
        },
        "description": "Tenant Payment"
      },
      "ChargeTx": {
        "type": "object",
        "required": ["amount", "date"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount."
          },
          "amountDue": {
            "type": "number",
            "format": "double",
            "description": "The amount due for the charge."
          },
          "amountPaid": {
            "type": "number",
            "format": "double",
            "description": "The amount paid for the charge."
          },
          "comments": { "type": "string", "description": "Comments." },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Post date."
          },
          "glAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the general ledger account associated with this charge."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "leaseID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the lease associated with this charge."
          },
          "parentTxID": {
            "type": "integer",
            "format": "int64",
            "description": "Parent Charge ID. If parent charge date and recharge date are same consider it as a hidden recharge and do not include it in ledger balance calculation."
          },
          "payments": {
            "type": "array",
            "description": "List of payment charge history.",
            "items": { "$ref": "#/components/schemas/PaymentCharge" }
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this charge."
          },
          "refNo": { "type": "string", "description": "Reference number." }
        },
        "description": "Charge Transaction"
      },
      "SaveBankDeposit": {
        "type": "object",
        "required": ["bankGLAccountID", "listOfTxIDs"],
        "properties": {
          "bankGLAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Bank general ledger account ID."
          },
          "listOfTxIDs": {
            "type": "string",
            "description": "Comma separated list of Transaction IDs."
          }
        },
        "description": "Bank Deposit for Request"
      },
      "Expense": {
        "type": "object",
        "properties": {
          "camRecoveryAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a CAM recovery account."
          },
          "discountAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a discount account."
          },
          "escrowAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a escrow account."
          },
          "excludeFrom1099": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from Form1099."
          },
          "excludeFromPayInFull": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is excluded from paying in full."
          },
          "excludeLateFee": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if excluding from late fees."
          },
          "rentAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a rent account."
          },
          "taxAccount": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if account is a tax account."
          }
        },
        "description": "Expense for Request"
      },
      "SaveCheck": {
        "type": "object",
        "required": ["checkDate", "destinationAccountID"],
        "properties": {
          "checkDate": {
            "type": "string",
            "format": "date",
            "description": "Check Date."
          },
          "checkSplits": {
            "type": "array",
            "description": "Check Split list.",
            "items": { "$ref": "#/components/schemas/SaveCheckSplit" }
          },
          "comments": { "type": "string", "description": "Comments." },
          "destinationAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Destination AccountID."
          },
          "refNo": { "type": "string", "description": "Check Ref No." },
          "toBePrinted": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if Check is to be printed."
          },
          "vendorID": {
            "type": "integer",
            "format": "int64",
            "description": "Check related vendorID."
          }
        },
        "description": "VendorCheck"
      },
      "SaveBill": {
        "type": "object",
        "required": ["billDate", "dueDate", "vendorID"],
        "properties": {
          "billDate": {
            "type": "string",
            "format": "date",
            "description": "Bill date."
          },
          "billNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Bill number."
          },
          "billSplits": {
            "type": "array",
            "description": "Splits list.",
            "items": { "$ref": "#/components/schemas/SaveBillSplit" }
          },
          "comments": { "type": "string", "description": "Description." },
          "dueDate": {
            "type": "string",
            "format": "date",
            "description": "Bill Due date."
          },
          "markupAccountID": {
            "type": "integer",
            "format": "int64",
            "description": "Markup account ID."
          },
          "markupPercentage": {
            "type": "number",
            "format": "double",
            "description": "Markup percentage."
          },
          "ownerDraw": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if it is a owner draw."
          },
          "paymentDate": {
            "type": "string",
            "format": "date",
            "description": "Payment Date."
          },
          "refNo": { "type": "string", "description": "Reference number." },
          "terms": { "type": "string", "description": "Bill terms." },
          "vendorID": {
            "type": "integer",
            "format": "int64",
            "description": "Related vendor ID."
          },
          "workOrderID": {
            "type": "integer",
            "format": "int64",
            "description": "WorkOrder ID."
          }
        },
        "description": "Bill"
      },
      "SaveOwner": {
        "type": "object",
        "required": ["firstName", "lastName"],
        "properties": {
          "address": { "$ref": "#/components/schemas/SaveAddress" },
          "email": { "type": "string", "description": "Owner EMail." },
          "firstName": { "type": "string", "description": "Owner First Name." },
          "homePhone": { "type": "string", "description": "Owner Home Phone." },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "lastName": { "type": "string", "description": "Owner Last Name." },
          "mobilePhone": {
            "type": "string",
            "description": "Owner Mobile Phone."
          },
          "otherPhone": {
            "type": "string",
            "description": "Owner Other Phone."
          },
          "percentageOwnership": {
            "type": "number",
            "format": "double",
            "description": "Ownership percentage."
          },
          "workPhone": { "type": "string", "description": "Owner Work Phone." }
        },
        "description": "Save Owner Contact"
      },
      "Lease": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if lease is Active."
          },
          "addendums": {
            "type": "array",
            "description": "Lease addendum(s).",
            "items": { "$ref": "#/components/schemas/LeaseClause" }
          },
          "baseRent": {
            "type": "number",
            "format": "double",
            "description": "Property base rent."
          },
          "buildingID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the building associated with this lease."
          },
          "comments": {
            "type": "string",
            "description": "Description of the lease."
          },
          "contacts": {
            "type": "array",
            "description": "List of the current tenants on the lease.",
            "items": { "$ref": "#/components/schemas/LeaseContact" }
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the record."
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was created. (Timezone: UTC)"
          },
          "customFields": {
            "type": "array",
            "description": "Custom fields.",
            "items": { "$ref": "#/components/schemas/CustomField" }
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "End date of the lease term."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier."
          },
          "idNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Lease identification number."
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "User who last modified the record."
          },
          "lastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the record was last modified. (Timezone: UTC)"
          },
          "lateFeeRule": {
            "type": "string",
            "description": "Textual description of the late fee rule applied to delinquent or unpaid lease charges."
          },
          "leaseBalance": {
            "type": "number",
            "format": "double",
            "description": "Lease Balance."
          },
          "leaseName": { "type": "string", "description": "Lease Name." },
          "location": {
            "type": "string",
            "description": "Building and/or units the lease is currently attached to."
          },
          "moveInDate": {
            "type": "string",
            "format": "date",
            "description": "Day that the tenant(s) moved into the property."
          },
          "moveOutDate": {
            "type": "string",
            "format": "date",
            "description": "Day that the tenant(s) vacated the property."
          },
          "noticeGivenDate": {
            "type": "string",
            "format": "date",
            "description": "Day that the tenant(s) turned in a notice to vacate."
          },
          "paymentRestriction": {
            "type": "string",
            "description": "Indicates if the lease has any payment types that they are prevented from using. For example, a lease with several bounced checks may be restricted from paying with checks for future payments."
          },
          "portfolioID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the portfolio associated with this lease."
          },
          "publicAssistanceProgram": {
            "type": "string",
            "description": "Indicates if the tenant(s) of the lease receive any aid from a Public Assistance Program."
          },
          "reasonForLeaving": {
            "type": "string",
            "description": "Reason for vacating the property."
          },
          "scheduleMoveOutDate": {
            "type": "string",
            "format": "date",
            "description": "Day that the tenant(s) are expected to vacate the property."
          },
          "searchTag": { "type": "string", "description": "Search tag." },
          "signedDate": {
            "type": "string",
            "format": "date",
            "description": "Lease signed date."
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Start date of the lease term."
          },
          "status": {
            "type": "string",
            "description": "Lease's current status."
          },
          "tenantsOptsIntoAssetProtectionPlan": {
            "type": "string",
            "description": "Indicates if the tenants opted into Asset Protection Plan."
          },
          "terminatedDate": {
            "type": "string",
            "format": "date",
            "description": "Lease Terminated Date."
          },
          "unitID": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the unit associated with this lease."
          }
        },
        "description": "Lease"
      }
    },
    "securitySchemes": {
      "clientId": {
        "type": "apiKey",
        "in": "header",
        "name": "x-propertyware-client-id"
      },
      "clientSecret": {
        "type": "apiKey",
        "in": "header",
        "name": "x-propertyware-client-secret"
      },
      "organizationId": {
        "type": "apiKey",
        "in": "header",
        "name": "x-propertyware-system-id"
      }
    }
  },
  "security": [
    { "clientId": [] },
    { "clientSecret": [] },
    { "organizationId": [] }
  ]
}
