=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Propertyware
  class BuildingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a building
    # Creates a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Write</code> 
    # @param save_building [SaveBuilding] saveBuilding
    # @param [Hash] opts the optional parameters
    # @return [Building]
    def create_building(save_building, opts = {})
      data, _status_code, _headers = create_building_with_http_info(save_building, opts)
      data
    end

    # Create a building
    # Creates a building.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_building [SaveBuilding] saveBuilding
    # @param [Hash] opts the optional parameters
    # @return [Array<(Building, Integer, Hash)>] Building data, response status code and response headers
    def create_building_with_http_info(save_building, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.create_building ...'
      end
      # verify the required parameter 'save_building' is set
      if @api_client.config.client_side_validation && save_building.nil?
        fail ArgumentError, "Missing the required parameter 'save_building' when calling BuildingsApi.create_building"
      end
      # resource path
      local_var_path = '/buildings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_building)

      # return_type
      return_type = opts[:debug_return_type] || 'Building'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.create_building",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#create_building\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create buildings in bulk
    # Creates buildings in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Write</code> 
    # @param save_building [Array<SaveBuilding>] saveBuilding
    # @param [Hash] opts the optional parameters
    # @return [Array<RESTAPIBulkSuccessResponse>]
    def create_contacts(save_building, opts = {})
      data, _status_code, _headers = create_contacts_with_http_info(save_building, opts)
      data
    end

    # Create buildings in bulk
    # Creates buildings in bulk.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_building [Array<SaveBuilding>] saveBuilding
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RESTAPIBulkSuccessResponse>, Integer, Hash)>] Array<RESTAPIBulkSuccessResponse> data, response status code and response headers
    def create_contacts_with_http_info(save_building, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.create_contacts ...'
      end
      # verify the required parameter 'save_building' is set
      if @api_client.config.client_side_validation && save_building.nil?
        fail ArgumentError, "Missing the required parameter 'save_building' when calling BuildingsApi.create_contacts"
      end
      # resource path
      local_var_path = '/buildings/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_building)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RESTAPIBulkSuccessResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.create_contacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#create_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a building (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Delete a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Delete</code> 
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_building(building_id, opts = {})
      data, _status_code, _headers = delete_building_with_http_info(building_id, opts)
      data
    end

    # Delete a building (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Delete a building.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_building_with_http_info(building_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.delete_building ...'
      end
      # verify the required parameter 'building_id' is set
      if @api_client.config.client_side_validation && building_id.nil?
        fail ArgumentError, "Missing the required parameter 'building_id' when calling BuildingsApi.delete_building"
      end
      # resource path
      local_var_path = '/buildings/{buildingID}'.sub('{' + 'buildingID' + '}', CGI.escape(building_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.delete_building",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#delete_building\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a building conversation (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Deletes a specific building conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Delete</code> 
    # @param building_id [Integer] Building ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_building_conversation(building_id, conversation_id, opts = {})
      data, _status_code, _headers = delete_building_conversation_with_http_info(building_id, conversation_id, opts)
      data
    end

    # Delete a building conversation (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Deletes a specific building conversation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param building_id [Integer] Building ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_building_conversation_with_http_info(building_id, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.delete_building_conversation ...'
      end
      # verify the required parameter 'building_id' is set
      if @api_client.config.client_side_validation && building_id.nil?
        fail ArgumentError, "Missing the required parameter 'building_id' when calling BuildingsApi.delete_building_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling BuildingsApi.delete_building_conversation"
      end
      # resource path
      local_var_path = '/buildings/{buildingID}/conversations/{conversationID}'.sub('{' + 'buildingID' + '}', CGI.escape(building_id.to_s)).sub('{' + 'conversationID' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.delete_building_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#delete_building_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a building
    # Retrieves a specific building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code> 
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields Include custom fields in the response. (default to true)
    # @return [Building]
    def get_building(building_id, opts = {})
      data, _status_code, _headers = get_building_with_http_info(building_id, opts)
      data
    end

    # Retrieve a building
    # Retrieves a specific building.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields Include custom fields in the response. (default to true)
    # @return [Array<(Building, Integer, Hash)>] Building data, response status code and response headers
    def get_building_with_http_info(building_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.get_building ...'
      end
      # verify the required parameter 'building_id' is set
      if @api_client.config.client_side_validation && building_id.nil?
        fail ArgumentError, "Missing the required parameter 'building_id' when calling BuildingsApi.get_building"
      end
      # resource path
      local_var_path = '/buildings/{buildingID}'.sub('{' + 'buildingID' + '}', CGI.escape(building_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Building'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.get_building",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#get_building\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a building conversation
    # Retrieves a specific building conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code> 
    # @param building_id [Integer] Building ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def get_building_conversation(building_id, conversation_id, opts = {})
      data, _status_code, _headers = get_building_conversation_with_http_info(building_id, conversation_id, opts)
      data
    end

    # Retrieve a building conversation
    # Retrieves a specific building conversation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param building_id [Integer] Building ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Integer, Hash)>] Conversation data, response status code and response headers
    def get_building_conversation_with_http_info(building_id, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.get_building_conversation ...'
      end
      # verify the required parameter 'building_id' is set
      if @api_client.config.client_side_validation && building_id.nil?
        fail ArgumentError, "Missing the required parameter 'building_id' when calling BuildingsApi.get_building_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling BuildingsApi.get_building_conversation"
      end
      # resource path
      local_var_path = '/buildings/{buildingID}/conversations/{conversationID}'.sub('{' + 'buildingID' + '}', CGI.escape(building_id.to_s)).sub('{' + 'conversationID' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Conversation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.get_building_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#get_building_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all building conversations
    # Retrieves all the conversations of a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :type Filters results by the conversation type.
    # @return [Array<Conversation>]
    def get_building_conversations(building_id, opts = {})
      data, _status_code, _headers = get_building_conversations_with_http_info(building_id, opts)
      data
    end

    # Retrieve all building conversations
    # Retrieves all the conversations of a building.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :type Filters results by the conversation type.
    # @return [Array<(Array<Conversation>, Integer, Hash)>] Array<Conversation> data, response status code and response headers
    def get_building_conversations_with_http_info(building_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.get_building_conversations ...'
      end
      # verify the required parameter 'building_id' is set
      if @api_client.config.client_side_validation && building_id.nil?
        fail ArgumentError, "Missing the required parameter 'building_id' when calling BuildingsApi.get_building_conversations"
      end
      allowable_values = ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/buildings/{buildingID}/conversations'.sub('{' + 'buildingID' + '}', CGI.escape(building_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Conversation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.get_building_conversations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#get_building_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all the management fee rules of a building. (BETA)
    # <p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p> Retrieves all the management fee rules of a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code> 
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @return [Array<ManagementFee>]
    def get_building_management_fee(building_id, opts = {})
      data, _status_code, _headers = get_building_management_fee_with_http_info(building_id, opts)
      data
    end

    # Retrieves all the management fee rules of a building. (BETA)
    # &lt;p class&#x3D;\&quot;betaWarning\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.&lt;/p&gt; Retrieves all the management fee rules of a building.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ManagementFee>, Integer, Hash)>] Array<ManagementFee> data, response status code and response headers
    def get_building_management_fee_with_http_info(building_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.get_building_management_fee ...'
      end
      # verify the required parameter 'building_id' is set
      if @api_client.config.client_side_validation && building_id.nil?
        fail ArgumentError, "Missing the required parameter 'building_id' when calling BuildingsApi.get_building_management_fee"
      end
      # resource path
      local_var_path = '/buildings/{buildingID}/managementfees'.sub('{' + 'buildingID' + '}', CGI.escape(building_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ManagementFee>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.get_building_management_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#get_building_management_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all the property managers of a building
    # Retrieves all the property managers of a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code> 
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @return [Array<PropertyManager>]
    def get_building_managers(building_id, opts = {})
      data, _status_code, _headers = get_building_managers_with_http_info(building_id, opts)
      data
    end

    # Retrieves all the property managers of a building
    # Retrieves all the property managers of a building.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PropertyManager>, Integer, Hash)>] Array<PropertyManager> data, response status code and response headers
    def get_building_managers_with_http_info(building_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.get_building_managers ...'
      end
      # verify the required parameter 'building_id' is set
      if @api_client.config.client_side_validation && building_id.nil?
        fail ArgumentError, "Missing the required parameter 'building_id' when calling BuildingsApi.get_building_managers"
      end
      # resource path
      local_var_path = '/buildings/{buildingID}/managers'.sub('{' + 'buildingID' + '}', CGI.escape(building_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PropertyManager>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.get_building_managers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#get_building_managers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all the notes of a building.
    # Retrieves all the notes of a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code> 
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Note>]
    def get_building_notes(building_id, opts = {})
      data, _status_code, _headers = get_building_notes_with_http_info(building_id, opts)
      data
    end

    # Retrieves all the notes of a building.
    # Retrieves all the notes of a building.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param building_id [Integer] Building ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Note>, Integer, Hash)>] Array<Note> data, response status code and response headers
    def get_building_notes_with_http_info(building_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.get_building_notes ...'
      end
      # verify the required parameter 'building_id' is set
      if @api_client.config.client_side_validation && building_id.nil?
        fail ArgumentError, "Missing the required parameter 'building_id' when calling BuildingsApi.get_building_notes"
      end
      # resource path
      local_var_path = '/buildings/{buildingID}/notes'.sub('{' + 'buildingID' + '}', CGI.escape(building_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Note>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.get_building_notes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#get_building_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all buildings
    # Retrieves a list of buildings.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>idnumber</code>, <code>name</code>, <code>abbreviation</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Boolean] :vacant Filters results by the building&#39;s vacancy status. If no value is specified, buildings with any status will be returned.
    # @option opts [Boolean] :published_for_rent Filters results by the building&#39;s \&quot;published for rent\&quot; status. If no value is specified, buildings with any status will be returned.
    # @option opts [Integer] :lease_id Filters results to buildings associated with a specific lease.
    # @option opts [Integer] :portfolio_id Filters results to buildings associated with a specific portfolio.
    # @option opts [Boolean] :include_deactivated Filters results to buildings with a deactivated records.
    # @option opts [Boolean] :include_custom_fields Include custom fields in the response. (default to false)
    # @return [Array<Building>]
    def get_buildings(opts = {})
      data, _status_code, _headers = get_buildings_with_http_info(opts)
      data
    end

    # Retrieve all buildings
    # Retrieves a list of buildings.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;idnumber&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;abbreviation&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Boolean] :vacant Filters results by the building&#39;s vacancy status. If no value is specified, buildings with any status will be returned.
    # @option opts [Boolean] :published_for_rent Filters results by the building&#39;s \&quot;published for rent\&quot; status. If no value is specified, buildings with any status will be returned.
    # @option opts [Integer] :lease_id Filters results to buildings associated with a specific lease.
    # @option opts [Integer] :portfolio_id Filters results to buildings associated with a specific portfolio.
    # @option opts [Boolean] :include_deactivated Filters results to buildings with a deactivated records.
    # @option opts [Boolean] :include_custom_fields Include custom fields in the response. (default to false)
    # @return [Array<(Array<Building>, Integer, Hash)>] Array<Building> data, response status code and response headers
    def get_buildings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.get_buildings ...'
      end
      # resource path
      local_var_path = '/buildings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'vacant'] = opts[:'vacant'] if !opts[:'vacant'].nil?
      query_params[:'publishedForRent'] = opts[:'published_for_rent'] if !opts[:'published_for_rent'].nil?
      query_params[:'leaseID'] = opts[:'lease_id'] if !opts[:'lease_id'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'includeDeactivated'] = opts[:'include_deactivated'] if !opts[:'include_deactivated'].nil?
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Building>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.get_buildings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#get_buildings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a building custom fields (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates an existing building custom fields<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Write</code> 
    # @param save_custom_field [SaveCustomField] saveCustomField
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def update_building(save_custom_field, opts = {})
      data, _status_code, _headers = update_building_with_http_info(save_custom_field, opts)
      data
    end

    # Update a building custom fields (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates an existing building custom fields&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_custom_field [SaveCustomField] saveCustomField
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def update_building_with_http_info(save_custom_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.update_building ...'
      end
      # verify the required parameter 'save_custom_field' is set
      if @api_client.config.client_side_validation && save_custom_field.nil?
        fail ArgumentError, "Missing the required parameter 'save_custom_field' when calling BuildingsApi.update_building"
      end
      # resource path
      local_var_path = '/buildings/customfields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_custom_field)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.update_building",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#update_building\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a building
    # Updates a building.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BUILDINGS</span> - <code>Write</code> 
    # @param building_id [Integer] Building ID
    # @param update_building [UpdateBuilding] updateBuilding
    # @param [Hash] opts the optional parameters
    # @return [Building]
    def update_building_using_put1(building_id, update_building, opts = {})
      data, _status_code, _headers = update_building_using_put1_with_http_info(building_id, update_building, opts)
      data
    end

    # Update a building
    # Updates a building.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BUILDINGS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param building_id [Integer] Building ID
    # @param update_building [UpdateBuilding] updateBuilding
    # @param [Hash] opts the optional parameters
    # @return [Array<(Building, Integer, Hash)>] Building data, response status code and response headers
    def update_building_using_put1_with_http_info(building_id, update_building, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildingsApi.update_building_using_put1 ...'
      end
      # verify the required parameter 'building_id' is set
      if @api_client.config.client_side_validation && building_id.nil?
        fail ArgumentError, "Missing the required parameter 'building_id' when calling BuildingsApi.update_building_using_put1"
      end
      # verify the required parameter 'update_building' is set
      if @api_client.config.client_side_validation && update_building.nil?
        fail ArgumentError, "Missing the required parameter 'update_building' when calling BuildingsApi.update_building_using_put1"
      end
      # resource path
      local_var_path = '/buildings/{buildingID}'.sub('{' + 'buildingID' + '}', CGI.escape(building_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_building)

      # return_type
      return_type = opts[:debug_return_type] || 'Building'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BuildingsApi.update_building_using_put1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildingsApi#update_building_using_put1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
