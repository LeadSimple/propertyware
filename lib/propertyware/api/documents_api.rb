=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Propertyware
  class DocumentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a document (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Deletes a specific document and its associated content.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Delete</code> 
    # @param document_id [Integer] ID of the document to delete
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_document(document_id, opts = {})
      data, _status_code, _headers = delete_document_with_http_info(document_id, opts)
      data
    end

    # Delete a document (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Deletes a specific document and its associated content.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;DOCUMENTS&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param document_id [Integer] ID of the document to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.delete_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.delete_document"
      end
      # resource path
      local_var_path = '/docs/{documentId}'.sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"DocumentsApi.delete_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#delete_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a document
    # Retrieve a temporary download URL for a specific document.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Read</code> 
    # @param document_id [Integer] ID of the document to download
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def download_document(document_id, opts = {})
      data, _status_code, _headers = download_document_with_http_info(document_id, opts)
      data
    end

    # Download a document
    # Retrieve a temporary download URL for a specific document.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;DOCUMENTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param document_id [Integer] ID of the document to download
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def download_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.download_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.download_document"
      end
      # resource path
      local_var_path = '/docs/{documentId}/download'.sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"DocumentsApi.download_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#download_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all documents
    # Retrieves a list of documents associated with a specific entity.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param entity_type [String] Filters results to documents associated with a specific entity type.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :entity_id Filters results to documents associated with a specific entity id. entity ID is not required for “DESKTOP” and “OTHER”. Remaining entities need “entity ID”.
    # @return [Array<Document>]
    def retrieve_all_documents(entity_type, opts = {})
      data, _status_code, _headers = retrieve_all_documents_with_http_info(entity_type, opts)
      data
    end

    # Retrieve all documents
    # Retrieves a list of documents associated with a specific entity.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;DOCUMENTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param entity_type [String] Filters results to documents associated with a specific entity type.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :entity_id Filters results to documents associated with a specific entity id. entity ID is not required for “DESKTOP” and “OTHER”. Remaining entities need “entity ID”.
    # @return [Array<(Array<Document>, Integer, Hash)>] Array<Document> data, response status code and response headers
    def retrieve_all_documents_with_http_info(entity_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.retrieve_all_documents ...'
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling DocumentsApi.retrieve_all_documents"
      end
      # verify enum value
      allowable_values = ["APPOINTMENT", "ASSET", "BILL", "BANK_DEPOSIT", "BILL_PAYMENT", "BUILDING", "CONTACT", "FLOOR_PLAN", "DESKTOP", "EMAIL_TEMPLATE", "INSPECTION", "LEASE", "OTHER", "PORTFOLIO", "PROSPECT", "RECONCILIATION", "TASK", "TRANSACTION", "UNIT", "VENDOR", "WORK_ORDER"]
      if @api_client.config.client_side_validation && !allowable_values.include?(entity_type)
        fail ArgumentError, "invalid value for \"entity_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/docs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'entityType'] = entity_type
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'entityId'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Document>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"DocumentsApi.retrieve_all_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#retrieve_all_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a document
    # Retrieves the metadata of a specific document.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Read</code> 
    # @param document_id [Integer] ID of the document to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Document]
    def retrieve_document(document_id, opts = {})
      data, _status_code, _headers = retrieve_document_with_http_info(document_id, opts)
      data
    end

    # Retrieve a document
    # Retrieves the metadata of a specific document.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;DOCUMENTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param document_id [Integer] ID of the document to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def retrieve_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.retrieve_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.retrieve_document"
      end
      # resource path
      local_var_path = '/docs/{documentId}'.sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Document'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"DocumentsApi.retrieve_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#retrieve_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a document
    # Updates the metadata of a specific document.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Write</code> 
    # @param document_id [Integer] ID of the document to be updated
    # @param update_document [UpdateDocument] updateDocument
    # @param [Hash] opts the optional parameters
    # @return [Document]
    def update_document(document_id, update_document, opts = {})
      data, _status_code, _headers = update_document_with_http_info(document_id, update_document, opts)
      data
    end

    # Update a document
    # Updates the metadata of a specific document.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;DOCUMENTS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param document_id [Integer] ID of the document to be updated
    # @param update_document [UpdateDocument] updateDocument
    # @param [Hash] opts the optional parameters
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def update_document_with_http_info(document_id, update_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.update_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentsApi.update_document"
      end
      # verify the required parameter 'update_document' is set
      if @api_client.config.client_side_validation && update_document.nil?
        fail ArgumentError, "Missing the required parameter 'update_document' when calling DocumentsApi.update_document"
      end
      # resource path
      local_var_path = '/docs/{documentId}'.sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_document)

      # return_type
      return_type = opts[:debug_return_type] || 'Document'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"DocumentsApi.update_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#update_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a document
    # Upload a document<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">DOCUMENTS</span> - <code>Write</code> 
    # @param entity_id [Integer] Unique identifier of an entity document is attached to.
    # @param entity_type [String] Entity type Document is attached to (Asset, Bill, Bank Deposit, Building, Desktop, Lease, Owner, Portfolio, Prospect, Prospect Contact, Tenant, Unit, Vendor, Check, Credit, Service Agreement, Journal Entry, Work Order)
    # @param file [File] file
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :publish_to_tenant_portal Indicates if the document is published to the tenant portal.
    # @option opts [Boolean] :publish_to_owner_portal Indicates if the document is published to the owner portal.
    # @return [Document]
    def upload_document(entity_id, entity_type, file, opts = {})
      data, _status_code, _headers = upload_document_with_http_info(entity_id, entity_type, file, opts)
      data
    end

    # Upload a document
    # Upload a document&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;DOCUMENTS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param entity_id [Integer] Unique identifier of an entity document is attached to.
    # @param entity_type [String] Entity type Document is attached to (Asset, Bill, Bank Deposit, Building, Desktop, Lease, Owner, Portfolio, Prospect, Prospect Contact, Tenant, Unit, Vendor, Check, Credit, Service Agreement, Journal Entry, Work Order)
    # @param file [File] file
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :publish_to_tenant_portal Indicates if the document is published to the tenant portal.
    # @option opts [Boolean] :publish_to_owner_portal Indicates if the document is published to the owner portal.
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def upload_document_with_http_info(entity_id, entity_type, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.upload_document ...'
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling DocumentsApi.upload_document"
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling DocumentsApi.upload_document"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DocumentsApi.upload_document"
      end
      # resource path
      local_var_path = '/docs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'entityId'] = entity_id
      query_params[:'entityType'] = entity_type
      query_params[:'publishToTenantPortal'] = opts[:'publish_to_tenant_portal'] if !opts[:'publish_to_tenant_portal'].nil?
      query_params[:'publishToOwnerPortal'] = opts[:'publish_to_owner_portal'] if !opts[:'publish_to_owner_portal'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Document'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"DocumentsApi.upload_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#upload_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
