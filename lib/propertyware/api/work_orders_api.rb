=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Propertyware
  class WorkOrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Comments to task for a workOrder
    # Add Comments to task for WorkOrder.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code> 
    # @param work_order_id [Integer] Work Order ID
    # @param task_id [Integer] Task ID
    # @param save_comment [SaveComment] saveComment
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def add_work_order_task_comments(work_order_id, task_id, save_comment, opts = {})
      data, _status_code, _headers = add_work_order_task_comments_with_http_info(work_order_id, task_id, save_comment, opts)
      data
    end

    # Add Comments to task for a workOrder
    # Add Comments to task for WorkOrder.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param work_order_id [Integer] Work Order ID
    # @param task_id [Integer] Task ID
    # @param save_comment [SaveComment] saveComment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def add_work_order_task_comments_with_http_info(work_order_id, task_id, save_comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.add_work_order_task_comments ...'
      end
      # verify the required parameter 'work_order_id' is set
      if @api_client.config.client_side_validation && work_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_order_id' when calling WorkOrdersApi.add_work_order_task_comments"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling WorkOrdersApi.add_work_order_task_comments"
      end
      # verify the required parameter 'save_comment' is set
      if @api_client.config.client_side_validation && save_comment.nil?
        fail ArgumentError, "Missing the required parameter 'save_comment' when calling WorkOrdersApi.add_work_order_task_comments"
      end
      # resource path
      local_var_path = '/workorders/{workOrderId}/tasks/{taskId}/comments'.sub('{' + 'workOrderId' + '}', CGI.escape(work_order_id.to_s)).sub('{' + 'taskId' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_comment)

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.add_work_order_task_comments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#add_work_order_task_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Close a Workorder  (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Close an existing Workorder<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code> 
    # @param work_order_id [Integer] WorkOrder ID
    # @param close_work_order [CloseWorkOrder] closeWorkOrder
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def close_work_order(work_order_id, close_work_order, opts = {})
      data, _status_code, _headers = close_work_order_with_http_info(work_order_id, close_work_order, opts)
      data
    end

    # Close a Workorder  (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Close an existing Workorder&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param work_order_id [Integer] WorkOrder ID
    # @param close_work_order [CloseWorkOrder] closeWorkOrder
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def close_work_order_with_http_info(work_order_id, close_work_order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.close_work_order ...'
      end
      # verify the required parameter 'work_order_id' is set
      if @api_client.config.client_side_validation && work_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_order_id' when calling WorkOrdersApi.close_work_order"
      end
      # verify the required parameter 'close_work_order' is set
      if @api_client.config.client_side_validation && close_work_order.nil?
        fail ArgumentError, "Missing the required parameter 'close_work_order' when calling WorkOrdersApi.close_work_order"
      end
      # resource path
      local_var_path = '/workorders/closeworkorder/{workOrderID}'.sub('{' + 'workOrderID' + '}', CGI.escape(work_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(close_work_order)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.close_work_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#close_work_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a work order
    # Creates a work order.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code> 
    # @param save_work_order [SaveWorkOrder] saveWorkOrder
    # @param [Hash] opts the optional parameters
    # @return [WorkOrder]
    def create_work_order(save_work_order, opts = {})
      data, _status_code, _headers = create_work_order_with_http_info(save_work_order, opts)
      data
    end

    # Create a work order
    # Creates a work order.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_work_order [SaveWorkOrder] saveWorkOrder
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkOrder, Integer, Hash)>] WorkOrder data, response status code and response headers
    def create_work_order_with_http_info(save_work_order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.create_work_order ...'
      end
      # verify the required parameter 'save_work_order' is set
      if @api_client.config.client_side_validation && save_work_order.nil?
        fail ArgumentError, "Missing the required parameter 'save_work_order' when calling WorkOrdersApi.create_work_order"
      end
      # resource path
      local_var_path = '/workorders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_work_order)

      # return_type
      return_type = opts[:debug_return_type] || 'WorkOrder'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.create_work_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#create_work_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a task to workOrder
    # Create a task to an workOrder.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code> 
    # @param work_order_id [Integer] Work Order ID
    # @param save_work_order_task [SaveWorkOrderTask] saveWorkOrderTask
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def create_work_order_task(work_order_id, save_work_order_task, opts = {})
      data, _status_code, _headers = create_work_order_task_with_http_info(work_order_id, save_work_order_task, opts)
      data
    end

    # Create a task to workOrder
    # Create a task to an workOrder.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param work_order_id [Integer] Work Order ID
    # @param save_work_order_task [SaveWorkOrderTask] saveWorkOrderTask
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def create_work_order_task_with_http_info(work_order_id, save_work_order_task, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.create_work_order_task ...'
      end
      # verify the required parameter 'work_order_id' is set
      if @api_client.config.client_side_validation && work_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_order_id' when calling WorkOrdersApi.create_work_order_task"
      end
      # verify the required parameter 'save_work_order_task' is set
      if @api_client.config.client_side_validation && save_work_order_task.nil?
        fail ArgumentError, "Missing the required parameter 'save_work_order_task' when calling WorkOrdersApi.create_work_order_task"
      end
      # resource path
      local_var_path = '/workorders/{workOrderId}/tasks'.sub('{' + 'workOrderId' + '}', CGI.escape(work_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_work_order_task)

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.create_work_order_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#create_work_order_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create work orders in bulk
    # Creates word orders in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code> 
    # @param save_work_order [Array<SaveWorkOrder>] saveWorkOrder
    # @param [Hash] opts the optional parameters
    # @return [Array<RESTAPIBulkSuccessResponse>]
    def create_work_orders(save_work_order, opts = {})
      data, _status_code, _headers = create_work_orders_with_http_info(save_work_order, opts)
      data
    end

    # Create work orders in bulk
    # Creates word orders in bulk.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_work_order [Array<SaveWorkOrder>] saveWorkOrder
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RESTAPIBulkSuccessResponse>, Integer, Hash)>] Array<RESTAPIBulkSuccessResponse> data, response status code and response headers
    def create_work_orders_with_http_info(save_work_order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.create_work_orders ...'
      end
      # verify the required parameter 'save_work_order' is set
      if @api_client.config.client_side_validation && save_work_order.nil?
        fail ArgumentError, "Missing the required parameter 'save_work_order' when calling WorkOrdersApi.create_work_orders"
      end
      # resource path
      local_var_path = '/workorders/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_work_order)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RESTAPIBulkSuccessResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.create_work_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#create_work_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Work Order (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Delete a Work Order.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Delete</code> 
    # @param work_order_id [Integer] Work Order ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_work_order(work_order_id, opts = {})
      data, _status_code, _headers = delete_work_order_with_http_info(work_order_id, opts)
      data
    end

    # Delete a Work Order (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Delete a Work Order.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param work_order_id [Integer] Work Order ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_work_order_with_http_info(work_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.delete_work_order ...'
      end
      # verify the required parameter 'work_order_id' is set
      if @api_client.config.client_side_validation && work_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_order_id' when calling WorkOrdersApi.delete_work_order"
      end
      # resource path
      local_var_path = '/workorders/{workOrderID}'.sub('{' + 'workOrderID' + '}', CGI.escape(work_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.delete_work_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#delete_work_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a work order task (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Deletes a specific work order task.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Delete</code> 
    # @param work_order_id [Integer] Work Order ID
    # @param task_id [Integer] Task ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_work_order_task(work_order_id, task_id, opts = {})
      data, _status_code, _headers = delete_work_order_task_with_http_info(work_order_id, task_id, opts)
      data
    end

    # Delete a work order task (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Deletes a specific work order task.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param work_order_id [Integer] Work Order ID
    # @param task_id [Integer] Task ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_work_order_task_with_http_info(work_order_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.delete_work_order_task ...'
      end
      # verify the required parameter 'work_order_id' is set
      if @api_client.config.client_side_validation && work_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_order_id' when calling WorkOrdersApi.delete_work_order_task"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling WorkOrdersApi.delete_work_order_task"
      end
      # resource path
      local_var_path = '/workorders/{workOrderID}/tasks/{taskID}'.sub('{' + 'workOrderID' + '}', CGI.escape(work_order_id.to_s)).sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.delete_work_order_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#delete_work_order_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a work order
    # Retrieves a specific work order.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Read</code> 
    # @param work_order_id [Integer] Work Order ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to true)
    # @return [WorkOrder]
    def get_work_order(work_order_id, opts = {})
      data, _status_code, _headers = get_work_order_with_http_info(work_order_id, opts)
      data
    end

    # Retrieve a work order
    # Retrieves a specific work order.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param work_order_id [Integer] Work Order ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to true)
    # @return [Array<(WorkOrder, Integer, Hash)>] WorkOrder data, response status code and response headers
    def get_work_order_with_http_info(work_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.get_work_order ...'
      end
      # verify the required parameter 'work_order_id' is set
      if @api_client.config.client_side_validation && work_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_order_id' when calling WorkOrdersApi.get_work_order"
      end
      # resource path
      local_var_path = '/workorders/{workOrderId}'.sub('{' + 'workOrderId' + '}', CGI.escape(work_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkOrder'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.get_work_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#get_work_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a work order task
    # Retrieves a specific work order task.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Read</code> 
    # @param work_order_id [Integer] Work Order ID
    # @param task_id [Integer] Task ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Task>]
    def get_work_order_task(work_order_id, task_id, opts = {})
      data, _status_code, _headers = get_work_order_task_with_http_info(work_order_id, task_id, opts)
      data
    end

    # Retrieve a work order task
    # Retrieves a specific work order task.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param work_order_id [Integer] Work Order ID
    # @param task_id [Integer] Task ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Task>, Integer, Hash)>] Array<Task> data, response status code and response headers
    def get_work_order_task_with_http_info(work_order_id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.get_work_order_task ...'
      end
      # verify the required parameter 'work_order_id' is set
      if @api_client.config.client_side_validation && work_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_order_id' when calling WorkOrdersApi.get_work_order_task"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling WorkOrdersApi.get_work_order_task"
      end
      # resource path
      local_var_path = '/workorders/{workOrderID}/tasks/{taskID}'.sub('{' + 'workOrderID' + '}', CGI.escape(work_order_id.to_s)).sub('{' + 'taskID' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Task>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.get_work_order_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#get_work_order_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all work order tasks
    # Retrieves a list of work order tasks.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param work_order_id [Integer] Work Order ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :due_date Filters results by due day.
    # @option opts [Boolean] :completed Filters results by task status.
    # @return [Array<Task>]
    def get_work_order_tasks(work_order_id, opts = {})
      data, _status_code, _headers = get_work_order_tasks_with_http_info(work_order_id, opts)
      data
    end

    # Retrieve all work order tasks
    # Retrieves a list of work order tasks.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param work_order_id [Integer] Work Order ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :due_date Filters results by due day.
    # @option opts [Boolean] :completed Filters results by task status.
    # @return [Array<(Array<Task>, Integer, Hash)>] Array<Task> data, response status code and response headers
    def get_work_order_tasks_with_http_info(work_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.get_work_order_tasks ...'
      end
      # verify the required parameter 'work_order_id' is set
      if @api_client.config.client_side_validation && work_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_order_id' when calling WorkOrdersApi.get_work_order_tasks"
      end
      # resource path
      local_var_path = '/workorders/{workOrderId}/tasks'.sub('{' + 'workOrderId' + '}', CGI.escape(work_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'dueDate'] = opts[:'due_date'] if !opts[:'due_date'].nil?
      query_params[:'completed'] = opts[:'completed'] if !opts[:'completed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Task>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.get_work_order_tasks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#get_work_order_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all work orders
    # Retrieves a list of work orders.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>number</code>, <code>type</code>, <code>lastmodifieddatetime</code>, <code>status</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :portfolio_id Filters results to prospects associated with a specific portfolio.
    # @option opts [Integer] :building_id Filters results to prospects associated with a specific building.
    # @option opts [String] :status Filters results to work orders with a specific status.
    # @option opts [String] :type Filters results to work orders with a specific type.
    # @option opts [String] :priority Filters results to work orders with a specific priority.
    # @option opts [Date] :completed_date_start Filters results to any payment with a date on or after to the date specified.
    # @option opts [Date] :completed_date_end Filters results to any payment with a date on or prior to the date specified.
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to false)
    # @return [Array<WorkOrder>]
    def get_work_orders(opts = {})
      data, _status_code, _headers = get_work_orders_with_http_info(opts)
      data
    end

    # Retrieve all work orders
    # Retrieves a list of work orders.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :portfolio_id Filters results to prospects associated with a specific portfolio.
    # @option opts [Integer] :building_id Filters results to prospects associated with a specific building.
    # @option opts [String] :status Filters results to work orders with a specific status.
    # @option opts [String] :type Filters results to work orders with a specific type.
    # @option opts [String] :priority Filters results to work orders with a specific priority.
    # @option opts [Date] :completed_date_start Filters results to any payment with a date on or after to the date specified.
    # @option opts [Date] :completed_date_end Filters results to any payment with a date on or prior to the date specified.
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to false)
    # @return [Array<(Array<WorkOrder>, Integer, Hash)>] Array<WorkOrder> data, response status code and response headers
    def get_work_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.get_work_orders ...'
      end
      allowable_values = ["HIGH", "MEDIUM", "LOW"]
      if @api_client.config.client_side_validation && opts[:'priority'] && !allowable_values.include?(opts[:'priority'])
        fail ArgumentError, "invalid value for \"priority\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/workorders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'buildingID'] = opts[:'building_id'] if !opts[:'building_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?
      query_params[:'completedDateStart'] = opts[:'completed_date_start'] if !opts[:'completed_date_start'].nil?
      query_params[:'completedDateEnd'] = opts[:'completed_date_end'] if !opts[:'completed_date_end'].nil?
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WorkOrder>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.get_work_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#get_work_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a workorder custom fields (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates an existing workorder custom fields<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code> 
    # @param save_custom_field [SaveCustomField] saveCustomField
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def update_work_order(save_custom_field, opts = {})
      data, _status_code, _headers = update_work_order_with_http_info(save_custom_field, opts)
      data
    end

    # Update a workorder custom fields (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates an existing workorder custom fields&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_custom_field [SaveCustomField] saveCustomField
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def update_work_order_with_http_info(save_custom_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.update_work_order ...'
      end
      # verify the required parameter 'save_custom_field' is set
      if @api_client.config.client_side_validation && save_custom_field.nil?
        fail ArgumentError, "Missing the required parameter 'save_custom_field' when calling WorkOrdersApi.update_work_order"
      end
      # resource path
      local_var_path = '/workorders/customfields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_custom_field)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.update_work_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#update_work_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a task in workOrder
    # Update an existing workOrder task.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">WORK ORDERS</span> - <code>Write</code> 
    # @param work_order_id [Integer] Work Order ID
    # @param task_id [Integer] Task ID
    # @param save_work_order_task [SaveWorkOrderTask] saveWorkOrderTask
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def update_work_order_task(work_order_id, task_id, save_work_order_task, opts = {})
      data, _status_code, _headers = update_work_order_task_with_http_info(work_order_id, task_id, save_work_order_task, opts)
      data
    end

    # Update a task in workOrder
    # Update an existing workOrder task.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;WORK ORDERS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param work_order_id [Integer] Work Order ID
    # @param task_id [Integer] Task ID
    # @param save_work_order_task [SaveWorkOrderTask] saveWorkOrderTask
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def update_work_order_task_with_http_info(work_order_id, task_id, save_work_order_task, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkOrdersApi.update_work_order_task ...'
      end
      # verify the required parameter 'work_order_id' is set
      if @api_client.config.client_side_validation && work_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'work_order_id' when calling WorkOrdersApi.update_work_order_task"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling WorkOrdersApi.update_work_order_task"
      end
      # verify the required parameter 'save_work_order_task' is set
      if @api_client.config.client_side_validation && save_work_order_task.nil?
        fail ArgumentError, "Missing the required parameter 'save_work_order_task' when calling WorkOrdersApi.update_work_order_task"
      end
      # resource path
      local_var_path = '/workorders/{workOrderId}/tasks/{taskId}'.sub('{' + 'workOrderId' + '}', CGI.escape(work_order_id.to_s)).sub('{' + 'taskId' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_work_order_task)

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"WorkOrdersApi.update_work_order_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkOrdersApi#update_work_order_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
