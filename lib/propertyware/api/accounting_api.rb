=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Propertyware
  class AccountingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a bank deposit
    # Creates a bank deposit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GENERAL LEDGER</span> - <code>Write</code> 
    # @param save_bank_deposit [SaveBankDeposit] saveBankDeposit
    # @param [Hash] opts the optional parameters
    # @return [BankDeposit]
    def create_bank_deposit(save_bank_deposit, opts = {})
      data, _status_code, _headers = create_bank_deposit_with_http_info(save_bank_deposit, opts)
      data
    end

    # Create a bank deposit
    # Creates a bank deposit.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;GENERAL LEDGER&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_bank_deposit [SaveBankDeposit] saveBankDeposit
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankDeposit, Integer, Hash)>] BankDeposit data, response status code and response headers
    def create_bank_deposit_with_http_info(save_bank_deposit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_bank_deposit ...'
      end
      # verify the required parameter 'save_bank_deposit' is set
      if @api_client.config.client_side_validation && save_bank_deposit.nil?
        fail ArgumentError, "Missing the required parameter 'save_bank_deposit' when calling AccountingApi.create_bank_deposit"
      end
      # resource path
      local_var_path = '/accounting/bankdeposits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_bank_deposit)

      # return_type
      return_type = opts[:debug_return_type] || 'BankDeposit'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.create_bank_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_bank_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create general ledger accounts in bulk (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates general ledger accounts in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Write</code> 
    # @param save_account [Array<SaveAccount>] saveAccount
    # @param [Hash] opts the optional parameters
    # @return [Array<RESTAPIBulkSuccessResponse>]
    def create_bill_payments(save_account, opts = {})
      data, _status_code, _headers = create_bill_payments_with_http_info(save_account, opts)
      data
    end

    # Create general ledger accounts in bulk (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates general ledger accounts in bulk.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;GL ACCOUNTS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_account [Array<SaveAccount>] saveAccount
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RESTAPIBulkSuccessResponse>, Integer, Hash)>] Array<RESTAPIBulkSuccessResponse> data, response status code and response headers
    def create_bill_payments_with_http_info(save_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_bill_payments ...'
      end
      # verify the required parameter 'save_account' is set
      if @api_client.config.client_side_validation && save_account.nil?
        fail ArgumentError, "Missing the required parameter 'save_account' when calling AccountingApi.create_bill_payments"
      end
      # resource path
      local_var_path = '/accounting/glaccounts/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_account)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RESTAPIBulkSuccessResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.create_bill_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_bill_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a general ledger account (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Create a general ledger account.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Write</code> 
    # @param save_account [SaveAccount] saveAccount
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def create_gl_account(save_account, opts = {})
      data, _status_code, _headers = create_gl_account_with_http_info(save_account, opts)
      data
    end

    # Create a general ledger account (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Create a general ledger account.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;GL ACCOUNTS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_account [SaveAccount] saveAccount
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def create_gl_account_with_http_info(save_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_gl_account ...'
      end
      # verify the required parameter 'save_account' is set
      if @api_client.config.client_side_validation && save_account.nil?
        fail ArgumentError, "Missing the required parameter 'save_account' when calling AccountingApi.create_gl_account"
      end
      # resource path
      local_var_path = '/accounting/glaccounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_account)

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.create_gl_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_gl_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an owner contribution
    # Creates an owner contribution for a specified owner contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Write</code> 
    # @param save_owner_contribution [SaveOwnerContribution] saveOwnerContribution
    # @param [Hash] opts the optional parameters
    # @return [OwnerContribution]
    def create_owner_contribution(save_owner_contribution, opts = {})
      data, _status_code, _headers = create_owner_contribution_with_http_info(save_owner_contribution, opts)
      data
    end

    # Create an owner contribution
    # Creates an owner contribution for a specified owner contact.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PORTFOLIOS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_owner_contribution [SaveOwnerContribution] saveOwnerContribution
    # @param [Hash] opts the optional parameters
    # @return [Array<(OwnerContribution, Integer, Hash)>] OwnerContribution data, response status code and response headers
    def create_owner_contribution_with_http_info(save_owner_contribution, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_owner_contribution ...'
      end
      # verify the required parameter 'save_owner_contribution' is set
      if @api_client.config.client_side_validation && save_owner_contribution.nil?
        fail ArgumentError, "Missing the required parameter 'save_owner_contribution' when calling AccountingApi.create_owner_contribution"
      end
      # resource path
      local_var_path = '/accounting/ownercontributions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_owner_contribution)

      # return_type
      return_type = opts[:debug_return_type] || 'OwnerContribution'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.create_owner_contribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_owner_contribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an owner draw
    # Creates an owner draw for a specified owner contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Write</code> 
    # @param save_owner_draw [SaveOwnerDraw] saveOwnerDraw
    # @param [Hash] opts the optional parameters
    # @return [OwnerDraw]
    def create_owner_draw(save_owner_draw, opts = {})
      data, _status_code, _headers = create_owner_draw_with_http_info(save_owner_draw, opts)
      data
    end

    # Create an owner draw
    # Creates an owner draw for a specified owner contact.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PORTFOLIOS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_owner_draw [SaveOwnerDraw] saveOwnerDraw
    # @param [Hash] opts the optional parameters
    # @return [Array<(OwnerDraw, Integer, Hash)>] OwnerDraw data, response status code and response headers
    def create_owner_draw_with_http_info(save_owner_draw, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_owner_draw ...'
      end
      # verify the required parameter 'save_owner_draw' is set
      if @api_client.config.client_side_validation && save_owner_draw.nil?
        fail ArgumentError, "Missing the required parameter 'save_owner_draw' when calling AccountingApi.create_owner_draw"
      end
      # resource path
      local_var_path = '/accounting/ownerdraws'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_owner_draw)

      # return_type
      return_type = opts[:debug_return_type] || 'OwnerDraw'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.create_owner_draw",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_owner_draw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Bank Deposit (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Delete a Bank Deposit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GENERAL LEDGER</span> - <code>Delete</code> 
    # @param bank_deposit_id [Integer] Bank Deposit ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_bank_deposit(bank_deposit_id, opts = {})
      data, _status_code, _headers = delete_bank_deposit_with_http_info(bank_deposit_id, opts)
      data
    end

    # Delete a Bank Deposit (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Delete a Bank Deposit.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;GENERAL LEDGER&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param bank_deposit_id [Integer] Bank Deposit ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_bank_deposit_with_http_info(bank_deposit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.delete_bank_deposit ...'
      end
      # verify the required parameter 'bank_deposit_id' is set
      if @api_client.config.client_side_validation && bank_deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_deposit_id' when calling AccountingApi.delete_bank_deposit"
      end
      # resource path
      local_var_path = '/accounting/bankdeposits/{bankDepositID}'.sub('{' + 'bankDepositID' + '}', CGI.escape(bank_deposit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.delete_bank_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#delete_bank_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a general ledger account (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Delete a general ledger account.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Delete</code> 
    # @param gl_account [Integer] GL Account ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_gl_account(gl_account, opts = {})
      data, _status_code, _headers = delete_gl_account_with_http_info(gl_account, opts)
      data
    end

    # Delete a general ledger account (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Delete a general ledger account.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;GL ACCOUNTS&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param gl_account [Integer] GL Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_gl_account_with_http_info(gl_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.delete_gl_account ...'
      end
      # verify the required parameter 'gl_account' is set
      if @api_client.config.client_side_validation && gl_account.nil?
        fail ArgumentError, "Missing the required parameter 'gl_account' when calling AccountingApi.delete_gl_account"
      end
      # resource path
      local_var_path = '/accounting/glaccounts/{glAccount}'.sub('{' + 'glAccount' + '}', CGI.escape(gl_account.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.delete_gl_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#delete_gl_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Owner Contribution (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Delete Owner Contribution.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Delete</code> 
    # @param owner_contribution_id [Integer] Owner Contribution ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_owner_contribution(owner_contribution_id, opts = {})
      data, _status_code, _headers = delete_owner_contribution_with_http_info(owner_contribution_id, opts)
      data
    end

    # Delete Owner Contribution (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Delete Owner Contribution.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PORTFOLIOS&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param owner_contribution_id [Integer] Owner Contribution ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_owner_contribution_with_http_info(owner_contribution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.delete_owner_contribution ...'
      end
      # verify the required parameter 'owner_contribution_id' is set
      if @api_client.config.client_side_validation && owner_contribution_id.nil?
        fail ArgumentError, "Missing the required parameter 'owner_contribution_id' when calling AccountingApi.delete_owner_contribution"
      end
      # resource path
      local_var_path = '/accounting/ownercontributions/{ownerContributionID}'.sub('{' + 'ownerContributionID' + '}', CGI.escape(owner_contribution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.delete_owner_contribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#delete_owner_contribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a general ledger account
    # Retrieves a general ledger account.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Read</code> 
    # @param gl_account_id [Integer] GL Account ID
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def get_account(gl_account_id, opts = {})
      data, _status_code, _headers = get_account_with_http_info(gl_account_id, opts)
      data
    end

    # Retrieve a general ledger account
    # Retrieves a general ledger account.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;GL ACCOUNTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param gl_account_id [Integer] GL Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def get_account_with_http_info(gl_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_account ...'
      end
      # verify the required parameter 'gl_account_id' is set
      if @api_client.config.client_side_validation && gl_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'gl_account_id' when calling AccountingApi.get_account"
      end
      # resource path
      local_var_path = '/accounting/glaccounts/{glAccountID}'.sub('{' + 'glAccountID' + '}', CGI.escape(gl_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the general ledger accounts
    # Retrieves a list of general ledger accounts.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>accountcode</code>, <code>id</code>, <code>accountnumber</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :account_number Filters results to accounts with a specific number.
    # @option opts [Boolean] :include_deactivated Include deactivated results if a &#x60;true&#x60; value is passed. If no value is specified, only active accounts will be returned.
    # @option opts [String] :account_code Filters results to accounts with a specific code.
    # @option opts [Integer] :parent_gl_account_id Filters results to accounts that are a children of a specific parent account.
    # @return [Array<Account>]
    def get_accounts(opts = {})
      data, _status_code, _headers = get_accounts_with_http_info(opts)
      data
    end

    # Retrieve all the general ledger accounts
    # Retrieves a list of general ledger accounts.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;GL ACCOUNTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;accountcode&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;accountnumber&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :account_number Filters results to accounts with a specific number.
    # @option opts [Boolean] :include_deactivated Include deactivated results if a &#x60;true&#x60; value is passed. If no value is specified, only active accounts will be returned.
    # @option opts [String] :account_code Filters results to accounts with a specific code.
    # @option opts [Integer] :parent_gl_account_id Filters results to accounts that are a children of a specific parent account.
    # @return [Array<(Array<Account>, Integer, Hash)>] Array<Account> data, response status code and response headers
    def get_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_accounts ...'
      end
      # resource path
      local_var_path = '/accounting/glaccounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'accountNumber'] = opts[:'account_number'] if !opts[:'account_number'].nil?
      query_params[:'includeDeactivated'] = opts[:'include_deactivated'] if !opts[:'include_deactivated'].nil?
      query_params[:'accountCode'] = opts[:'account_code'] if !opts[:'account_code'].nil?
      query_params[:'parentGLAccountId'] = opts[:'parent_gl_account_id'] if !opts[:'parent_gl_account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Account>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all general ledger transactions (BETA)
    # <p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p> Retrieves a list of general ledger transactions.<br /><br />At least of the following date ranges must be passed as a filter:   * `lastModifiedDateStart`-`lastModifiedDateEnd`   * `createdDateStart`-`createdDateEnd`<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GENERAL LEDGER</span> - <code>Read</code> 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :lease_id Filters results to transactions associated with a specific lease.
    # @option opts [Integer] :owner_id Filters results to transactions associated with a specific owner.
    # @option opts [Integer] :vendor_id Filters results to transactions associated with a specific vendor.
    # @option opts [Integer] :portfolio_id Filters results to transactions associated with a specific Portfolio.
    # @option opts [Date] :post_date_start Filters results to any transaction with post date on or after to the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with post date on or prior to the date specified.
    # @return [Array<GLItem>]
    def get_general_ledger_transactions(opts = {})
      data, _status_code, _headers = get_general_ledger_transactions_with_http_info(opts)
      data
    end

    # Retrieve all general ledger transactions (BETA)
    # &lt;p class&#x3D;\&quot;betaWarning\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.&lt;/p&gt; Retrieves a list of general ledger transactions.&lt;br /&gt;&lt;br /&gt;At least of the following date ranges must be passed as a filter:   * &#x60;lastModifiedDateStart&#x60;-&#x60;lastModifiedDateEnd&#x60;   * &#x60;createdDateStart&#x60;-&#x60;createdDateEnd&#x60;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;GENERAL LEDGER&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :lease_id Filters results to transactions associated with a specific lease.
    # @option opts [Integer] :owner_id Filters results to transactions associated with a specific owner.
    # @option opts [Integer] :vendor_id Filters results to transactions associated with a specific vendor.
    # @option opts [Integer] :portfolio_id Filters results to transactions associated with a specific Portfolio.
    # @option opts [Date] :post_date_start Filters results to any transaction with post date on or after to the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with post date on or prior to the date specified.
    # @return [Array<(Array<GLItem>, Integer, Hash)>] Array<GLItem> data, response status code and response headers
    def get_general_ledger_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_general_ledger_transactions ...'
      end
      # resource path
      local_var_path = '/accounting/generalledger'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'leaseID'] = opts[:'lease_id'] if !opts[:'lease_id'].nil?
      query_params[:'ownerID'] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      query_params[:'vendorID'] = opts[:'vendor_id'] if !opts[:'vendor_id'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GLItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_general_ledger_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_general_ledger_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the owner contributions
    # Retrieves a list of owner contributions.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results to with portfolioID.
    # @return [Array<OwnerContribution>]
    def get_owner_contributions(opts = {})
      data, _status_code, _headers = get_owner_contributions_with_http_info(opts)
      data
    end

    # Retrieve all the owner contributions
    # Retrieves a list of owner contributions.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PORTFOLIOS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results to with portfolioID.
    # @return [Array<(Array<OwnerContribution>, Integer, Hash)>] Array<OwnerContribution> data, response status code and response headers
    def get_owner_contributions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_owner_contributions ...'
      end
      # resource path
      local_var_path = '/accounting/ownercontributions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OwnerContribution>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_owner_contributions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_owner_contributions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the owner draws
    # Retrieves a list of owner draws.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>portfolioid</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results to with portfolioID.
    # @return [Array<OwnerDraw>]
    def get_owner_draws(opts = {})
      data, _status_code, _headers = get_owner_draws_with_http_info(opts)
      data
    end

    # Retrieve all the owner draws
    # Retrieves a list of owner draws.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PORTFOLIOS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;portfolioid&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results to with portfolioID.
    # @return [Array<(Array<OwnerDraw>, Integer, Hash)>] Array<OwnerDraw> data, response status code and response headers
    def get_owner_draws_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_owner_draws ...'
      end
      # resource path
      local_var_path = '/accounting/ownerdraws'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OwnerDraw>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_owner_draws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_owner_draws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a general ledger account (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates a general ledger account.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">GL ACCOUNTS</span> - <code>Write</code> 
    # @param gl_account_id [Integer] GL Account ID
    # @param save_account [SaveAccount] saveAccount
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def update_gl_account(gl_account_id, save_account, opts = {})
      data, _status_code, _headers = update_gl_account_with_http_info(gl_account_id, save_account, opts)
      data
    end

    # Update a general ledger account (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates a general ledger account.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;GL ACCOUNTS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param gl_account_id [Integer] GL Account ID
    # @param save_account [SaveAccount] saveAccount
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def update_gl_account_with_http_info(gl_account_id, save_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.update_gl_account ...'
      end
      # verify the required parameter 'gl_account_id' is set
      if @api_client.config.client_side_validation && gl_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'gl_account_id' when calling AccountingApi.update_gl_account"
      end
      # verify the required parameter 'save_account' is set
      if @api_client.config.client_side_validation && save_account.nil?
        fail ArgumentError, "Missing the required parameter 'save_account' when calling AccountingApi.update_gl_account"
      end
      # resource path
      local_var_path = '/accounting/glaccounts/{glAccountID}'.sub('{' + 'glAccountID' + '}', CGI.escape(gl_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_account)

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.update_gl_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#update_gl_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an owner draw
    # Updates an owner draw for a specified owner contact.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PORTFOLIOS</span> - <code>Write</code> 
    # @param draw_id [Integer] Owner Draw ID
    # @param save_owner_draw [SaveOwnerDraw] saveOwnerDraw
    # @param [Hash] opts the optional parameters
    # @return [OwnerDraw]
    def update_owner_draw(draw_id, save_owner_draw, opts = {})
      data, _status_code, _headers = update_owner_draw_with_http_info(draw_id, save_owner_draw, opts)
      data
    end

    # Update an owner draw
    # Updates an owner draw for a specified owner contact.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PORTFOLIOS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param draw_id [Integer] Owner Draw ID
    # @param save_owner_draw [SaveOwnerDraw] saveOwnerDraw
    # @param [Hash] opts the optional parameters
    # @return [Array<(OwnerDraw, Integer, Hash)>] OwnerDraw data, response status code and response headers
    def update_owner_draw_with_http_info(draw_id, save_owner_draw, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.update_owner_draw ...'
      end
      # verify the required parameter 'draw_id' is set
      if @api_client.config.client_side_validation && draw_id.nil?
        fail ArgumentError, "Missing the required parameter 'draw_id' when calling AccountingApi.update_owner_draw"
      end
      # verify the required parameter 'save_owner_draw' is set
      if @api_client.config.client_side_validation && save_owner_draw.nil?
        fail ArgumentError, "Missing the required parameter 'save_owner_draw' when calling AccountingApi.update_owner_draw"
      end
      # resource path
      local_var_path = '/accounting/ownerdraws/{drawID}'.sub('{' + 'drawID' + '}', CGI.escape(draw_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_owner_draw)

      # return_type
      return_type = opts[:debug_return_type] || 'OwnerDraw'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.update_owner_draw",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#update_owner_draw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
