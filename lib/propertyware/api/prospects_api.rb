=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Propertyware
  class ProspectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create prospects in bulk
    # Creates prospects in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">UNITS</span> - <code>Write</code> 
    # @param save_prospect [Array<SaveProspect>] saveProspect
    # @param [Hash] opts the optional parameters
    # @return [Array<RESTAPIBulkSuccessResponse>]
    def create_contacts_using_post2(save_prospect, opts = {})
      data, _status_code, _headers = create_contacts_using_post2_with_http_info(save_prospect, opts)
      data
    end

    # Create prospects in bulk
    # Creates prospects in bulk.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;UNITS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_prospect [Array<SaveProspect>] saveProspect
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RESTAPIBulkSuccessResponse>, Integer, Hash)>] Array<RESTAPIBulkSuccessResponse> data, response status code and response headers
    def create_contacts_using_post2_with_http_info(save_prospect, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.create_contacts_using_post2 ...'
      end
      # verify the required parameter 'save_prospect' is set
      if @api_client.config.client_side_validation && save_prospect.nil?
        fail ArgumentError, "Missing the required parameter 'save_prospect' when calling ProspectsApi.create_contacts_using_post2"
      end
      # resource path
      local_var_path = '/prospects/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_prospect)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RESTAPIBulkSuccessResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.create_contacts_using_post2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#create_contacts_using_post2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a prospect
    # Creates a specific prospect.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Write</code> 
    # @param save_prospect [SaveProspect] saveProspect
    # @param [Hash] opts the optional parameters
    # @return [Prospect]
    def create_prospect(save_prospect, opts = {})
      data, _status_code, _headers = create_prospect_with_http_info(save_prospect, opts)
      data
    end

    # Create a prospect
    # Creates a specific prospect.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PROSPECTS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_prospect [SaveProspect] saveProspect
    # @param [Hash] opts the optional parameters
    # @return [Array<(Prospect, Integer, Hash)>] Prospect data, response status code and response headers
    def create_prospect_with_http_info(save_prospect, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.create_prospect ...'
      end
      # verify the required parameter 'save_prospect' is set
      if @api_client.config.client_side_validation && save_prospect.nil?
        fail ArgumentError, "Missing the required parameter 'save_prospect' when calling ProspectsApi.create_prospect"
      end
      # resource path
      local_var_path = '/prospects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_prospect)

      # return_type
      return_type = opts[:debug_return_type] || 'Prospect'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.create_prospect",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#create_prospect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a prospect conversation
    # Creates a specific prospect conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Write</code> 
    # @param prospect_id [Integer] Prospect ID
    # @param save_conversation [SaveConversation] saveConversation
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def create_prospect_conversation(prospect_id, save_conversation, opts = {})
      data, _status_code, _headers = create_prospect_conversation_with_http_info(prospect_id, save_conversation, opts)
      data
    end

    # Create a prospect conversation
    # Creates a specific prospect conversation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PROSPECTS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param prospect_id [Integer] Prospect ID
    # @param save_conversation [SaveConversation] saveConversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Integer, Hash)>] Conversation data, response status code and response headers
    def create_prospect_conversation_with_http_info(prospect_id, save_conversation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.create_prospect_conversation ...'
      end
      # verify the required parameter 'prospect_id' is set
      if @api_client.config.client_side_validation && prospect_id.nil?
        fail ArgumentError, "Missing the required parameter 'prospect_id' when calling ProspectsApi.create_prospect_conversation"
      end
      # verify the required parameter 'save_conversation' is set
      if @api_client.config.client_side_validation && save_conversation.nil?
        fail ArgumentError, "Missing the required parameter 'save_conversation' when calling ProspectsApi.create_prospect_conversation"
      end
      # resource path
      local_var_path = '/prospects/{prospectID}/conversations'.sub('{' + 'prospectID' + '}', CGI.escape(prospect_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_conversation)

      # return_type
      return_type = opts[:debug_return_type] || 'Conversation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.create_prospect_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#create_prospect_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a prospect conversation (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Deletes a specific prospect conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Delete</code> 
    # @param prospect_id [Integer] Prospect ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_prospect_conversation(prospect_id, conversation_id, opts = {})
      data, _status_code, _headers = delete_prospect_conversation_with_http_info(prospect_id, conversation_id, opts)
      data
    end

    # Delete a prospect conversation (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Deletes a specific prospect conversation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PROSPECTS&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param prospect_id [Integer] Prospect ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_prospect_conversation_with_http_info(prospect_id, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.delete_prospect_conversation ...'
      end
      # verify the required parameter 'prospect_id' is set
      if @api_client.config.client_side_validation && prospect_id.nil?
        fail ArgumentError, "Missing the required parameter 'prospect_id' when calling ProspectsApi.delete_prospect_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ProspectsApi.delete_prospect_conversation"
      end
      # resource path
      local_var_path = '/prospects/{prospectID}/conversations/{conversationID}'.sub('{' + 'prospectID' + '}', CGI.escape(prospect_id.to_s)).sub('{' + 'conversationID' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.delete_prospect_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#delete_prospect_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a prospect
    # Retrieves a specific prospect.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code> 
    # @param prospect_id [Integer] Prospect ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to true)
    # @return [Prospect]
    def get_prospect(prospect_id, opts = {})
      data, _status_code, _headers = get_prospect_with_http_info(prospect_id, opts)
      data
    end

    # Retrieve a prospect
    # Retrieves a specific prospect.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PROSPECTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param prospect_id [Integer] Prospect ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to true)
    # @return [Array<(Prospect, Integer, Hash)>] Prospect data, response status code and response headers
    def get_prospect_with_http_info(prospect_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.get_prospect ...'
      end
      # verify the required parameter 'prospect_id' is set
      if @api_client.config.client_side_validation && prospect_id.nil?
        fail ArgumentError, "Missing the required parameter 'prospect_id' when calling ProspectsApi.get_prospect"
      end
      # resource path
      local_var_path = '/prospects/{prospectID}'.sub('{' + 'prospectID' + '}', CGI.escape(prospect_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Prospect'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.get_prospect",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#get_prospect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve prospect campaign
    # Retrieves the campaign details of a prospect.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code> 
    # @param prospect_id [Integer] Prospect ID
    # @param [Hash] opts the optional parameters
    # @return [Campaign]
    def get_prospect_campaign(prospect_id, opts = {})
      data, _status_code, _headers = get_prospect_campaign_with_http_info(prospect_id, opts)
      data
    end

    # Retrieve prospect campaign
    # Retrieves the campaign details of a prospect.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PROSPECTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param prospect_id [Integer] Prospect ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Campaign, Integer, Hash)>] Campaign data, response status code and response headers
    def get_prospect_campaign_with_http_info(prospect_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.get_prospect_campaign ...'
      end
      # verify the required parameter 'prospect_id' is set
      if @api_client.config.client_side_validation && prospect_id.nil?
        fail ArgumentError, "Missing the required parameter 'prospect_id' when calling ProspectsApi.get_prospect_campaign"
      end
      # resource path
      local_var_path = '/prospects/{prospectID}/campaign'.sub('{' + 'prospectID' + '}', CGI.escape(prospect_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Campaign'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.get_prospect_campaign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#get_prospect_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a prospect conversation
    # Retrieves a specific prospect conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code> 
    # @param prospect_id [Integer] Prospect ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def get_prospect_conversation(prospect_id, conversation_id, opts = {})
      data, _status_code, _headers = get_prospect_conversation_with_http_info(prospect_id, conversation_id, opts)
      data
    end

    # Retrieve a prospect conversation
    # Retrieves a specific prospect conversation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PROSPECTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param prospect_id [Integer] Prospect ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Integer, Hash)>] Conversation data, response status code and response headers
    def get_prospect_conversation_with_http_info(prospect_id, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.get_prospect_conversation ...'
      end
      # verify the required parameter 'prospect_id' is set
      if @api_client.config.client_side_validation && prospect_id.nil?
        fail ArgumentError, "Missing the required parameter 'prospect_id' when calling ProspectsApi.get_prospect_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ProspectsApi.get_prospect_conversation"
      end
      # resource path
      local_var_path = '/prospects/{prospectID}/conversations/{conversationID}'.sub('{' + 'prospectID' + '}', CGI.escape(prospect_id.to_s)).sub('{' + 'conversationID' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Conversation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.get_prospect_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#get_prospect_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all prospect conversations
    # Retrieves all the conversations of a prospect.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param prospect_id [Integer] Prospect ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :type Filters results by the conversation type.
    # @return [Array<Conversation>]
    def get_prospect_conversations(prospect_id, opts = {})
      data, _status_code, _headers = get_prospect_conversations_with_http_info(prospect_id, opts)
      data
    end

    # Retrieve all prospect conversations
    # Retrieves all the conversations of a prospect.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PROSPECTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param prospect_id [Integer] Prospect ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :type Filters results by the conversation type.
    # @return [Array<(Array<Conversation>, Integer, Hash)>] Array<Conversation> data, response status code and response headers
    def get_prospect_conversations_with_http_info(prospect_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.get_prospect_conversations ...'
      end
      # verify the required parameter 'prospect_id' is set
      if @api_client.config.client_side_validation && prospect_id.nil?
        fail ArgumentError, "Missing the required parameter 'prospect_id' when calling ProspectsApi.get_prospect_conversations"
      end
      allowable_values = ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/prospects/{prospectID}/conversations'.sub('{' + 'prospectID' + '}', CGI.escape(prospect_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Conversation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.get_prospect_conversations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#get_prospect_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all prospect statuses
    # Retrieves a list of all prospect statuses<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code> 
    # @param [Hash] opts the optional parameters
    # @return [Array<ProspectStatus>]
    def get_prospect_statuses(opts = {})
      data, _status_code, _headers = get_prospect_statuses_with_http_info(opts)
      data
    end

    # Retrieve all prospect statuses
    # Retrieves a list of all prospect statuses&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PROSPECTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProspectStatus>, Integer, Hash)>] Array<ProspectStatus> data, response status code and response headers
    def get_prospect_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.get_prospect_statuses ...'
      end
      # resource path
      local_var_path = '/prospects/statuses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ProspectStatus>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.get_prospect_statuses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#get_prospect_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all prospects
    # Retrieves a list of prospects.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>type</code>, <code>lastmodifieddatetime</code>, <code>status</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :status Filters results to prospects with a specific status.
    # @option opts [Integer] :portfolio_id Filters results to prospects associated with a specific portfolio.
    # @option opts [Integer] :building_id Filters results to prospects associated with a specific building.
    # @option opts [String] :type Filters results to prospects with a specific type.
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to false)
    # @return [Array<Prospect>]
    def get_prospects(opts = {})
      data, _status_code, _headers = get_prospects_with_http_info(opts)
      data
    end

    # Retrieve all prospects
    # Retrieves a list of prospects.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PROSPECTS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :status Filters results to prospects with a specific status.
    # @option opts [Integer] :portfolio_id Filters results to prospects associated with a specific portfolio.
    # @option opts [Integer] :building_id Filters results to prospects associated with a specific building.
    # @option opts [String] :type Filters results to prospects with a specific type.
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to false)
    # @return [Array<(Array<Prospect>, Integer, Hash)>] Array<Prospect> data, response status code and response headers
    def get_prospects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.get_prospects ...'
      end
      # resource path
      local_var_path = '/prospects'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'buildingID'] = opts[:'building_id'] if !opts[:'building_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Prospect>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.get_prospects",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#get_prospects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a prospect custom fields (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates an existing prospect custom fields<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">PROSPECTS</span> - <code>Write</code> 
    # @param save_custom_field [SaveCustomField] saveCustomField
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def update_lease_using_put2(save_custom_field, opts = {})
      data, _status_code, _headers = update_lease_using_put2_with_http_info(save_custom_field, opts)
      data
    end

    # Update a prospect custom fields (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates an existing prospect custom fields&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;PROSPECTS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_custom_field [SaveCustomField] saveCustomField
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def update_lease_using_put2_with_http_info(save_custom_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProspectsApi.update_lease_using_put2 ...'
      end
      # verify the required parameter 'save_custom_field' is set
      if @api_client.config.client_side_validation && save_custom_field.nil?
        fail ArgumentError, "Missing the required parameter 'save_custom_field' when calling ProspectsApi.update_lease_using_put2"
      end
      # resource path
      local_var_path = '/prospects/customfields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_custom_field)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ProspectsApi.update_lease_using_put2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProspectsApi#update_lease_using_put2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
