=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Propertyware
  class LeasesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add comment to a lease conversation
    # Adds comment to a lease conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param lease_id [Integer] Lease ID
    # @param conversation_id [Integer] Conversation ID
    # @param save_comment [SaveComment] saveComment
    # @param [Hash] opts the optional parameters
    # @return [Comment]
    def add_comment_to_lease_conversation(lease_id, conversation_id, save_comment, opts = {})
      data, _status_code, _headers = add_comment_to_lease_conversation_with_http_info(lease_id, conversation_id, save_comment, opts)
      data
    end

    # Add comment to a lease conversation
    # Adds comment to a lease conversation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param conversation_id [Integer] Conversation ID
    # @param save_comment [SaveComment] saveComment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Comment, Integer, Hash)>] Comment data, response status code and response headers
    def add_comment_to_lease_conversation_with_http_info(lease_id, conversation_id, save_comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.add_comment_to_lease_conversation ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.add_comment_to_lease_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling LeasesApi.add_comment_to_lease_conversation"
      end
      # verify the required parameter 'save_comment' is set
      if @api_client.config.client_side_validation && save_comment.nil?
        fail ArgumentError, "Missing the required parameter 'save_comment' when calling LeasesApi.add_comment_to_lease_conversation"
      end
      # resource path
      local_var_path = '/leases/{leaseID}/conversations/{conversationID}/comments'.sub('{' + 'leaseID' + '}', CGI.escape(lease_id.to_s)).sub('{' + 'conversationID' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_comment)

      # return_type
      return_type = opts[:debug_return_type] || 'Comment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.add_comment_to_lease_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#add_comment_to_lease_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a lease journal entry (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates a lease journal entry.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param save_lease_journal_entry [SaveLeaseJournalEntry] saveLeaseJournalEntry
    # @param [Hash] opts the optional parameters
    # @return [JournalEntry]
    def create_journal_entry(save_lease_journal_entry, opts = {})
      data, _status_code, _headers = create_journal_entry_with_http_info(save_lease_journal_entry, opts)
      data
    end

    # Create a lease journal entry (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates a lease journal entry.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_lease_journal_entry [SaveLeaseJournalEntry] saveLeaseJournalEntry
    # @param [Hash] opts the optional parameters
    # @return [Array<(JournalEntry, Integer, Hash)>] JournalEntry data, response status code and response headers
    def create_journal_entry_with_http_info(save_lease_journal_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.create_journal_entry ...'
      end
      # verify the required parameter 'save_lease_journal_entry' is set
      if @api_client.config.client_side_validation && save_lease_journal_entry.nil?
        fail ArgumentError, "Missing the required parameter 'save_lease_journal_entry' when calling LeasesApi.create_journal_entry"
      end
      # resource path
      local_var_path = '/leases/journalentries'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_lease_journal_entry)

      # return_type
      return_type = opts[:debug_return_type] || 'JournalEntry'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.create_journal_entry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#create_journal_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a lease
    # Creates a new lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param save_lease [SaveLease] saveLease
    # @param [Hash] opts the optional parameters
    # @return [Lease]
    def create_lease(save_lease, opts = {})
      data, _status_code, _headers = create_lease_with_http_info(save_lease, opts)
      data
    end

    # Create a lease
    # Creates a new lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_lease [SaveLease] saveLease
    # @param [Hash] opts the optional parameters
    # @return [Array<(Lease, Integer, Hash)>] Lease data, response status code and response headers
    def create_lease_with_http_info(save_lease, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.create_lease ...'
      end
      # verify the required parameter 'save_lease' is set
      if @api_client.config.client_side_validation && save_lease.nil?
        fail ArgumentError, "Missing the required parameter 'save_lease' when calling LeasesApi.create_lease"
      end
      # resource path
      local_var_path = '/leases'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_lease)

      # return_type
      return_type = opts[:debug_return_type] || 'Lease'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.create_lease",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#create_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a lease adjustment (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates a lease adjustment.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param save_adjustment [SaveAdjustment] saveAdjustment
    # @param [Hash] opts the optional parameters
    # @return [Adjustment]
    def create_lease_adjustment(save_adjustment, opts = {})
      data, _status_code, _headers = create_lease_adjustment_with_http_info(save_adjustment, opts)
      data
    end

    # Create a lease adjustment (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates a lease adjustment.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_adjustment [SaveAdjustment] saveAdjustment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Adjustment, Integer, Hash)>] Adjustment data, response status code and response headers
    def create_lease_adjustment_with_http_info(save_adjustment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.create_lease_adjustment ...'
      end
      # verify the required parameter 'save_adjustment' is set
      if @api_client.config.client_side_validation && save_adjustment.nil?
        fail ArgumentError, "Missing the required parameter 'save_adjustment' when calling LeasesApi.create_lease_adjustment"
      end
      # resource path
      local_var_path = '/leases/adjustments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_adjustment)

      # return_type
      return_type = opts[:debug_return_type] || 'Adjustment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.create_lease_adjustment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#create_lease_adjustment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create lease auto charges (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates lease auto charges.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param auto_charge [AutoCharge] autoCharge
    # @param [Hash] opts the optional parameters
    # @return [Array<Charge>]
    def create_lease_auto_charges(auto_charge, opts = {})
      data, _status_code, _headers = create_lease_auto_charges_with_http_info(auto_charge, opts)
      data
    end

    # Create lease auto charges (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates lease auto charges.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param auto_charge [AutoCharge] autoCharge
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Charge>, Integer, Hash)>] Array<Charge> data, response status code and response headers
    def create_lease_auto_charges_with_http_info(auto_charge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.create_lease_auto_charges ...'
      end
      # verify the required parameter 'auto_charge' is set
      if @api_client.config.client_side_validation && auto_charge.nil?
        fail ArgumentError, "Missing the required parameter 'auto_charge' when calling LeasesApi.create_lease_auto_charges"
      end
      # resource path
      local_var_path = '/leases/autocharges'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auto_charge)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Charge>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.create_lease_auto_charges",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#create_lease_auto_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a lease charge (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates a lease charge.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param save_charge [SaveCharge] saveCharge
    # @param [Hash] opts the optional parameters
    # @return [ChargeTx]
    def create_lease_charge(save_charge, opts = {})
      data, _status_code, _headers = create_lease_charge_with_http_info(save_charge, opts)
      data
    end

    # Create a lease charge (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates a lease charge.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_charge [SaveCharge] saveCharge
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChargeTx, Integer, Hash)>] ChargeTx data, response status code and response headers
    def create_lease_charge_with_http_info(save_charge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.create_lease_charge ...'
      end
      # verify the required parameter 'save_charge' is set
      if @api_client.config.client_side_validation && save_charge.nil?
        fail ArgumentError, "Missing the required parameter 'save_charge' when calling LeasesApi.create_lease_charge"
      end
      # resource path
      local_var_path = '/leases/charges'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_charge)

      # return_type
      return_type = opts[:debug_return_type] || 'ChargeTx'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.create_lease_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#create_lease_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create lease charges in bulk (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates lease charges in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param save_charge [Array<SaveCharge>] saveCharge
    # @param [Hash] opts the optional parameters
    # @return [Array<RESTAPIBulkSuccessResponse>]
    def create_lease_charges(save_charge, opts = {})
      data, _status_code, _headers = create_lease_charges_with_http_info(save_charge, opts)
      data
    end

    # Create lease charges in bulk (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates lease charges in bulk.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_charge [Array<SaveCharge>] saveCharge
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RESTAPIBulkSuccessResponse>, Integer, Hash)>] Array<RESTAPIBulkSuccessResponse> data, response status code and response headers
    def create_lease_charges_with_http_info(save_charge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.create_lease_charges ...'
      end
      # verify the required parameter 'save_charge' is set
      if @api_client.config.client_side_validation && save_charge.nil?
        fail ArgumentError, "Missing the required parameter 'save_charge' when calling LeasesApi.create_lease_charges"
      end
      # resource path
      local_var_path = '/leases/charges/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_charge)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RESTAPIBulkSuccessResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.create_lease_charges",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#create_lease_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a lease conversation
    # Creates a specific lease conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param lease_id [Integer] Lease ID
    # @param save_conversation [SaveConversation] saveConversation
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def create_lease_conversation(lease_id, save_conversation, opts = {})
      data, _status_code, _headers = create_lease_conversation_with_http_info(lease_id, save_conversation, opts)
      data
    end

    # Create a lease conversation
    # Creates a specific lease conversation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param save_conversation [SaveConversation] saveConversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Integer, Hash)>] Conversation data, response status code and response headers
    def create_lease_conversation_with_http_info(lease_id, save_conversation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.create_lease_conversation ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.create_lease_conversation"
      end
      # verify the required parameter 'save_conversation' is set
      if @api_client.config.client_side_validation && save_conversation.nil?
        fail ArgumentError, "Missing the required parameter 'save_conversation' when calling LeasesApi.create_lease_conversation"
      end
      # resource path
      local_var_path = '/leases/{leaseID}/conversations'.sub('{' + 'leaseID' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_conversation)

      # return_type
      return_type = opts[:debug_return_type] || 'Conversation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.create_lease_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#create_lease_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a lease discount (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates a lease discount.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param save_discount [SaveDiscount] saveDiscount
    # @param [Hash] opts the optional parameters
    # @return [Discount]
    def create_lease_discount(save_discount, opts = {})
      data, _status_code, _headers = create_lease_discount_with_http_info(save_discount, opts)
      data
    end

    # Create a lease discount (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates a lease discount.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_discount [SaveDiscount] saveDiscount
    # @param [Hash] opts the optional parameters
    # @return [Array<(Discount, Integer, Hash)>] Discount data, response status code and response headers
    def create_lease_discount_with_http_info(save_discount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.create_lease_discount ...'
      end
      # verify the required parameter 'save_discount' is set
      if @api_client.config.client_side_validation && save_discount.nil?
        fail ArgumentError, "Missing the required parameter 'save_discount' when calling LeasesApi.create_lease_discount"
      end
      # resource path
      local_var_path = '/leases/discounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_discount)

      # return_type
      return_type = opts[:debug_return_type] || 'Discount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.create_lease_discount",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#create_lease_discount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a lease payment (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates a lease payment.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param save_payment [SavePayment] savePayment
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def create_lease_payment(save_payment, opts = {})
      data, _status_code, _headers = create_lease_payment_with_http_info(save_payment, opts)
      data
    end

    # Create a lease payment (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates a lease payment.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_payment [SavePayment] savePayment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def create_lease_payment_with_http_info(save_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.create_lease_payment ...'
      end
      # verify the required parameter 'save_payment' is set
      if @api_client.config.client_side_validation && save_payment.nil?
        fail ArgumentError, "Missing the required parameter 'save_payment' when calling LeasesApi.create_lease_payment"
      end
      # resource path
      local_var_path = '/leases/payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_payment)

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.create_lease_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#create_lease_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a lease refund (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates a lease refund.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param save_refund [SaveRefund] saveRefund
    # @param [Hash] opts the optional parameters
    # @return [Refund]
    def create_lease_refund(save_refund, opts = {})
      data, _status_code, _headers = create_lease_refund_with_http_info(save_refund, opts)
      data
    end

    # Create a lease refund (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates a lease refund.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_refund [SaveRefund] saveRefund
    # @param [Hash] opts the optional parameters
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def create_lease_refund_with_http_info(save_refund, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.create_lease_refund ...'
      end
      # verify the required parameter 'save_refund' is set
      if @api_client.config.client_side_validation && save_refund.nil?
        fail ArgumentError, "Missing the required parameter 'save_refund' when calling LeasesApi.create_lease_refund"
      end
      # resource path
      local_var_path = '/leases/refunds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_refund)

      # return_type
      return_type = opts[:debug_return_type] || 'Refund'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.create_lease_refund",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#create_lease_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a lease (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Deletes a lease<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Delete</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_lease(lease_id, opts = {})
      data, _status_code, _headers = delete_lease_with_http_info(lease_id, opts)
      data
    end

    # Delete a lease (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Deletes a lease&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_lease_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.delete_lease ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.delete_lease"
      end
      # resource path
      local_var_path = '/leases/{leaseID}'.sub('{' + 'leaseID' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.delete_lease",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#delete_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a lease charge (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Deletes a specific lease charge.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Delete</code> 
    # @param charge_id [Integer] Charge ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_lease_charge(charge_id, opts = {})
      data, _status_code, _headers = delete_lease_charge_with_http_info(charge_id, opts)
      data
    end

    # Delete a lease charge (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Deletes a specific lease charge.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param charge_id [Integer] Charge ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_lease_charge_with_http_info(charge_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.delete_lease_charge ...'
      end
      # verify the required parameter 'charge_id' is set
      if @api_client.config.client_side_validation && charge_id.nil?
        fail ArgumentError, "Missing the required parameter 'charge_id' when calling LeasesApi.delete_lease_charge"
      end
      # resource path
      local_var_path = '/leases/charges/{chargeID}'.sub('{' + 'chargeID' + '}', CGI.escape(charge_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.delete_lease_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#delete_lease_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a lease conversation (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Deletes a specific lease conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Delete</code> 
    # @param lease_id [Integer] Lease ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_lease_conversation(lease_id, conversation_id, opts = {})
      data, _status_code, _headers = delete_lease_conversation_with_http_info(lease_id, conversation_id, opts)
      data
    end

    # Delete a lease conversation (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Deletes a specific lease conversation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_lease_conversation_with_http_info(lease_id, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.delete_lease_conversation ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.delete_lease_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling LeasesApi.delete_lease_conversation"
      end
      # resource path
      local_var_path = '/leases/{leaseID}/conversations/{conversationID}'.sub('{' + 'leaseID' + '}', CGI.escape(lease_id.to_s)).sub('{' + 'conversationID' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.delete_lease_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#delete_lease_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease statuses (BETA)
    # <p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p> Retrieves a list of all lease statuses<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param [Hash] opts the optional parameters
    # @return [Array<LeaseStatus>]
    def get_all_lease_statuses(opts = {})
      data, _status_code, _headers = get_all_lease_statuses_with_http_info(opts)
      data
    end

    # Retrieve all lease statuses (BETA)
    # &lt;p class&#x3D;\&quot;betaWarning\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.&lt;/p&gt; Retrieves a list of all lease statuses&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LeaseStatus>, Integer, Hash)>] Array<LeaseStatus> data, response status code and response headers
    def get_all_lease_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_all_lease_statuses ...'
      end
      # resource path
      local_var_path = '/leases/statuses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LeaseStatus>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_all_lease_statuses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_all_lease_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a lease
    # Retrieves a specific lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to true)
    # @option opts [Boolean] :include_other_balances includeOtherBalances (default to false)
    # @return [Lease]
    def get_lease(lease_id, opts = {})
      data, _status_code, _headers = get_lease_with_http_info(lease_id, opts)
      data
    end

    # Retrieve a lease
    # Retrieves a specific lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to true)
    # @option opts [Boolean] :include_other_balances includeOtherBalances (default to false)
    # @return [Array<(Lease, Integer, Hash)>] Lease data, response status code and response headers
    def get_lease_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease"
      end
      # resource path
      local_var_path = '/leases/{leaseId}'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?
      query_params[:'includeOtherBalances'] = opts[:'include_other_balances'] if !opts[:'include_other_balances'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Lease'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the adjustments
    # Retrieves a list of adjustments.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @option opts [String] :status Filters results to with Lease Status.
    # @option opts [Integer] :gl_account_id Filters results with GLAccount ID.
    # @return [Array<Adjustment>]
    def get_lease_adjustments(opts = {})
      data, _status_code, _headers = get_lease_adjustments_with_http_info(opts)
      data
    end

    # Retrieve all the adjustments
    # Retrieves a list of adjustments.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;leaseid&lt;/code&gt;, &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @option opts [String] :status Filters results to with Lease Status.
    # @option opts [Integer] :gl_account_id Filters results with GLAccount ID.
    # @return [Array<(Array<Adjustment>, Integer, Hash)>] Array<Adjustment> data, response status code and response headers
    def get_lease_adjustments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_adjustments ...'
      end
      # resource path
      local_var_path = '/leases/adjustments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'leaseID'] = opts[:'lease_id'] if !opts[:'lease_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'glAccountID'] = opts[:'gl_account_id'] if !opts[:'gl_account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Adjustment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_adjustments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_adjustments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease auto charges (New)
    # Retrieves all the auto charges of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @return [Array<Charge>]
    def get_lease_auto_charges(opts = {})
      data, _status_code, _headers = get_lease_auto_charges_with_http_info(opts)
      data
    end

    # Retrieve all lease auto charges (New)
    # Retrieves all the auto charges of a lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @return [Array<(Array<Charge>, Integer, Hash)>] Array<Charge> data, response status code and response headers
    def get_lease_auto_charges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_auto_charges ...'
      end
      # resource path
      local_var_path = '/leases/autocharges'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'leaseID'] = opts[:'lease_id'] if !opts[:'lease_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Charge>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_auto_charges",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_auto_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease auto charges
    # Retrieves all the auto charges of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Charge>]
    def get_lease_auto_charges_using_get1(lease_id, opts = {})
      data, _status_code, _headers = get_lease_auto_charges_using_get1_with_http_info(lease_id, opts)
      data
    end

    # Retrieve all lease auto charges
    # Retrieves all the auto charges of a lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Charge>, Integer, Hash)>] Array<Charge> data, response status code and response headers
    def get_lease_auto_charges_using_get1_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_auto_charges_using_get1 ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_auto_charges_using_get1"
      end
      # resource path
      local_var_path = '/leases/{leaseId}/autocharges'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Charge>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_auto_charges_using_get1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_auto_charges_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease auto ePayments (BETA)
    # <p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p> Retrieves all the auto ePayments of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [AutoPayment]
    def get_lease_auto_e_payments(lease_id, opts = {})
      data, _status_code, _headers = get_lease_auto_e_payments_with_http_info(lease_id, opts)
      data
    end

    # Retrieve all lease auto ePayments (BETA)
    # &lt;p class&#x3D;\&quot;betaWarning\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.&lt;/p&gt; Retrieves all the auto ePayments of a lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutoPayment, Integer, Hash)>] AutoPayment data, response status code and response headers
    def get_lease_auto_e_payments_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_auto_e_payments ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_auto_e_payments"
      end
      # resource path
      local_var_path = '/leases/{leaseId}/autoepayments'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AutoPayment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_auto_e_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_auto_e_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease auto journal entries (BETA)
    # <p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p> Retrieves all the auto journal entries of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [AutoJournalEntry]
    def get_lease_auto_journal_entries(lease_id, opts = {})
      data, _status_code, _headers = get_lease_auto_journal_entries_with_http_info(lease_id, opts)
      data
    end

    # Retrieve all lease auto journal entries (BETA)
    # &lt;p class&#x3D;\&quot;betaWarning\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.&lt;/p&gt; Retrieves all the auto journal entries of a lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutoJournalEntry, Integer, Hash)>] AutoJournalEntry data, response status code and response headers
    def get_lease_auto_journal_entries_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_auto_journal_entries ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_auto_journal_entries"
      end
      # resource path
      local_var_path = '/leases/{leaseId}/autojournalentries'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AutoJournalEntry'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_auto_journal_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_auto_journal_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the lease charges
    # Retrieves a list of lease charges.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @option opts [String] :status Filters results to with Lease Status.
    # @option opts [Integer] :gl_account_id Filters results with GLAccount ID.
    # @return [Array<ChargeTx>]
    def get_lease_charges(opts = {})
      data, _status_code, _headers = get_lease_charges_with_http_info(opts)
      data
    end

    # Retrieve all the lease charges
    # Retrieves a list of lease charges.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;leaseid&lt;/code&gt;, &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @option opts [String] :status Filters results to with Lease Status.
    # @option opts [Integer] :gl_account_id Filters results with GLAccount ID.
    # @return [Array<(Array<ChargeTx>, Integer, Hash)>] Array<ChargeTx> data, response status code and response headers
    def get_lease_charges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_charges ...'
      end
      # resource path
      local_var_path = '/leases/charges'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'leaseID'] = opts[:'lease_id'] if !opts[:'lease_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'glAccountID'] = opts[:'gl_account_id'] if !opts[:'gl_account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ChargeTx>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_charges",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease contacts
    # Retrieves all the contacts of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to false)
    # @return [Array<ContactExtension>]
    def get_lease_contacts(lease_id, opts = {})
      data, _status_code, _headers = get_lease_contacts_with_http_info(lease_id, opts)
      data
    end

    # Retrieve all lease contacts
    # Retrieves all the contacts of a lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to false)
    # @return [Array<(Array<ContactExtension>, Integer, Hash)>] Array<ContactExtension> data, response status code and response headers
    def get_lease_contacts_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_contacts ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_contacts"
      end
      # resource path
      local_var_path = '/leases/{leaseId}/contacts'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ContactExtension>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_contacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a lease conversation
    # Retrieves a specific lease conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def get_lease_conversation(lease_id, conversation_id, opts = {})
      data, _status_code, _headers = get_lease_conversation_with_http_info(lease_id, conversation_id, opts)
      data
    end

    # Retrieve a lease conversation
    # Retrieves a specific lease conversation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Integer, Hash)>] Conversation data, response status code and response headers
    def get_lease_conversation_with_http_info(lease_id, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_conversation ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling LeasesApi.get_lease_conversation"
      end
      # resource path
      local_var_path = '/leases/{leaseID}/conversations/{conversationID}'.sub('{' + 'leaseID' + '}', CGI.escape(lease_id.to_s)).sub('{' + 'conversationID' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Conversation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease conversations
    # Retrieves all the conversations of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :type Filters results by the conversation type.
    # @return [Array<Conversation>]
    def get_lease_conversations(lease_id, opts = {})
      data, _status_code, _headers = get_lease_conversations_with_http_info(lease_id, opts)
      data
    end

    # Retrieve all lease conversations
    # Retrieves all the conversations of a lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :type Filters results by the conversation type.
    # @return [Array<(Array<Conversation>, Integer, Hash)>] Array<Conversation> data, response status code and response headers
    def get_lease_conversations_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_conversations ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_conversations"
      end
      allowable_values = ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/leases/{leaseID}/conversations'.sub('{' + 'leaseID' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Conversation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_conversations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the credit memos
    # Retrieves a list of credit memos.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @option opts [String] :status Filters results to with Lease Status.
    # @option opts [Integer] :gl_account_id Filters results with GLAccount ID.
    # @return [Array<CreditMemo>]
    def get_lease_credit_memos(opts = {})
      data, _status_code, _headers = get_lease_credit_memos_with_http_info(opts)
      data
    end

    # Retrieve all the credit memos
    # Retrieves a list of credit memos.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;leaseid&lt;/code&gt;, &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @option opts [String] :status Filters results to with Lease Status.
    # @option opts [Integer] :gl_account_id Filters results with GLAccount ID.
    # @return [Array<(Array<CreditMemo>, Integer, Hash)>] Array<CreditMemo> data, response status code and response headers
    def get_lease_credit_memos_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_credit_memos ...'
      end
      # resource path
      local_var_path = '/leases/creditmemos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'leaseID'] = opts[:'lease_id'] if !opts[:'lease_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'glAccountID'] = opts[:'gl_account_id'] if !opts[:'gl_account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CreditMemo>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_credit_memos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_credit_memos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease custom fields
    # Retrieves all the custom fields of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<CustomField>]
    def get_lease_custom_fields(lease_id, opts = {})
      data, _status_code, _headers = get_lease_custom_fields_with_http_info(lease_id, opts)
      data
    end

    # Retrieve all lease custom fields
    # Retrieves all the custom fields of a lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CustomField>, Integer, Hash)>] Array<CustomField> data, response status code and response headers
    def get_lease_custom_fields_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_custom_fields ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_custom_fields"
      end
      # resource path
      local_var_path = '/leases/{leaseId}/customfields'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CustomField>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_custom_fields",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the lease discounts
    # Retrieves a list of lease discounts<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :lease_id Filters results to any LeaseID.
    # @option opts [Date] :post_date_start Filters results to any discount with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any discount with a start date on or prior to the date specified.
    # @return [Array<Discount>]
    def get_lease_discounts(opts = {})
      data, _status_code, _headers = get_lease_discounts_with_http_info(opts)
      data
    end

    # Retrieve all the lease discounts
    # Retrieves a list of lease discounts&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;leaseid&lt;/code&gt;, &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :lease_id Filters results to any LeaseID.
    # @option opts [Date] :post_date_start Filters results to any discount with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any discount with a start date on or prior to the date specified.
    # @return [Array<(Array<Discount>, Integer, Hash)>] Array<Discount> data, response status code and response headers
    def get_lease_discounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_discounts ...'
      end
      # resource path
      local_var_path = '/leases/discounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'leaseID'] = opts[:'lease_id'] if !opts[:'lease_id'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Discount>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_discounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_discounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease documents
    # Retrieves all the documents of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Document>]
    def get_lease_documents(lease_id, opts = {})
      data, _status_code, _headers = get_lease_documents_with_http_info(lease_id, opts)
      data
    end

    # Retrieve all lease documents
    # Retrieves all the documents of a lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Document>, Integer, Hash)>] Array<Document> data, response status code and response headers
    def get_lease_documents_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_documents ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_documents"
      end
      # resource path
      local_var_path = '/leases/{leaseId}/document'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Document>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease journal entries 
    # Retrieves a specific lease journal entries.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :lease_id2 Filters results to transactions associated with a specific lease.
    # @option opts [Date] :post_date_start Filters results to any transaction with post date on or after to the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with post date on or prior to the date specified.
    # @return [JournalEntry]
    def get_lease_journal_entry(lease_id, opts = {})
      data, _status_code, _headers = get_lease_journal_entry_with_http_info(lease_id, opts)
      data
    end

    # Retrieve all lease journal entries 
    # Retrieves a specific lease journal entries.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :lease_id2 Filters results to transactions associated with a specific lease.
    # @option opts [Date] :post_date_start Filters results to any transaction with post date on or after to the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with post date on or prior to the date specified.
    # @return [Array<(JournalEntry, Integer, Hash)>] JournalEntry data, response status code and response headers
    def get_lease_journal_entry_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_journal_entry ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_journal_entry"
      end
      # resource path
      local_var_path = '/leases/journalentries/{leaseID}'.sub('{' + 'leaseID' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'leaseID'] = opts[:'lease_id2'] if !opts[:'lease_id2'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JournalEntry'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_journal_entry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_journal_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease journal entries (New)
    # Retrieves a list of lease journal entries.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :lease_id Filters results to transactions associated with a specific lease.
    # @option opts [Date] :post_date_start Filters results to any transaction with post date on or after to the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with post date on or prior to the date specified.
    # @return [JournalEntry]
    def get_lease_journal_entry_using_get1(opts = {})
      data, _status_code, _headers = get_lease_journal_entry_using_get1_with_http_info(opts)
      data
    end

    # Retrieve all lease journal entries (New)
    # Retrieves a list of lease journal entries.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :lease_id Filters results to transactions associated with a specific lease.
    # @option opts [Date] :post_date_start Filters results to any transaction with post date on or after to the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with post date on or prior to the date specified.
    # @return [Array<(JournalEntry, Integer, Hash)>] JournalEntry data, response status code and response headers
    def get_lease_journal_entry_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_journal_entry_using_get1 ...'
      end
      # resource path
      local_var_path = '/leases/journalentries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'leaseID'] = opts[:'lease_id'] if !opts[:'lease_id'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JournalEntry'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_journal_entry_using_get1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_journal_entry_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the lease late fee rule
    # Retrieves the lease late fee rule.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [LateFeeRule]
    def get_lease_late_fee(lease_id, opts = {})
      data, _status_code, _headers = get_lease_late_fee_with_http_info(lease_id, opts)
      data
    end

    # Retrieve the lease late fee rule
    # Retrieves the lease late fee rule.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LateFeeRule, Integer, Hash)>] LateFeeRule data, response status code and response headers
    def get_lease_late_fee_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_late_fee ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_late_fee"
      end
      # resource path
      local_var_path = '/leases/{leaseId}/latefeerule'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LateFeeRule'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_late_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_late_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease notes
    # Retrieves all the notes of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Note>]
    def get_lease_notes(lease_id, opts = {})
      data, _status_code, _headers = get_lease_notes_with_http_info(lease_id, opts)
      data
    end

    # Retrieve all lease notes
    # Retrieves all the notes of a lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Note>, Integer, Hash)>] Array<Note> data, response status code and response headers
    def get_lease_notes_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_notes ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_notes"
      end
      # resource path
      local_var_path = '/leases/{leaseId}/notes'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Note>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_notes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the lease payments
    # Retrieves a list of lease payments.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @option opts [String] :status Filters results to with Lease Status.
    # @option opts [Integer] :gl_account_id Filters results with GLAccount ID.
    # @return [Array<Payment>]
    def get_lease_payments(opts = {})
      data, _status_code, _headers = get_lease_payments_with_http_info(opts)
      data
    end

    # Retrieve all the lease payments
    # Retrieves a list of lease payments.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;leaseid&lt;/code&gt;, &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @option opts [String] :status Filters results to with Lease Status.
    # @option opts [Integer] :gl_account_id Filters results with GLAccount ID.
    # @return [Array<(Array<Payment>, Integer, Hash)>] Array<Payment> data, response status code and response headers
    def get_lease_payments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_payments ...'
      end
      # resource path
      local_var_path = '/leases/payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'leaseID'] = opts[:'lease_id'] if !opts[:'lease_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'glAccountID'] = opts[:'gl_account_id'] if !opts[:'gl_account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Payment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the tenant refunds
    # Retrieves a list of tenant refunds.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>leaseid</code>, <code>postdate</code>, <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @option opts [String] :status Filters results to with Lease Status.
    # @option opts [Integer] :gl_account_id Filters results with GLAccount ID.
    # @return [Array<Refund>]
    def get_lease_refunds(opts = {})
      data, _status_code, _headers = get_lease_refunds_with_http_info(opts)
      data
    end

    # Retrieve all the tenant refunds
    # Retrieves a list of tenant refunds.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;leaseid&lt;/code&gt;, &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :lease_id Filters results with Lease ID.
    # @option opts [String] :status Filters results to with Lease Status.
    # @option opts [Integer] :gl_account_id Filters results with GLAccount ID.
    # @return [Array<(Array<Refund>, Integer, Hash)>] Array<Refund> data, response status code and response headers
    def get_lease_refunds_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_refunds ...'
      end
      # resource path
      local_var_path = '/leases/refunds'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'leaseID'] = opts[:'lease_id'] if !opts[:'lease_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'glAccountID'] = opts[:'gl_account_id'] if !opts[:'gl_account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Refund>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_refunds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_refunds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all lease work orders
    # Retrieves all the work orders of a lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<WorkOrder>]
    def get_lease_work_orders(lease_id, opts = {})
      data, _status_code, _headers = get_lease_work_orders_with_http_info(lease_id, opts)
      data
    end

    # Retrieve all lease work orders
    # Retrieves all the work orders of a lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WorkOrder>, Integer, Hash)>] Array<WorkOrder> data, response status code and response headers
    def get_lease_work_orders_with_http_info(lease_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_lease_work_orders ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.get_lease_work_orders"
      end
      # resource path
      local_var_path = '/leases/{leaseId}/workorders'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WorkOrder>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_lease_work_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_lease_work_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all leases
    # Retrieves a list of leases.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>startdate</code>, <code>idnumber</code>, <code>scheduledmoveoutdate</code>, <code>enddate</code>, <code>lastmodifieddatetime</code>, <code>status</code>, <code>moveoutdate</code>, <code>id</code>, <code>moveindate</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :start_date_start Filters results to any lease with a start date on or after the date specified.
    # @option opts [Date] :start_date_end Filters results to any lease with a start date on or prior to the date specified.
    # @option opts [Date] :end_date_start Filters results to any lease with a end date on or after the date specified.
    # @option opts [Date] :end_date_end Filters results to any lease with a end date on or prior to the date specified.
    # @option opts [Date] :move_in_date_start Filters results to any lease with a move-in date on or after the date specified.
    # @option opts [Date] :move_in_date_end Filters results to any lease with a move-in date on or prior to the date specified.
    # @option opts [Date] :schedule_move_out_date_start Filters results to any lease with a move-out date on or after the date specified.
    # @option opts [Date] :schedule_move_out_date_end Filters results to any lease with a move-out date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results to leases associated with a specific portfolio.
    # @option opts [Integer] :building_id Filters results to leases associated with a specific building.
    # @option opts [Integer] :unit_id Filters results to leases associated with a specific unit.
    # @option opts [String] :status Filters results to inspections with a specific status.
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to false)
    # @option opts [Boolean] :include_other_balances includeOtherBalances (default to false)
    # @return [Array<Lease>]
    def get_leases(opts = {})
      data, _status_code, _headers = get_leases_with_http_info(opts)
      data
    end

    # Retrieve all leases
    # Retrieves a list of leases.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;startdate&lt;/code&gt;, &lt;code&gt;idnumber&lt;/code&gt;, &lt;code&gt;scheduledmoveoutdate&lt;/code&gt;, &lt;code&gt;enddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;moveoutdate&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;moveindate&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :start_date_start Filters results to any lease with a start date on or after the date specified.
    # @option opts [Date] :start_date_end Filters results to any lease with a start date on or prior to the date specified.
    # @option opts [Date] :end_date_start Filters results to any lease with a end date on or after the date specified.
    # @option opts [Date] :end_date_end Filters results to any lease with a end date on or prior to the date specified.
    # @option opts [Date] :move_in_date_start Filters results to any lease with a move-in date on or after the date specified.
    # @option opts [Date] :move_in_date_end Filters results to any lease with a move-in date on or prior to the date specified.
    # @option opts [Date] :schedule_move_out_date_start Filters results to any lease with a move-out date on or after the date specified.
    # @option opts [Date] :schedule_move_out_date_end Filters results to any lease with a move-out date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results to leases associated with a specific portfolio.
    # @option opts [Integer] :building_id Filters results to leases associated with a specific building.
    # @option opts [Integer] :unit_id Filters results to leases associated with a specific unit.
    # @option opts [String] :status Filters results to inspections with a specific status.
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to false)
    # @option opts [Boolean] :include_other_balances includeOtherBalances (default to false)
    # @return [Array<(Array<Lease>, Integer, Hash)>] Array<Lease> data, response status code and response headers
    def get_leases_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.get_leases ...'
      end
      # resource path
      local_var_path = '/leases'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'startDateStart'] = opts[:'start_date_start'] if !opts[:'start_date_start'].nil?
      query_params[:'startDateEnd'] = opts[:'start_date_end'] if !opts[:'start_date_end'].nil?
      query_params[:'endDateStart'] = opts[:'end_date_start'] if !opts[:'end_date_start'].nil?
      query_params[:'endDateEnd'] = opts[:'end_date_end'] if !opts[:'end_date_end'].nil?
      query_params[:'moveInDateStart'] = opts[:'move_in_date_start'] if !opts[:'move_in_date_start'].nil?
      query_params[:'moveInDateEnd'] = opts[:'move_in_date_end'] if !opts[:'move_in_date_end'].nil?
      query_params[:'scheduleMoveOutDateStart'] = opts[:'schedule_move_out_date_start'] if !opts[:'schedule_move_out_date_start'].nil?
      query_params[:'scheduleMoveOutDateEnd'] = opts[:'schedule_move_out_date_end'] if !opts[:'schedule_move_out_date_end'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'buildingID'] = opts[:'building_id'] if !opts[:'building_id'].nil?
      query_params[:'unitID'] = opts[:'unit_id'] if !opts[:'unit_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?
      query_params[:'includeOtherBalances'] = opts[:'include_other_balances'] if !opts[:'include_other_balances'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Lease>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.get_leases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#get_leases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a lease custom fields (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates an existing lease custom fields<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param save_custom_field [SaveCustomField] saveCustomField
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def update_lease(save_custom_field, opts = {})
      data, _status_code, _headers = update_lease_with_http_info(save_custom_field, opts)
      data
    end

    # Update a lease custom fields (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates an existing lease custom fields&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_custom_field [SaveCustomField] saveCustomField
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def update_lease_with_http_info(save_custom_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.update_lease ...'
      end
      # verify the required parameter 'save_custom_field' is set
      if @api_client.config.client_side_validation && save_custom_field.nil?
        fail ArgumentError, "Missing the required parameter 'save_custom_field' when calling LeasesApi.update_lease"
      end
      # resource path
      local_var_path = '/leases/customfields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_custom_field)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.update_lease",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#update_lease\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a lease adjustment (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates an lease adjustment.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param adjustment_id [Integer] Adjustment ID
    # @param save_adjustment [SaveAdjustment] saveAdjustment
    # @param [Hash] opts the optional parameters
    # @return [Adjustment]
    def update_lease_adjustment(adjustment_id, save_adjustment, opts = {})
      data, _status_code, _headers = update_lease_adjustment_with_http_info(adjustment_id, save_adjustment, opts)
      data
    end

    # Update a lease adjustment (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates an lease adjustment.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param adjustment_id [Integer] Adjustment ID
    # @param save_adjustment [SaveAdjustment] saveAdjustment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Adjustment, Integer, Hash)>] Adjustment data, response status code and response headers
    def update_lease_adjustment_with_http_info(adjustment_id, save_adjustment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.update_lease_adjustment ...'
      end
      # verify the required parameter 'adjustment_id' is set
      if @api_client.config.client_side_validation && adjustment_id.nil?
        fail ArgumentError, "Missing the required parameter 'adjustment_id' when calling LeasesApi.update_lease_adjustment"
      end
      # verify the required parameter 'save_adjustment' is set
      if @api_client.config.client_side_validation && save_adjustment.nil?
        fail ArgumentError, "Missing the required parameter 'save_adjustment' when calling LeasesApi.update_lease_adjustment"
      end
      # resource path
      local_var_path = '/leases/adjustments/{adjustmentID}'.sub('{' + 'adjustmentID' + '}', CGI.escape(adjustment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_adjustment)

      # return_type
      return_type = opts[:debug_return_type] || 'Adjustment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.update_lease_adjustment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#update_lease_adjustment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a lease charge (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates a lease charge.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param charge_id [Integer] Charge ID
    # @param save_charge [SaveCharge] saveCharge
    # @param [Hash] opts the optional parameters
    # @return [ChargeTx]
    def update_lease_charge(charge_id, save_charge, opts = {})
      data, _status_code, _headers = update_lease_charge_with_http_info(charge_id, save_charge, opts)
      data
    end

    # Update a lease charge (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates a lease charge.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param charge_id [Integer] Charge ID
    # @param save_charge [SaveCharge] saveCharge
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChargeTx, Integer, Hash)>] ChargeTx data, response status code and response headers
    def update_lease_charge_with_http_info(charge_id, save_charge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.update_lease_charge ...'
      end
      # verify the required parameter 'charge_id' is set
      if @api_client.config.client_side_validation && charge_id.nil?
        fail ArgumentError, "Missing the required parameter 'charge_id' when calling LeasesApi.update_lease_charge"
      end
      # verify the required parameter 'save_charge' is set
      if @api_client.config.client_side_validation && save_charge.nil?
        fail ArgumentError, "Missing the required parameter 'save_charge' when calling LeasesApi.update_lease_charge"
      end
      # resource path
      local_var_path = '/leases/charges/{chargeID}'.sub('{' + 'chargeID' + '}', CGI.escape(charge_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_charge)

      # return_type
      return_type = opts[:debug_return_type] || 'ChargeTx'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.update_lease_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#update_lease_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a lease Discount (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates a lease Discount.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param discount_id [Integer] Discount ID
    # @param save_discount [SaveDiscount] saveDiscount
    # @param [Hash] opts the optional parameters
    # @return [Discount]
    def update_lease_discount(discount_id, save_discount, opts = {})
      data, _status_code, _headers = update_lease_discount_with_http_info(discount_id, save_discount, opts)
      data
    end

    # Updates a lease Discount (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates a lease Discount.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param discount_id [Integer] Discount ID
    # @param save_discount [SaveDiscount] saveDiscount
    # @param [Hash] opts the optional parameters
    # @return [Array<(Discount, Integer, Hash)>] Discount data, response status code and response headers
    def update_lease_discount_with_http_info(discount_id, save_discount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.update_lease_discount ...'
      end
      # verify the required parameter 'discount_id' is set
      if @api_client.config.client_side_validation && discount_id.nil?
        fail ArgumentError, "Missing the required parameter 'discount_id' when calling LeasesApi.update_lease_discount"
      end
      # verify the required parameter 'save_discount' is set
      if @api_client.config.client_side_validation && save_discount.nil?
        fail ArgumentError, "Missing the required parameter 'save_discount' when calling LeasesApi.update_lease_discount"
      end
      # resource path
      local_var_path = '/leases/discounts/{discountID}'.sub('{' + 'discountID' + '}', CGI.escape(discount_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_discount)

      # return_type
      return_type = opts[:debug_return_type] || 'Discount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.update_lease_discount",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#update_lease_discount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a lease journal entry (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates a lease journal entry.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param journalentry_id [Integer] Journal Entry ID
    # @param update_lease_journal_entry [UpdateLeaseJournalEntry] updateLeaseJournalEntry
    # @param [Hash] opts the optional parameters
    # @return [JournalEntry]
    def update_lease_journal_entry(journalentry_id, update_lease_journal_entry, opts = {})
      data, _status_code, _headers = update_lease_journal_entry_with_http_info(journalentry_id, update_lease_journal_entry, opts)
      data
    end

    # Update a lease journal entry (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates a lease journal entry.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param journalentry_id [Integer] Journal Entry ID
    # @param update_lease_journal_entry [UpdateLeaseJournalEntry] updateLeaseJournalEntry
    # @param [Hash] opts the optional parameters
    # @return [Array<(JournalEntry, Integer, Hash)>] JournalEntry data, response status code and response headers
    def update_lease_journal_entry_with_http_info(journalentry_id, update_lease_journal_entry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.update_lease_journal_entry ...'
      end
      # verify the required parameter 'journalentry_id' is set
      if @api_client.config.client_side_validation && journalentry_id.nil?
        fail ArgumentError, "Missing the required parameter 'journalentry_id' when calling LeasesApi.update_lease_journal_entry"
      end
      # verify the required parameter 'update_lease_journal_entry' is set
      if @api_client.config.client_side_validation && update_lease_journal_entry.nil?
        fail ArgumentError, "Missing the required parameter 'update_lease_journal_entry' when calling LeasesApi.update_lease_journal_entry"
      end
      # resource path
      local_var_path = '/leases/journalentries/{journalentryID}'.sub('{' + 'journalentryID' + '}', CGI.escape(journalentry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_lease_journal_entry)

      # return_type
      return_type = opts[:debug_return_type] || 'JournalEntry'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.update_lease_journal_entry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#update_lease_journal_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a lease payment (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates a lease payment.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param entity_id [Integer] Lease Payment ID
    # @param save_payment [SavePayment] savePayment
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def update_lease_payment(entity_id, save_payment, opts = {})
      data, _status_code, _headers = update_lease_payment_with_http_info(entity_id, save_payment, opts)
      data
    end

    # Update a lease payment (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates a lease payment.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param entity_id [Integer] Lease Payment ID
    # @param save_payment [SavePayment] savePayment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def update_lease_payment_with_http_info(entity_id, save_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.update_lease_payment ...'
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling LeasesApi.update_lease_payment"
      end
      # verify the required parameter 'save_payment' is set
      if @api_client.config.client_side_validation && save_payment.nil?
        fail ArgumentError, "Missing the required parameter 'save_payment' when calling LeasesApi.update_lease_payment"
      end
      # resource path
      local_var_path = '/leases/payments/{entityID}'.sub('{' + 'entityID' + '}', CGI.escape(entity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_payment)

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.update_lease_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#update_lease_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a lease refund (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Update an lease refund.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param refund_id [Integer] Refund ID
    # @param save_refund [SaveRefund] saveRefund
    # @param [Hash] opts the optional parameters
    # @return [Refund]
    def update_lease_refund(refund_id, save_refund, opts = {})
      data, _status_code, _headers = update_lease_refund_with_http_info(refund_id, save_refund, opts)
      data
    end

    # Update a lease refund (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Update an lease refund.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param refund_id [Integer] Refund ID
    # @param save_refund [SaveRefund] saveRefund
    # @param [Hash] opts the optional parameters
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def update_lease_refund_with_http_info(refund_id, save_refund, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.update_lease_refund ...'
      end
      # verify the required parameter 'refund_id' is set
      if @api_client.config.client_side_validation && refund_id.nil?
        fail ArgumentError, "Missing the required parameter 'refund_id' when calling LeasesApi.update_lease_refund"
      end
      # verify the required parameter 'save_refund' is set
      if @api_client.config.client_side_validation && save_refund.nil?
        fail ArgumentError, "Missing the required parameter 'save_refund' when calling LeasesApi.update_lease_refund"
      end
      # resource path
      local_var_path = '/leases/refunds/{refundID}'.sub('{' + 'refundID' + '}', CGI.escape(refund_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_refund)

      # return_type
      return_type = opts[:debug_return_type] || 'Refund'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.update_lease_refund",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#update_lease_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a lease
    # Updates an existing lease.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">LEASES</span> - <code>Write</code> 
    # @param lease_id [Integer] Lease ID
    # @param save_lease [SaveLease] lease
    # @param [Hash] opts the optional parameters
    # @return [Lease]
    def update_lease_using_put1(lease_id, save_lease, opts = {})
      data, _status_code, _headers = update_lease_using_put1_with_http_info(lease_id, save_lease, opts)
      data
    end

    # Update a lease
    # Updates an existing lease.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;LEASES&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param lease_id [Integer] Lease ID
    # @param save_lease [SaveLease] lease
    # @param [Hash] opts the optional parameters
    # @return [Array<(Lease, Integer, Hash)>] Lease data, response status code and response headers
    def update_lease_using_put1_with_http_info(lease_id, save_lease, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeasesApi.update_lease_using_put1 ...'
      end
      # verify the required parameter 'lease_id' is set
      if @api_client.config.client_side_validation && lease_id.nil?
        fail ArgumentError, "Missing the required parameter 'lease_id' when calling LeasesApi.update_lease_using_put1"
      end
      # verify the required parameter 'save_lease' is set
      if @api_client.config.client_side_validation && save_lease.nil?
        fail ArgumentError, "Missing the required parameter 'save_lease' when calling LeasesApi.update_lease_using_put1"
      end
      # resource path
      local_var_path = '/leases/{leaseId}'.sub('{' + 'leaseId' + '}', CGI.escape(lease_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_lease)

      # return_type
      return_type = opts[:debug_return_type] || 'Lease'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"LeasesApi.update_lease_using_put1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeasesApi#update_lease_using_put1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
