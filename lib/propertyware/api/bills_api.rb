=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Propertyware
  class BillsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a bill
    # Creates a bill.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Write</code> 
    # @param save_bill [SaveBill] saveBill
    # @param [Hash] opts the optional parameters
    # @return [Bill]
    def create_bill(save_bill, opts = {})
      data, _status_code, _headers = create_bill_with_http_info(save_bill, opts)
      data
    end

    # Create a bill
    # Creates a bill.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BILLS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_bill [SaveBill] saveBill
    # @param [Hash] opts the optional parameters
    # @return [Array<(Bill, Integer, Hash)>] Bill data, response status code and response headers
    def create_bill_with_http_info(save_bill, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.create_bill ...'
      end
      # verify the required parameter 'save_bill' is set
      if @api_client.config.client_side_validation && save_bill.nil?
        fail ArgumentError, "Missing the required parameter 'save_bill' when calling BillsApi.create_bill"
      end
      # resource path
      local_var_path = '/bills'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_bill)

      # return_type
      return_type = opts[:debug_return_type] || 'Bill'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.create_bill",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#create_bill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Bill Payment (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Create a Bill Payment<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code> 
    # @param save_bill_payment [SaveBillPayment] saveBillPayment
    # @param [Hash] opts the optional parameters
    # @return [BillPayment]
    def create_bill_payment(save_bill_payment, opts = {})
      data, _status_code, _headers = create_bill_payment_with_http_info(save_bill_payment, opts)
      data
    end

    # Create a Bill Payment (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Create a Bill Payment&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_bill_payment [SaveBillPayment] saveBillPayment
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillPayment, Integer, Hash)>] BillPayment data, response status code and response headers
    def create_bill_payment_with_http_info(save_bill_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.create_bill_payment ...'
      end
      # verify the required parameter 'save_bill_payment' is set
      if @api_client.config.client_side_validation && save_bill_payment.nil?
        fail ArgumentError, "Missing the required parameter 'save_bill_payment' when calling BillsApi.create_bill_payment"
      end
      # resource path
      local_var_path = '/bills/payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_bill_payment)

      # return_type
      return_type = opts[:debug_return_type] || 'BillPayment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.create_bill_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#create_bill_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create bill payments in bulk (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates bill payments in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code> 
    # @param save_bill_payment [Array<SaveBillPayment>] saveBillPayment
    # @param [Hash] opts the optional parameters
    # @return [Array<RESTAPIBulkSuccessResponse>]
    def create_bill_payments_using_post1(save_bill_payment, opts = {})
      data, _status_code, _headers = create_bill_payments_using_post1_with_http_info(save_bill_payment, opts)
      data
    end

    # Create bill payments in bulk (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates bill payments in bulk.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_bill_payment [Array<SaveBillPayment>] saveBillPayment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RESTAPIBulkSuccessResponse>, Integer, Hash)>] Array<RESTAPIBulkSuccessResponse> data, response status code and response headers
    def create_bill_payments_using_post1_with_http_info(save_bill_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.create_bill_payments_using_post1 ...'
      end
      # verify the required parameter 'save_bill_payment' is set
      if @api_client.config.client_side_validation && save_bill_payment.nil?
        fail ArgumentError, "Missing the required parameter 'save_bill_payment' when calling BillsApi.create_bill_payments_using_post1"
      end
      # resource path
      local_var_path = '/bills/payments/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_bill_payment)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RESTAPIBulkSuccessResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.create_bill_payments_using_post1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#create_bill_payments_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create bills in bulk
    # Creates bills in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Write</code> 
    # @param save_bill [Array<SaveBill>] saveBill
    # @param [Hash] opts the optional parameters
    # @return [Array<RESTAPIBulkSuccessResponse>]
    def create_bills(save_bill, opts = {})
      data, _status_code, _headers = create_bills_with_http_info(save_bill, opts)
      data
    end

    # Create bills in bulk
    # Creates bills in bulk.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BILLS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_bill [Array<SaveBill>] saveBill
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RESTAPIBulkSuccessResponse>, Integer, Hash)>] Array<RESTAPIBulkSuccessResponse> data, response status code and response headers
    def create_bills_with_http_info(save_bill, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.create_bills ...'
      end
      # verify the required parameter 'save_bill' is set
      if @api_client.config.client_side_validation && save_bill.nil?
        fail ArgumentError, "Missing the required parameter 'save_bill' when calling BillsApi.create_bills"
      end
      # resource path
      local_var_path = '/bills/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_bill)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RESTAPIBulkSuccessResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.create_bills",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#create_bills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a credit
    # Creates a credit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Write</code> 
    # @param save_credit [SaveCredit] saveCredit
    # @param [Hash] opts the optional parameters
    # @return [Bill]
    def create_credit(save_credit, opts = {})
      data, _status_code, _headers = create_credit_with_http_info(save_credit, opts)
      data
    end

    # Create a credit
    # Creates a credit.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BILLS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_credit [SaveCredit] saveCredit
    # @param [Hash] opts the optional parameters
    # @return [Array<(Bill, Integer, Hash)>] Bill data, response status code and response headers
    def create_credit_with_http_info(save_credit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.create_credit ...'
      end
      # verify the required parameter 'save_credit' is set
      if @api_client.config.client_side_validation && save_credit.nil?
        fail ArgumentError, "Missing the required parameter 'save_credit' when calling BillsApi.create_credit"
      end
      # resource path
      local_var_path = '/bills/credit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_credit)

      # return_type
      return_type = opts[:debug_return_type] || 'Bill'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.create_credit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#create_credit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Vendor check (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Creates a Vendor check.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code> 
    # @param save_check [SaveCheck] saveCheck
    # @param [Hash] opts the optional parameters
    # @return [Check]
    def create_vendor_check(save_check, opts = {})
      data, _status_code, _headers = create_vendor_check_with_http_info(save_check, opts)
      data
    end

    # Create a Vendor check (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Creates a Vendor check.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_check [SaveCheck] saveCheck
    # @param [Hash] opts the optional parameters
    # @return [Array<(Check, Integer, Hash)>] Check data, response status code and response headers
    def create_vendor_check_with_http_info(save_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.create_vendor_check ...'
      end
      # verify the required parameter 'save_check' is set
      if @api_client.config.client_side_validation && save_check.nil?
        fail ArgumentError, "Missing the required parameter 'save_check' when calling BillsApi.create_vendor_check"
      end
      # resource path
      local_var_path = '/bills/vendorchecks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_check)

      # return_type
      return_type = opts[:debug_return_type] || 'Check'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.create_vendor_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#create_vendor_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Bill (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Delete a Bill.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Delete</code> 
    # @param bill_id [Integer] Bill ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def delete_bill(bill_id, opts = {})
      data, _status_code, _headers = delete_bill_with_http_info(bill_id, opts)
      data
    end

    # Delete a Bill (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Delete a Bill.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BILLS&lt;/span&gt; - &lt;code&gt;Delete&lt;/code&gt; 
    # @param bill_id [Integer] Bill ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def delete_bill_with_http_info(bill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.delete_bill ...'
      end
      # verify the required parameter 'bill_id' is set
      if @api_client.config.client_side_validation && bill_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_id' when calling BillsApi.delete_bill"
      end
      # resource path
      local_var_path = '/bills/{billID}'.sub('{' + 'billID' + '}', CGI.escape(bill_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.delete_bill",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#delete_bill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a bill
    # Retrieves a specific bill.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Read</code> 
    # @param bill_id [Integer] Bill ID
    # @param [Hash] opts the optional parameters
    # @return [Bill]
    def get_bill(bill_id, opts = {})
      data, _status_code, _headers = get_bill_with_http_info(bill_id, opts)
      data
    end

    # Retrieve a bill
    # Retrieves a specific bill.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BILLS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param bill_id [Integer] Bill ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Bill, Integer, Hash)>] Bill data, response status code and response headers
    def get_bill_with_http_info(bill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.get_bill ...'
      end
      # verify the required parameter 'bill_id' is set
      if @api_client.config.client_side_validation && bill_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_id' when calling BillsApi.get_bill"
      end
      # resource path
      local_var_path = '/bills/{billID}'.sub('{' + 'billID' + '}', CGI.escape(bill_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Bill'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.get_bill",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#get_bill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a bill payment
    # Retrieves a specific bill payment.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Read</code> 
    # @param bill_payment_id [Integer] Bill Payment ID
    # @param [Hash] opts the optional parameters
    # @return [BillPayment]
    def get_bill_payment(bill_payment_id, opts = {})
      data, _status_code, _headers = get_bill_payment_with_http_info(bill_payment_id, opts)
      data
    end

    # Retrieve a bill payment
    # Retrieves a specific bill payment.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BILLS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param bill_payment_id [Integer] Bill Payment ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillPayment, Integer, Hash)>] BillPayment data, response status code and response headers
    def get_bill_payment_with_http_info(bill_payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.get_bill_payment ...'
      end
      # verify the required parameter 'bill_payment_id' is set
      if @api_client.config.client_side_validation && bill_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_payment_id' when calling BillsApi.get_bill_payment"
      end
      # resource path
      local_var_path = '/bills/payments/{billPaymentID}'.sub('{' + 'billPaymentID' + '}', CGI.escape(bill_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillPayment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.get_bill_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#get_bill_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all bill payments
    # Retrieves a list of bill payments.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>vendorid</code>, <code>lastmodifieddatetime</code>, <code>paymentdate</code>, <code>checknumber</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :vendor_id Filters results to bills associated with a specific vendor.
    # @option opts [Integer] :payment_gl_account_id Filters results to bills associated with a specific payment general ledger account.
    # @option opts [Date] :payment_date_start Filters results to any payment with a date on or after to the date specified.
    # @option opts [Date] :payment_date_end Filters results to any payment with a date on or prior to the date specified.
    # @return [Array<BillPayment>]
    def get_bill_payments(opts = {})
      data, _status_code, _headers = get_bill_payments_with_http_info(opts)
      data
    end

    # Retrieve all bill payments
    # Retrieves a list of bill payments.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BILLS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;vendorid&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;paymentdate&lt;/code&gt;, &lt;code&gt;checknumber&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :vendor_id Filters results to bills associated with a specific vendor.
    # @option opts [Integer] :payment_gl_account_id Filters results to bills associated with a specific payment general ledger account.
    # @option opts [Date] :payment_date_start Filters results to any payment with a date on or after to the date specified.
    # @option opts [Date] :payment_date_end Filters results to any payment with a date on or prior to the date specified.
    # @return [Array<(Array<BillPayment>, Integer, Hash)>] Array<BillPayment> data, response status code and response headers
    def get_bill_payments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.get_bill_payments ...'
      end
      # resource path
      local_var_path = '/bills/payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'vendorID'] = opts[:'vendor_id'] if !opts[:'vendor_id'].nil?
      query_params[:'paymentGLAccountID'] = opts[:'payment_gl_account_id'] if !opts[:'payment_gl_account_id'].nil?
      query_params[:'paymentDateStart'] = opts[:'payment_date_start'] if !opts[:'payment_date_start'].nil?
      query_params[:'paymentDateEnd'] = opts[:'payment_date_end'] if !opts[:'payment_date_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BillPayment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.get_bill_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#get_bill_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all bills
    # Retrieves a list of bills.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>billdate</code>, <code>billnumber</code>, <code>lastmodifieddatetime</code>, <code>duedate</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :portfolio_id Filters results to bills associated with a specific portfolio.
    # @option opts [Integer] :vendor_id Filters results to bills associated with a specific vendor.
    # @option opts [Integer] :work_order_id Filters results to bills associated with a specific work order.
    # @option opts [Integer] :markup_gl_account_id Filters results to bills associated with a specific markup general ledger account.
    # @option opts [Boolean] :paid Filters results by the bill&#39;s paid status. If no status is specified, bills with any status will be returned.
    # @option opts [Date] :bill_date_start Filters results to any bill with a billing date on or after to the date specified.
    # @option opts [Date] :bill_date_end Filters results to any bill with a billing date on or prior to the date specified.
    # @option opts [Date] :due_date_start Filters results to any bill with a due date on or after to the date specified.
    # @option opts [Date] :due_date_end Filters results to any bill with a due date on or prior to the date specified.
    # @return [Array<Bill>]
    def get_bills(opts = {})
      data, _status_code, _headers = get_bills_with_http_info(opts)
      data
    end

    # Retrieve all bills
    # Retrieves a list of bills.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BILLS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;billdate&lt;/code&gt;, &lt;code&gt;billnumber&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;duedate&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Integer] :portfolio_id Filters results to bills associated with a specific portfolio.
    # @option opts [Integer] :vendor_id Filters results to bills associated with a specific vendor.
    # @option opts [Integer] :work_order_id Filters results to bills associated with a specific work order.
    # @option opts [Integer] :markup_gl_account_id Filters results to bills associated with a specific markup general ledger account.
    # @option opts [Boolean] :paid Filters results by the bill&#39;s paid status. If no status is specified, bills with any status will be returned.
    # @option opts [Date] :bill_date_start Filters results to any bill with a billing date on or after to the date specified.
    # @option opts [Date] :bill_date_end Filters results to any bill with a billing date on or prior to the date specified.
    # @option opts [Date] :due_date_start Filters results to any bill with a due date on or after to the date specified.
    # @option opts [Date] :due_date_end Filters results to any bill with a due date on or prior to the date specified.
    # @return [Array<(Array<Bill>, Integer, Hash)>] Array<Bill> data, response status code and response headers
    def get_bills_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.get_bills ...'
      end
      # resource path
      local_var_path = '/bills'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'vendorID'] = opts[:'vendor_id'] if !opts[:'vendor_id'].nil?
      query_params[:'workOrderID'] = opts[:'work_order_id'] if !opts[:'work_order_id'].nil?
      query_params[:'markupGLAccountID'] = opts[:'markup_gl_account_id'] if !opts[:'markup_gl_account_id'].nil?
      query_params[:'paid'] = opts[:'paid'] if !opts[:'paid'].nil?
      query_params[:'billDateStart'] = opts[:'bill_date_start'] if !opts[:'bill_date_start'].nil?
      query_params[:'billDateEnd'] = opts[:'bill_date_end'] if !opts[:'bill_date_end'].nil?
      query_params[:'dueDateStart'] = opts[:'due_date_start'] if !opts[:'due_date_start'].nil?
      query_params[:'dueDateEnd'] = opts[:'due_date_end'] if !opts[:'due_date_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Bill>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.get_bills",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#get_bills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all Vendor checks (BETA)
    # <p class=\"betaWarning\"><b>Note: </b>This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.</p> Retrieves a list of Vendor checks.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>postdate</code>, <code>createddate</code>, <code>vendorid</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :vendor_id Filters results to transactions associated with a specific vendor.
    # @return [Array<Check>]
    def get_vendor_checks(opts = {})
      data, _status_code, _headers = get_vendor_checks_with_http_info(opts)
      data
    end

    # Retrieve all Vendor checks (BETA)
    # &lt;p class&#x3D;\&quot;betaWarning\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;This operation is still in beta and might be subject to breaking changes. Production integrations should be avoided at this stage.&lt;/p&gt; Retrieves a list of Vendor checks.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;postdate&lt;/code&gt;, &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;vendorid&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Date] :post_date_start Filters results to any transaction with a start date on or after the date specified.
    # @option opts [Date] :post_date_end Filters results to any transaction with a start date on or prior to the date specified.
    # @option opts [Integer] :portfolio_id Filters results associated with a specific portfolio.
    # @option opts [Integer] :vendor_id Filters results to transactions associated with a specific vendor.
    # @return [Array<(Array<Check>, Integer, Hash)>] Array<Check> data, response status code and response headers
    def get_vendor_checks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.get_vendor_checks ...'
      end
      # resource path
      local_var_path = '/bills/vendorchecks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'postDateStart'] = opts[:'post_date_start'] if !opts[:'post_date_start'].nil?
      query_params[:'postDateEnd'] = opts[:'post_date_end'] if !opts[:'post_date_end'].nil?
      query_params[:'portfolioID'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'vendorID'] = opts[:'vendor_id'] if !opts[:'vendor_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Check>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.get_vendor_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#get_vendor_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Bill
    # Update an existing bill.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Write</code> 
    # @param bill_id [Integer] Bill ID
    # @param save_bill [SaveBill] saveBill
    # @param [Hash] opts the optional parameters
    # @return [Bill]
    def update_bill(bill_id, save_bill, opts = {})
      data, _status_code, _headers = update_bill_with_http_info(bill_id, save_bill, opts)
      data
    end

    # Update a Bill
    # Update an existing bill.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BILLS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param bill_id [Integer] Bill ID
    # @param save_bill [SaveBill] saveBill
    # @param [Hash] opts the optional parameters
    # @return [Array<(Bill, Integer, Hash)>] Bill data, response status code and response headers
    def update_bill_with_http_info(bill_id, save_bill, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.update_bill ...'
      end
      # verify the required parameter 'bill_id' is set
      if @api_client.config.client_side_validation && bill_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_id' when calling BillsApi.update_bill"
      end
      # verify the required parameter 'save_bill' is set
      if @api_client.config.client_side_validation && save_bill.nil?
        fail ArgumentError, "Missing the required parameter 'save_bill' when calling BillsApi.update_bill"
      end
      # resource path
      local_var_path = '/bills/{billId}'.sub('{' + 'billId' + '}', CGI.escape(bill_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_bill)

      # return_type
      return_type = opts[:debug_return_type] || 'Bill'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.update_bill",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#update_bill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Bill Payment (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Update a Bill Payment<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code> 
    # @param bill_payment_id [Integer] Bill Payment ID
    # @param save_bill_payment [SaveBillPayment] saveBillPayment
    # @param [Hash] opts the optional parameters
    # @return [BillPayment]
    def update_bill_payment(bill_payment_id, save_bill_payment, opts = {})
      data, _status_code, _headers = update_bill_payment_with_http_info(bill_payment_id, save_bill_payment, opts)
      data
    end

    # Update a Bill Payment (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Update a Bill Payment&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param bill_payment_id [Integer] Bill Payment ID
    # @param save_bill_payment [SaveBillPayment] saveBillPayment
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillPayment, Integer, Hash)>] BillPayment data, response status code and response headers
    def update_bill_payment_with_http_info(bill_payment_id, save_bill_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.update_bill_payment ...'
      end
      # verify the required parameter 'bill_payment_id' is set
      if @api_client.config.client_side_validation && bill_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_payment_id' when calling BillsApi.update_bill_payment"
      end
      # verify the required parameter 'save_bill_payment' is set
      if @api_client.config.client_side_validation && save_bill_payment.nil?
        fail ArgumentError, "Missing the required parameter 'save_bill_payment' when calling BillsApi.update_bill_payment"
      end
      # resource path
      local_var_path = '/bills/payment/{billPaymentID}'.sub('{' + 'billPaymentID' + '}', CGI.escape(bill_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_bill_payment)

      # return_type
      return_type = opts[:debug_return_type] || 'BillPayment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.update_bill_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#update_bill_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Credit
    # Update an existing Credit.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">BILLS</span> - <code>Write</code> 
    # @param credit_id [Integer] Credit ID
    # @param save_credit [SaveCredit] saveCredit
    # @param [Hash] opts the optional parameters
    # @return [Bill]
    def update_credit(credit_id, save_credit, opts = {})
      data, _status_code, _headers = update_credit_with_http_info(credit_id, save_credit, opts)
      data
    end

    # Update a Credit
    # Update an existing Credit.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;BILLS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param credit_id [Integer] Credit ID
    # @param save_credit [SaveCredit] saveCredit
    # @param [Hash] opts the optional parameters
    # @return [Array<(Bill, Integer, Hash)>] Bill data, response status code and response headers
    def update_credit_with_http_info(credit_id, save_credit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.update_credit ...'
      end
      # verify the required parameter 'credit_id' is set
      if @api_client.config.client_side_validation && credit_id.nil?
        fail ArgumentError, "Missing the required parameter 'credit_id' when calling BillsApi.update_credit"
      end
      # verify the required parameter 'save_credit' is set
      if @api_client.config.client_side_validation && save_credit.nil?
        fail ArgumentError, "Missing the required parameter 'save_credit' when calling BillsApi.update_credit"
      end
      # resource path
      local_var_path = '/bills/credit/{creditID}'.sub('{' + 'creditID' + '}', CGI.escape(credit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_credit)

      # return_type
      return_type = opts[:debug_return_type] || 'Bill'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.update_credit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#update_credit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Vendor check (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Update an existing Vendor check.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code> 
    # @param vendor_check_id [Integer] Vendor Check ID
    # @param save_check [SaveCheck] saveCheck
    # @param [Hash] opts the optional parameters
    # @return [Check]
    def update_vendor_check(vendor_check_id, save_check, opts = {})
      data, _status_code, _headers = update_vendor_check_with_http_info(vendor_check_id, save_check, opts)
      data
    end

    # Update a Vendor check (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Update an existing Vendor check.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param vendor_check_id [Integer] Vendor Check ID
    # @param save_check [SaveCheck] saveCheck
    # @param [Hash] opts the optional parameters
    # @return [Array<(Check, Integer, Hash)>] Check data, response status code and response headers
    def update_vendor_check_with_http_info(vendor_check_id, save_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillsApi.update_vendor_check ...'
      end
      # verify the required parameter 'vendor_check_id' is set
      if @api_client.config.client_side_validation && vendor_check_id.nil?
        fail ArgumentError, "Missing the required parameter 'vendor_check_id' when calling BillsApi.update_vendor_check"
      end
      # verify the required parameter 'save_check' is set
      if @api_client.config.client_side_validation && save_check.nil?
        fail ArgumentError, "Missing the required parameter 'save_check' when calling BillsApi.update_vendor_check"
      end
      # resource path
      local_var_path = '/bills/vendorchecks/{vendorCheckID}'.sub('{' + 'vendorCheckID' + '}', CGI.escape(vendor_check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_check)

      # return_type
      return_type = opts[:debug_return_type] || 'Check'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BillsApi.update_vendor_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillsApi#update_vendor_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
