=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Propertyware
  class VendorsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a vendor
    # Creates a vendor.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code> 
    # @param save_vendor [SaveVendor] saveVendor
    # @param [Hash] opts the optional parameters
    # @return [Vendor]
    def create_vendor(save_vendor, opts = {})
      data, _status_code, _headers = create_vendor_with_http_info(save_vendor, opts)
      data
    end

    # Create a vendor
    # Creates a vendor.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_vendor [SaveVendor] saveVendor
    # @param [Hash] opts the optional parameters
    # @return [Array<(Vendor, Integer, Hash)>] Vendor data, response status code and response headers
    def create_vendor_with_http_info(save_vendor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VendorsApi.create_vendor ...'
      end
      # verify the required parameter 'save_vendor' is set
      if @api_client.config.client_side_validation && save_vendor.nil?
        fail ArgumentError, "Missing the required parameter 'save_vendor' when calling VendorsApi.create_vendor"
      end
      # resource path
      local_var_path = '/vendors'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_vendor)

      # return_type
      return_type = opts[:debug_return_type] || 'Vendor'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"VendorsApi.create_vendor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VendorsApi#create_vendor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Vendors in bulk
    # Creates Vendors in bulk.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code> 
    # @param save_vendor [Array<SaveVendor>] saveVendor
    # @param [Hash] opts the optional parameters
    # @return [Array<RESTAPIBulkSuccessResponse>]
    def create_vendors(save_vendor, opts = {})
      data, _status_code, _headers = create_vendors_with_http_info(save_vendor, opts)
      data
    end

    # Create Vendors in bulk
    # Creates Vendors in bulk.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_vendor [Array<SaveVendor>] saveVendor
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RESTAPIBulkSuccessResponse>, Integer, Hash)>] Array<RESTAPIBulkSuccessResponse> data, response status code and response headers
    def create_vendors_with_http_info(save_vendor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VendorsApi.create_vendors ...'
      end
      # verify the required parameter 'save_vendor' is set
      if @api_client.config.client_side_validation && save_vendor.nil?
        fail ArgumentError, "Missing the required parameter 'save_vendor' when calling VendorsApi.create_vendors"
      end
      # resource path
      local_var_path = '/vendors/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_vendor)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RESTAPIBulkSuccessResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"VendorsApi.create_vendors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VendorsApi#create_vendors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a vendor
    # Retrieves a specific vendor.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code> 
    # @param vendor_id [Integer] Vendor ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to true)
    # @return [Vendor]
    def get_vendor(vendor_id, opts = {})
      data, _status_code, _headers = get_vendor_with_http_info(vendor_id, opts)
      data
    end

    # Retrieve a vendor
    # Retrieves a specific vendor.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param vendor_id [Integer] Vendor ID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to true)
    # @return [Array<(Vendor, Integer, Hash)>] Vendor data, response status code and response headers
    def get_vendor_with_http_info(vendor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VendorsApi.get_vendor ...'
      end
      # verify the required parameter 'vendor_id' is set
      if @api_client.config.client_side_validation && vendor_id.nil?
        fail ArgumentError, "Missing the required parameter 'vendor_id' when calling VendorsApi.get_vendor"
      end
      # resource path
      local_var_path = '/vendors/{vendorID}'.sub('{' + 'vendorID' + '}', CGI.escape(vendor_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Vendor'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"VendorsApi.get_vendor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VendorsApi#get_vendor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve vendor GL account
    # Retrieves the default general ledger account of a vendor.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code> 
    # @param vendor_id [Integer] Vendor ID
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def get_vendor_account(vendor_id, opts = {})
      data, _status_code, _headers = get_vendor_account_with_http_info(vendor_id, opts)
      data
    end

    # Retrieve vendor GL account
    # Retrieves the default general ledger account of a vendor.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param vendor_id [Integer] Vendor ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def get_vendor_account_with_http_info(vendor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VendorsApi.get_vendor_account ...'
      end
      # verify the required parameter 'vendor_id' is set
      if @api_client.config.client_side_validation && vendor_id.nil?
        fail ArgumentError, "Missing the required parameter 'vendor_id' when calling VendorsApi.get_vendor_account"
      end
      # resource path
      local_var_path = '/vendors/{vendorID}/account'.sub('{' + 'vendorID' + '}', CGI.escape(vendor_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Account'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"VendorsApi.get_vendor_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VendorsApi#get_vendor_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a vendor conversation
    # Retrieves a specific vendor conversation.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code> 
    # @param vendor_id [Integer] Vendor ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def get_vendor_conversation(vendor_id, conversation_id, opts = {})
      data, _status_code, _headers = get_vendor_conversation_with_http_info(vendor_id, conversation_id, opts)
      data
    end

    # Retrieve a vendor conversation
    # Retrieves a specific vendor conversation.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; 
    # @param vendor_id [Integer] Vendor ID
    # @param conversation_id [Integer] Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Integer, Hash)>] Conversation data, response status code and response headers
    def get_vendor_conversation_with_http_info(vendor_id, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VendorsApi.get_vendor_conversation ...'
      end
      # verify the required parameter 'vendor_id' is set
      if @api_client.config.client_side_validation && vendor_id.nil?
        fail ArgumentError, "Missing the required parameter 'vendor_id' when calling VendorsApi.get_vendor_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling VendorsApi.get_vendor_conversation"
      end
      # resource path
      local_var_path = '/vendors/{vendorID}/conversations/{conversationID}'.sub('{' + 'vendorID' + '}', CGI.escape(vendor_id.to_s)).sub('{' + 'conversationID' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Conversation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"VendorsApi.get_vendor_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VendorsApi#get_vendor_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all vendor conversations
    # Retrieves all the conversations of a vendor.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param vendor_id [Integer] Vendor ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :type Filters results by the conversation type.
    # @return [Array<Conversation>]
    def get_vendor_conversations(vendor_id, opts = {})
      data, _status_code, _headers = get_vendor_conversations_with_http_info(vendor_id, opts)
      data
    end

    # Retrieve all vendor conversations
    # Retrieves all the conversations of a vendor.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param vendor_id [Integer] Vendor ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [String] :type Filters results by the conversation type.
    # @return [Array<(Array<Conversation>, Integer, Hash)>] Array<Conversation> data, response status code and response headers
    def get_vendor_conversations_with_http_info(vendor_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VendorsApi.get_vendor_conversations ...'
      end
      # verify the required parameter 'vendor_id' is set
      if @api_client.config.client_side_validation && vendor_id.nil?
        fail ArgumentError, "Missing the required parameter 'vendor_id' when calling VendorsApi.get_vendor_conversations"
      end
      allowable_values = ["MANAGEMENT_TEAM", "OWNER", "TENANT"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/vendors/{vendorID}/conversations'.sub('{' + 'vendorID' + '}', CGI.escape(vendor_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Conversation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"VendorsApi.get_vendor_conversations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VendorsApi#get_vendor_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all vendors
    # Retrieves a list of vendors.<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Read</code> <br/><br/><b>Sortable by:</b> <code>createddate</code>, <code>vendortype</code>, <code>lastmodifieddatetime</code>, <code>id</code>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Boolean] :active Filters results by the vendor&#39;s status. If no value is specified, vendors with any status will be returned.
    # @option opts [String] :type Filters results to units with a specific type.
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to false)
    # @return [Array<Vendor>]
    def get_vendors(opts = {})
      data, _status_code, _headers = get_vendors_with_http_info(opts)
      data
    end

    # Retrieve all vendors
    # Retrieves a list of vendors.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Read&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sortable by:&lt;/b&gt; &lt;code&gt;createddate&lt;/code&gt;, &lt;code&gt;vendortype&lt;/code&gt;, &lt;code&gt;lastmodifieddatetime&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The offset is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 500 and the default is 100. (default to 100)
    # @option opts [Time] :last_modified_date_time_start Filters results to any item modified on or after the date time specified. 
    # @option opts [Time] :last_modified_date_time_end Filters results to any item modified on or prior to the date time specified. 
    # @option opts [String] :orderby Indicates the field(s) and direction to sort the results in the response.
    # @option opts [Boolean] :active Filters results by the vendor&#39;s status. If no value is specified, vendors with any status will be returned.
    # @option opts [String] :type Filters results to units with a specific type.
    # @option opts [Boolean] :include_custom_fields includeCustomFields (default to false)
    # @return [Array<(Array<Vendor>, Integer, Hash)>] Array<Vendor> data, response status code and response headers
    def get_vendors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VendorsApi.get_vendors ...'
      end
      # resource path
      local_var_path = '/vendors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lastModifiedDateTimeStart'] = opts[:'last_modified_date_time_start'] if !opts[:'last_modified_date_time_start'].nil?
      query_params[:'lastModifiedDateTimeEnd'] = opts[:'last_modified_date_time_end'] if !opts[:'last_modified_date_time_end'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'includeCustomFields'] = opts[:'include_custom_fields'] if !opts[:'include_custom_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Vendor>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"VendorsApi.get_vendors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VendorsApi#get_vendors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a vendor custom fields (BETA)
    # <p class=\"betaError\"><b>Note: </b>Write access is only available to customers who have opted in to our beta program. Please reach out to support if you'd like to be included.</p> Updates an existing vendor custom fields<br/><br/><b>Required permission:</b><br/><span class=\"permissionBlock\">VENDORS</span> - <code>Write</code> 
    # @param save_custom_field [SaveCustomField] saveCustomField
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def update_vendor(save_custom_field, opts = {})
      data, _status_code, _headers = update_vendor_with_http_info(save_custom_field, opts)
      data
    end

    # Update a vendor custom fields (BETA)
    # &lt;p class&#x3D;\&quot;betaError\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Write access is only available to customers who have opted in to our beta program. Please reach out to support if you&#39;d like to be included.&lt;/p&gt; Updates an existing vendor custom fields&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Required permission:&lt;/b&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;VENDORS&lt;/span&gt; - &lt;code&gt;Write&lt;/code&gt; 
    # @param save_custom_field [SaveCustomField] saveCustomField
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Integer, Hash)>] ResponseEntity data, response status code and response headers
    def update_vendor_with_http_info(save_custom_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VendorsApi.update_vendor ...'
      end
      # verify the required parameter 'save_custom_field' is set
      if @api_client.config.client_side_validation && save_custom_field.nil?
        fail ArgumentError, "Missing the required parameter 'save_custom_field' when calling VendorsApi.update_vendor"
      end
      # resource path
      local_var_path = '/vendors/customfields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(save_custom_field)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseEntity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['organizationId', 'clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"VendorsApi.update_vendor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VendorsApi#update_vendor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
