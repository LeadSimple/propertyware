=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # SaveBuilding
  class SaveBuilding
    # Abbreviation of Building.
    attr_accessor :abbreviation

    attr_accessor :address

    # Allocation method.
    attr_accessor :allocation_method

    # Date the building is available for leasing.
    attr_accessor :available_date

    # Base Year.
    attr_accessor :base_year

    # Base Year Operating Expenses.
    attr_accessor :base_year_operating_expenses

    # Base Year Property Insurance.
    attr_accessor :base_year_property_insurance

    # Base Year Property Taxes.
    attr_accessor :base_year_property_taxes

    # Building category.
    attr_accessor :category

    # Indicates number of units in the building. Applicable for multi unit building creation and updating a single family building to multi unit building
    attr_accessor :count_unit

    # if we selected naming as \"Custom\" then enter the customer naming value 
    attr_accessor :custom_naming

    # Marketing description.
    attr_accessor :description

    # Featured Rental
    attr_accessor :featured_for_rent

    # Floor number.
    attr_accessor :floor_number

    # End date of the property contract.
    attr_accessor :management_contract_end_date

    # Start date of the property contract.
    attr_accessor :management_contract_start_date

    # Indicates management fee type of a building. This field is deprecated and should not be used. Instead, use the new field 'managementFeesType'.  
    attr_accessor :management_fee_type

    # Indicates management fee type of a building.
    attr_accessor :management_fees_type

    # Indicates management flat fee.
    attr_accessor :management_flat_fee

    # Marketing name.
    attr_accessor :marketing_name

    # Move in Window must be with in these days given here 1 to 30 and 45,60,75,90
    attr_accessor :move_in_days

    # Name of the building.
    attr_accessor :name

    # Unit naming
    attr_accessor :naming

    # Neighborhood.
    attr_accessor :neighborhood

    # Number of Bath rooms in the Building. Applicable for single family buildings
    attr_accessor :number_bathrooms

    # Number of bedrooms in the building. Applicable for single family buildings
    attr_accessor :number_bedrooms

    # Number of floors.
    attr_accessor :number_floors

    # Unit creation format.
    attr_accessor :numbered

    # Other tenant charges.
    attr_accessor :other_tenant_charges

    # Parcel number.
    attr_accessor :parcel_number

    # Pets allowed.
    attr_accessor :pets_allowed

    # ID of the portfolio associated with this building.
    attr_accessor :portfolio_id

    # Marketing posting title.
    attr_accessor :posting_title

    # Property type.
    attr_accessor :property_type

    # Published for rent.
    attr_accessor :published_for_rent

    # Ready to Lease
    attr_accessor :ready

    # This is required field. False value indicates Multifamily building, True value indicates single family building.
    attr_accessor :rentable

    # Search tag name.
    attr_accessor :search_tag

    # Marketing short description.
    attr_accessor :short_description

    # Syndicate
    attr_accessor :syndicate

    # Target deposit amount. Applicable for single family buildings
    attr_accessor :target_deposit

    # Market rent for the building. Applicable for single family buildings
    attr_accessor :target_rent

    # Property target rent units. Applicable for single family buildings
    attr_accessor :target_rent_units

    # Building area.
    attr_accessor :total_area

    # Indicates Building type like Office, Industrial, Retail, Healthcare, Government, Airport, Garage/Parking, Apartment Building, Duplex / Triplex, Mobile Home / RV Community etc.
    attr_accessor :type

    # Indicates Unit type like Condo,Lower Unit,Side By Side Duplex,Upper Unit,Townhome,Land,Commercial etc.
    attr_accessor :unit_type

    # Building built year.
    attr_accessor :year_built

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'abbreviation' => :'abbreviation',
        :'address' => :'address',
        :'allocation_method' => :'allocationMethod',
        :'available_date' => :'availableDate',
        :'base_year' => :'baseYear',
        :'base_year_operating_expenses' => :'baseYearOperatingExpenses',
        :'base_year_property_insurance' => :'baseYearPropertyInsurance',
        :'base_year_property_taxes' => :'baseYearPropertyTaxes',
        :'category' => :'category',
        :'count_unit' => :'countUnit',
        :'custom_naming' => :'customNaming',
        :'description' => :'description',
        :'featured_for_rent' => :'featuredForRent',
        :'floor_number' => :'floorNumber',
        :'management_contract_end_date' => :'managementContractEndDate',
        :'management_contract_start_date' => :'managementContractStartDate',
        :'management_fee_type' => :'managementFeeType',
        :'management_fees_type' => :'managementFeesType',
        :'management_flat_fee' => :'managementFlatFee',
        :'marketing_name' => :'marketingName',
        :'move_in_days' => :'moveInDays',
        :'name' => :'name',
        :'naming' => :'naming',
        :'neighborhood' => :'neighborhood',
        :'number_bathrooms' => :'numberBathrooms',
        :'number_bedrooms' => :'numberBedrooms',
        :'number_floors' => :'numberFloors',
        :'numbered' => :'numbered',
        :'other_tenant_charges' => :'otherTenantCharges',
        :'parcel_number' => :'parcelNumber',
        :'pets_allowed' => :'petsAllowed',
        :'portfolio_id' => :'portfolioID',
        :'posting_title' => :'postingTitle',
        :'property_type' => :'propertyType',
        :'published_for_rent' => :'publishedForRent',
        :'ready' => :'ready',
        :'rentable' => :'rentable',
        :'search_tag' => :'searchTag',
        :'short_description' => :'shortDescription',
        :'syndicate' => :'syndicate',
        :'target_deposit' => :'targetDeposit',
        :'target_rent' => :'targetRent',
        :'target_rent_units' => :'targetRentUnits',
        :'total_area' => :'totalArea',
        :'type' => :'type',
        :'unit_type' => :'unitType',
        :'year_built' => :'yearBuilt'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'abbreviation' => :'String',
        :'address' => :'SaveAddress',
        :'allocation_method' => :'String',
        :'available_date' => :'Date',
        :'base_year' => :'Integer',
        :'base_year_operating_expenses' => :'String',
        :'base_year_property_insurance' => :'String',
        :'base_year_property_taxes' => :'String',
        :'category' => :'String',
        :'count_unit' => :'Integer',
        :'custom_naming' => :'String',
        :'description' => :'String',
        :'featured_for_rent' => :'Boolean',
        :'floor_number' => :'Integer',
        :'management_contract_end_date' => :'Date',
        :'management_contract_start_date' => :'Date',
        :'management_fee_type' => :'String',
        :'management_fees_type' => :'String',
        :'management_flat_fee' => :'Float',
        :'marketing_name' => :'String',
        :'move_in_days' => :'Integer',
        :'name' => :'String',
        :'naming' => :'String',
        :'neighborhood' => :'String',
        :'number_bathrooms' => :'Float',
        :'number_bedrooms' => :'Integer',
        :'number_floors' => :'Integer',
        :'numbered' => :'String',
        :'other_tenant_charges' => :'String',
        :'parcel_number' => :'String',
        :'pets_allowed' => :'Boolean',
        :'portfolio_id' => :'Integer',
        :'posting_title' => :'String',
        :'property_type' => :'String',
        :'published_for_rent' => :'String',
        :'ready' => :'Boolean',
        :'rentable' => :'Boolean',
        :'search_tag' => :'String',
        :'short_description' => :'String',
        :'syndicate' => :'Boolean',
        :'target_deposit' => :'String',
        :'target_rent' => :'Float',
        :'target_rent_units' => :'String',
        :'total_area' => :'Float',
        :'type' => :'String',
        :'unit_type' => :'String',
        :'year_built' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::SaveBuilding` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::SaveBuilding`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'abbreviation')
        self.abbreviation = attributes[:'abbreviation']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'allocation_method')
        self.allocation_method = attributes[:'allocation_method']
      end

      if attributes.key?(:'available_date')
        self.available_date = attributes[:'available_date']
      end

      if attributes.key?(:'base_year')
        self.base_year = attributes[:'base_year']
      end

      if attributes.key?(:'base_year_operating_expenses')
        self.base_year_operating_expenses = attributes[:'base_year_operating_expenses']
      end

      if attributes.key?(:'base_year_property_insurance')
        self.base_year_property_insurance = attributes[:'base_year_property_insurance']
      end

      if attributes.key?(:'base_year_property_taxes')
        self.base_year_property_taxes = attributes[:'base_year_property_taxes']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'count_unit')
        self.count_unit = attributes[:'count_unit']
      end

      if attributes.key?(:'custom_naming')
        self.custom_naming = attributes[:'custom_naming']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'featured_for_rent')
        self.featured_for_rent = attributes[:'featured_for_rent']
      end

      if attributes.key?(:'floor_number')
        self.floor_number = attributes[:'floor_number']
      end

      if attributes.key?(:'management_contract_end_date')
        self.management_contract_end_date = attributes[:'management_contract_end_date']
      end

      if attributes.key?(:'management_contract_start_date')
        self.management_contract_start_date = attributes[:'management_contract_start_date']
      end

      if attributes.key?(:'management_fee_type')
        self.management_fee_type = attributes[:'management_fee_type']
      end

      if attributes.key?(:'management_fees_type')
        self.management_fees_type = attributes[:'management_fees_type']
      end

      if attributes.key?(:'management_flat_fee')
        self.management_flat_fee = attributes[:'management_flat_fee']
      end

      if attributes.key?(:'marketing_name')
        self.marketing_name = attributes[:'marketing_name']
      end

      if attributes.key?(:'move_in_days')
        self.move_in_days = attributes[:'move_in_days']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'naming')
        self.naming = attributes[:'naming']
      end

      if attributes.key?(:'neighborhood')
        self.neighborhood = attributes[:'neighborhood']
      end

      if attributes.key?(:'number_bathrooms')
        self.number_bathrooms = attributes[:'number_bathrooms']
      end

      if attributes.key?(:'number_bedrooms')
        self.number_bedrooms = attributes[:'number_bedrooms']
      end

      if attributes.key?(:'number_floors')
        self.number_floors = attributes[:'number_floors']
      end

      if attributes.key?(:'numbered')
        self.numbered = attributes[:'numbered']
      end

      if attributes.key?(:'other_tenant_charges')
        self.other_tenant_charges = attributes[:'other_tenant_charges']
      end

      if attributes.key?(:'parcel_number')
        self.parcel_number = attributes[:'parcel_number']
      end

      if attributes.key?(:'pets_allowed')
        self.pets_allowed = attributes[:'pets_allowed']
      end

      if attributes.key?(:'portfolio_id')
        self.portfolio_id = attributes[:'portfolio_id']
      end

      if attributes.key?(:'posting_title')
        self.posting_title = attributes[:'posting_title']
      end

      if attributes.key?(:'property_type')
        self.property_type = attributes[:'property_type']
      end

      if attributes.key?(:'published_for_rent')
        self.published_for_rent = attributes[:'published_for_rent']
      end

      if attributes.key?(:'ready')
        self.ready = attributes[:'ready']
      end

      if attributes.key?(:'rentable')
        self.rentable = attributes[:'rentable']
      end

      if attributes.key?(:'search_tag')
        self.search_tag = attributes[:'search_tag']
      end

      if attributes.key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.key?(:'syndicate')
        self.syndicate = attributes[:'syndicate']
      end

      if attributes.key?(:'target_deposit')
        self.target_deposit = attributes[:'target_deposit']
      end

      if attributes.key?(:'target_rent')
        self.target_rent = attributes[:'target_rent']
      end

      if attributes.key?(:'target_rent_units')
        self.target_rent_units = attributes[:'target_rent_units']
      end

      if attributes.key?(:'total_area')
        self.total_area = attributes[:'total_area']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'unit_type')
        self.unit_type = attributes[:'unit_type']
      end

      if attributes.key?(:'year_built')
        self.year_built = attributes[:'year_built']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @abbreviation.nil?
        invalid_properties.push('invalid value for "abbreviation", abbreviation cannot be nil.')
      end

      if @abbreviation.to_s.length > 12
        invalid_properties.push('invalid value for "abbreviation", the character length must be smaller than or equal to 12.')
      end

      if @abbreviation.to_s.length < 1
        invalid_properties.push('invalid value for "abbreviation", the character length must be great than or equal to 1.')
      end

      if @category.nil?
        invalid_properties.push('invalid value for "category", category cannot be nil.')
      end

      if @count_unit.nil?
        invalid_properties.push('invalid value for "count_unit", count_unit cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 100
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 100.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if !@neighborhood.nil? && @neighborhood.to_s.length > 30
        invalid_properties.push('invalid value for "neighborhood", the character length must be smaller than or equal to 30.')
      end

      if !@neighborhood.nil? && @neighborhood.to_s.length < 0
        invalid_properties.push('invalid value for "neighborhood", the character length must be great than or equal to 0.')
      end

      if !@number_bathrooms.nil? && @number_bathrooms > 10
        invalid_properties.push('invalid value for "number_bathrooms", must be smaller than or equal to 10.')
      end

      if !@number_bathrooms.nil? && @number_bathrooms < 0
        invalid_properties.push('invalid value for "number_bathrooms", must be greater than or equal to 0.')
      end

      if !@number_bedrooms.nil? && @number_bedrooms > 20
        invalid_properties.push('invalid value for "number_bedrooms", must be smaller than or equal to 20.')
      end

      if !@number_bedrooms.nil? && @number_bedrooms < 0
        invalid_properties.push('invalid value for "number_bedrooms", must be greater than or equal to 0.')
      end

      if @portfolio_id.nil?
        invalid_properties.push('invalid value for "portfolio_id", portfolio_id cannot be nil.')
      end

      if @property_type.nil?
        invalid_properties.push('invalid value for "property_type", property_type cannot be nil.')
      end

      if @rentable.nil?
        invalid_properties.push('invalid value for "rentable", rentable cannot be nil.')
      end

      if !@search_tag.nil? && @search_tag.to_s.length > 25
        invalid_properties.push('invalid value for "search_tag", the character length must be smaller than or equal to 25.')
      end

      if !@search_tag.nil? && @search_tag.to_s.length < 0
        invalid_properties.push('invalid value for "search_tag", the character length must be great than or equal to 0.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @abbreviation.nil?
      return false if @abbreviation.to_s.length > 12
      return false if @abbreviation.to_s.length < 1
      allocation_method_validator = EnumAttributeValidator.new('String', ["By Square Foot", "By Percent"])
      return false unless allocation_method_validator.valid?(@allocation_method)
      return false if @category.nil?
      category_validator = EnumAttributeValidator.new('String', ["RESIDENTIAL", "COMMERCIAL"])
      return false unless category_validator.valid?(@category)
      return false if @count_unit.nil?
      management_fees_type_validator = EnumAttributeValidator.new('String', ["MANAGE_FEE_NONE", "MANAGE_FEE_GREATER_OF_FLAT_OR_PERCENTAGE", "MANAGE_FEE_FLAT_PLUS_PERCENTAGE"])
      return false unless management_fees_type_validator.valid?(@management_fees_type)
      return false if @name.nil?
      return false if @name.to_s.length > 100
      return false if @name.to_s.length < 1
      naming_validator = EnumAttributeValidator.new('String', ["UNIT", "SUITE", "SPACE", "CUSTOM"])
      return false unless naming_validator.valid?(@naming)
      return false if !@neighborhood.nil? && @neighborhood.to_s.length > 30
      return false if !@neighborhood.nil? && @neighborhood.to_s.length < 0
      return false if !@number_bathrooms.nil? && @number_bathrooms > 10
      return false if !@number_bathrooms.nil? && @number_bathrooms < 0
      return false if !@number_bedrooms.nil? && @number_bedrooms > 20
      return false if !@number_bedrooms.nil? && @number_bedrooms < 0
      numbered_validator = EnumAttributeValidator.new('String', ["Alpha", "Numeric"])
      return false unless numbered_validator.valid?(@numbered)
      return false if @portfolio_id.nil?
      return false if @property_type.nil?
      property_type_validator = EnumAttributeValidator.new('String', ["NONE", "APARTMENT", "CONDO", "COMMERCIAL", "DU_FOUR_PLEX", "HOUSE", "SECTION_8_AFFORDABLE", "SENIOR", "SHORT_TERM_VACATION", "STUDENT", "TOWNHOUSE", "OTHER"])
      return false unless property_type_validator.valid?(@property_type)
      published_for_rent_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless published_for_rent_validator.valid?(@published_for_rent)
      return false if @rentable.nil?
      return false if !@search_tag.nil? && @search_tag.to_s.length > 25
      return false if !@search_tag.nil? && @search_tag.to_s.length < 0
      target_deposit_validator = EnumAttributeValidator.new('String', ["$1.2", "1.2"])
      return false unless target_deposit_validator.valid?(@target_deposit)
      target_rent_units_validator = EnumAttributeValidator.new('String', ["DOLLAR_PER_SQ_FT_MONTH", "DOLLAR_PER_SQ_FT_YEAR", "DOLLAR_PER_SQ_M_MONTH", "DOLLAR_PER_SQ_M_YEAR", "DOLLAR_PER_MONTH", "DOLLAR_PER_WEEK", "DOLLAR_PER_NIGHT"])
      return false unless target_rent_units_validator.valid?(@target_rent_units)
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] abbreviation Value to be assigned
    def abbreviation=(abbreviation)
      if abbreviation.nil?
        fail ArgumentError, 'abbreviation cannot be nil'
      end

      if abbreviation.to_s.length > 12
        fail ArgumentError, 'invalid value for "abbreviation", the character length must be smaller than or equal to 12.'
      end

      if abbreviation.to_s.length < 1
        fail ArgumentError, 'invalid value for "abbreviation", the character length must be great than or equal to 1.'
      end

      @abbreviation = abbreviation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allocation_method Object to be assigned
    def allocation_method=(allocation_method)
      validator = EnumAttributeValidator.new('String', ["By Square Foot", "By Percent"])
      unless validator.valid?(allocation_method)
        fail ArgumentError, "invalid value #{ allocation_method.inspect } for \"allocation_method\", must be one of #{validator.allowable_values}."
      end
      @allocation_method = allocation_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      validator = EnumAttributeValidator.new('String', ["RESIDENTIAL", "COMMERCIAL"])
      unless validator.valid?(category)
        fail ArgumentError, "invalid value #{ category.inspect } for \"category\", must be one of #{validator.allowable_values}."
      end
      @category = category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] management_fees_type Object to be assigned
    def management_fees_type=(management_fees_type)
      validator = EnumAttributeValidator.new('String', ["MANAGE_FEE_NONE", "MANAGE_FEE_GREATER_OF_FLAT_OR_PERCENTAGE", "MANAGE_FEE_FLAT_PLUS_PERCENTAGE"])
      unless validator.valid?(management_fees_type)
        fail ArgumentError, "invalid value #{ management_fees_type.inspect } for \"management_fees_type\", must be one of #{validator.allowable_values}."
      end
      @management_fees_type = management_fees_type
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 100
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 100.'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] naming Object to be assigned
    def naming=(naming)
      validator = EnumAttributeValidator.new('String', ["UNIT", "SUITE", "SPACE", "CUSTOM"])
      unless validator.valid?(naming)
        fail ArgumentError, "invalid value #{ naming.inspect } for \"naming\", must be one of #{validator.allowable_values}."
      end
      @naming = naming
    end

    # Custom attribute writer method with validation
    # @param [Object] neighborhood Value to be assigned
    def neighborhood=(neighborhood)
      if !neighborhood.nil? && neighborhood.to_s.length > 30
        fail ArgumentError, 'invalid value for "neighborhood", the character length must be smaller than or equal to 30.'
      end

      if !neighborhood.nil? && neighborhood.to_s.length < 0
        fail ArgumentError, 'invalid value for "neighborhood", the character length must be great than or equal to 0.'
      end

      @neighborhood = neighborhood
    end

    # Custom attribute writer method with validation
    # @param [Object] number_bathrooms Value to be assigned
    def number_bathrooms=(number_bathrooms)
      if !number_bathrooms.nil? && number_bathrooms > 10
        fail ArgumentError, 'invalid value for "number_bathrooms", must be smaller than or equal to 10.'
      end

      if !number_bathrooms.nil? && number_bathrooms < 0
        fail ArgumentError, 'invalid value for "number_bathrooms", must be greater than or equal to 0.'
      end

      @number_bathrooms = number_bathrooms
    end

    # Custom attribute writer method with validation
    # @param [Object] number_bedrooms Value to be assigned
    def number_bedrooms=(number_bedrooms)
      if !number_bedrooms.nil? && number_bedrooms > 20
        fail ArgumentError, 'invalid value for "number_bedrooms", must be smaller than or equal to 20.'
      end

      if !number_bedrooms.nil? && number_bedrooms < 0
        fail ArgumentError, 'invalid value for "number_bedrooms", must be greater than or equal to 0.'
      end

      @number_bedrooms = number_bedrooms
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] numbered Object to be assigned
    def numbered=(numbered)
      validator = EnumAttributeValidator.new('String', ["Alpha", "Numeric"])
      unless validator.valid?(numbered)
        fail ArgumentError, "invalid value #{ numbered.inspect } for \"numbered\", must be one of #{validator.allowable_values}."
      end
      @numbered = numbered
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] property_type Object to be assigned
    def property_type=(property_type)
      validator = EnumAttributeValidator.new('String', ["NONE", "APARTMENT", "CONDO", "COMMERCIAL", "DU_FOUR_PLEX", "HOUSE", "SECTION_8_AFFORDABLE", "SENIOR", "SHORT_TERM_VACATION", "STUDENT", "TOWNHOUSE", "OTHER"])
      unless validator.valid?(property_type)
        fail ArgumentError, "invalid value #{ property_type.inspect } for \"property_type\", must be one of #{validator.allowable_values}."
      end
      @property_type = property_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] published_for_rent Object to be assigned
    def published_for_rent=(published_for_rent)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(published_for_rent)
        fail ArgumentError, "invalid value #{ published_for_rent.inspect } for \"published_for_rent\", must be one of #{validator.allowable_values}."
      end
      @published_for_rent = published_for_rent
    end

    # Custom attribute writer method with validation
    # @param [Object] search_tag Value to be assigned
    def search_tag=(search_tag)
      if !search_tag.nil? && search_tag.to_s.length > 25
        fail ArgumentError, 'invalid value for "search_tag", the character length must be smaller than or equal to 25.'
      end

      if !search_tag.nil? && search_tag.to_s.length < 0
        fail ArgumentError, 'invalid value for "search_tag", the character length must be great than or equal to 0.'
      end

      @search_tag = search_tag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_deposit Object to be assigned
    def target_deposit=(target_deposit)
      validator = EnumAttributeValidator.new('String', ["$1.2", "1.2"])
      unless validator.valid?(target_deposit)
        fail ArgumentError, "invalid value #{ target_deposit.inspect } for \"target_deposit\", must be one of #{validator.allowable_values}."
      end
      @target_deposit = target_deposit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_rent_units Object to be assigned
    def target_rent_units=(target_rent_units)
      validator = EnumAttributeValidator.new('String', ["DOLLAR_PER_SQ_FT_MONTH", "DOLLAR_PER_SQ_FT_YEAR", "DOLLAR_PER_SQ_M_MONTH", "DOLLAR_PER_SQ_M_YEAR", "DOLLAR_PER_MONTH", "DOLLAR_PER_WEEK", "DOLLAR_PER_NIGHT"])
      unless validator.valid?(target_rent_units)
        fail ArgumentError, "invalid value #{ target_rent_units.inspect } for \"target_rent_units\", must be one of #{validator.allowable_values}."
      end
      @target_rent_units = target_rent_units
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          abbreviation == o.abbreviation &&
          address == o.address &&
          allocation_method == o.allocation_method &&
          available_date == o.available_date &&
          base_year == o.base_year &&
          base_year_operating_expenses == o.base_year_operating_expenses &&
          base_year_property_insurance == o.base_year_property_insurance &&
          base_year_property_taxes == o.base_year_property_taxes &&
          category == o.category &&
          count_unit == o.count_unit &&
          custom_naming == o.custom_naming &&
          description == o.description &&
          featured_for_rent == o.featured_for_rent &&
          floor_number == o.floor_number &&
          management_contract_end_date == o.management_contract_end_date &&
          management_contract_start_date == o.management_contract_start_date &&
          management_fee_type == o.management_fee_type &&
          management_fees_type == o.management_fees_type &&
          management_flat_fee == o.management_flat_fee &&
          marketing_name == o.marketing_name &&
          move_in_days == o.move_in_days &&
          name == o.name &&
          naming == o.naming &&
          neighborhood == o.neighborhood &&
          number_bathrooms == o.number_bathrooms &&
          number_bedrooms == o.number_bedrooms &&
          number_floors == o.number_floors &&
          numbered == o.numbered &&
          other_tenant_charges == o.other_tenant_charges &&
          parcel_number == o.parcel_number &&
          pets_allowed == o.pets_allowed &&
          portfolio_id == o.portfolio_id &&
          posting_title == o.posting_title &&
          property_type == o.property_type &&
          published_for_rent == o.published_for_rent &&
          ready == o.ready &&
          rentable == o.rentable &&
          search_tag == o.search_tag &&
          short_description == o.short_description &&
          syndicate == o.syndicate &&
          target_deposit == o.target_deposit &&
          target_rent == o.target_rent &&
          target_rent_units == o.target_rent_units &&
          total_area == o.total_area &&
          type == o.type &&
          unit_type == o.unit_type &&
          year_built == o.year_built
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [abbreviation, address, allocation_method, available_date, base_year, base_year_operating_expenses, base_year_property_insurance, base_year_property_taxes, category, count_unit, custom_naming, description, featured_for_rent, floor_number, management_contract_end_date, management_contract_start_date, management_fee_type, management_fees_type, management_flat_fee, marketing_name, move_in_days, name, naming, neighborhood, number_bathrooms, number_bedrooms, number_floors, numbered, other_tenant_charges, parcel_number, pets_allowed, portfolio_id, posting_title, property_type, published_for_rent, ready, rentable, search_tag, short_description, syndicate, target_deposit, target_rent, target_rent_units, total_area, type, unit_type, year_built].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
