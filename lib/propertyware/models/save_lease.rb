=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Lease for Request
  class SaveLease
    # Property base rent.
    attr_accessor :base_rent

    # Comments.
    attr_accessor :comments

    # End date of the lease term.
    attr_accessor :end_date

    # Move in leasing fee amount.
    attr_accessor :leasing_fee_amount

    # Move in leasing fee post date.
    attr_accessor :leasing_fee_date

    # Move in leasing fee reference number.
    attr_accessor :leasing_fee_ref_no

    # Move In Date.
    attr_accessor :move_in_date

    # Move Out Date.
    attr_accessor :move_out_date

    # Day that the tenant(s) turned in a notice to vacate. Used only for Updating a Lease.
    attr_accessor :notice_given_date

    # Indicates if the lease has any payment types that they are prevented from using. For example, a lease with several bounced checks may be restricted from paying with checks for future payments.</br>Allowed values are <br/>(1) None<br/>(2) No Payment Allowed<br/>(3) One or more values separated by comma - Check/Credit Card/Cash/Cashiers Check/Money Order/Section 8/Public Assistance/EPay/RentMoneyOther
    attr_accessor :payment_restriction

    # Indicates how to post first rent charge while move in.
    attr_accessor :post_first_charge

    # Primary contact ID, Should be one of tenant IDs.
    attr_accessor :primary_contact_id

    # Indicates how to post first rent charge while move in.
    attr_accessor :prorate_month

    # Public assistance program. Allowed values are 'None', 'Section 8', 'SCRIE', 'Rent Control', 'EDEN INC. - Shelter Care Plus', 'CLC', 'DHAP', 'FEMA', 'Harris County' etc. 
    attr_accessor :public_assistance_program

    # Reason for vacating the property. Used only for Updating a Lease.<Br> Allowed values: BOUGHT HOUSE, DECEASED, EVICTION, HEALTH, MOVE CITY, PERSONAL, TOO EXPENSIVE, TRANSFER UNIT, UNKNOWN etc.
    attr_accessor :reason_for_leaving

    attr_accessor :rent_auto_charge

    # Scheduled move out date.
    attr_accessor :schedule_move_out_date

    # Search tag.
    attr_accessor :search_tag

    # Move in security deposit amount.
    attr_accessor :sec_dep_amount

    # Move in security deposit charge date.
    attr_accessor :sec_dep_charge_date

    # Lease signed date.
    attr_accessor :signed_date

    # Start date of the lease term.
    attr_accessor :start_date

    # Indicates lease status. Allowed values are 'Active', 'Active - Notice Given', 'Draft', 'Eviction', 'Terminated' etc. 
    attr_accessor :status

    # List of tenant IDs.
    attr_accessor :tenant_ids

    # Unit/Building ID associated with this lease.
    attr_accessor :unit_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'base_rent' => :'baseRent',
        :'comments' => :'comments',
        :'end_date' => :'endDate',
        :'leasing_fee_amount' => :'leasingFeeAmount',
        :'leasing_fee_date' => :'leasingFeeDate',
        :'leasing_fee_ref_no' => :'leasingFeeRefNo',
        :'move_in_date' => :'moveInDate',
        :'move_out_date' => :'moveOutDate',
        :'notice_given_date' => :'noticeGivenDate',
        :'payment_restriction' => :'paymentRestriction',
        :'post_first_charge' => :'postFirstCharge',
        :'primary_contact_id' => :'primaryContactID',
        :'prorate_month' => :'prorateMonth',
        :'public_assistance_program' => :'publicAssistanceProgram',
        :'reason_for_leaving' => :'reasonForLeaving',
        :'rent_auto_charge' => :'rentAutoCharge',
        :'schedule_move_out_date' => :'scheduleMoveOutDate',
        :'search_tag' => :'searchTag',
        :'sec_dep_amount' => :'secDepAmount',
        :'sec_dep_charge_date' => :'secDepChargeDate',
        :'signed_date' => :'signedDate',
        :'start_date' => :'startDate',
        :'status' => :'status',
        :'tenant_ids' => :'tenantIDs',
        :'unit_id' => :'unitID'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'base_rent' => :'Float',
        :'comments' => :'String',
        :'end_date' => :'Date',
        :'leasing_fee_amount' => :'Float',
        :'leasing_fee_date' => :'Date',
        :'leasing_fee_ref_no' => :'String',
        :'move_in_date' => :'Date',
        :'move_out_date' => :'Date',
        :'notice_given_date' => :'Date',
        :'payment_restriction' => :'String',
        :'post_first_charge' => :'Boolean',
        :'primary_contact_id' => :'Integer',
        :'prorate_month' => :'String',
        :'public_assistance_program' => :'String',
        :'reason_for_leaving' => :'String',
        :'rent_auto_charge' => :'SaveAutoCharge',
        :'schedule_move_out_date' => :'Date',
        :'search_tag' => :'String',
        :'sec_dep_amount' => :'Float',
        :'sec_dep_charge_date' => :'Date',
        :'signed_date' => :'Date',
        :'start_date' => :'Date',
        :'status' => :'String',
        :'tenant_ids' => :'Array<Integer>',
        :'unit_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::SaveLease` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::SaveLease`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'base_rent')
        self.base_rent = attributes[:'base_rent']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'leasing_fee_amount')
        self.leasing_fee_amount = attributes[:'leasing_fee_amount']
      end

      if attributes.key?(:'leasing_fee_date')
        self.leasing_fee_date = attributes[:'leasing_fee_date']
      end

      if attributes.key?(:'leasing_fee_ref_no')
        self.leasing_fee_ref_no = attributes[:'leasing_fee_ref_no']
      end

      if attributes.key?(:'move_in_date')
        self.move_in_date = attributes[:'move_in_date']
      end

      if attributes.key?(:'move_out_date')
        self.move_out_date = attributes[:'move_out_date']
      end

      if attributes.key?(:'notice_given_date')
        self.notice_given_date = attributes[:'notice_given_date']
      end

      if attributes.key?(:'payment_restriction')
        self.payment_restriction = attributes[:'payment_restriction']
      end

      if attributes.key?(:'post_first_charge')
        self.post_first_charge = attributes[:'post_first_charge']
      end

      if attributes.key?(:'primary_contact_id')
        self.primary_contact_id = attributes[:'primary_contact_id']
      end

      if attributes.key?(:'prorate_month')
        self.prorate_month = attributes[:'prorate_month']
      end

      if attributes.key?(:'public_assistance_program')
        self.public_assistance_program = attributes[:'public_assistance_program']
      end

      if attributes.key?(:'reason_for_leaving')
        self.reason_for_leaving = attributes[:'reason_for_leaving']
      end

      if attributes.key?(:'rent_auto_charge')
        self.rent_auto_charge = attributes[:'rent_auto_charge']
      end

      if attributes.key?(:'schedule_move_out_date')
        self.schedule_move_out_date = attributes[:'schedule_move_out_date']
      end

      if attributes.key?(:'search_tag')
        self.search_tag = attributes[:'search_tag']
      end

      if attributes.key?(:'sec_dep_amount')
        self.sec_dep_amount = attributes[:'sec_dep_amount']
      end

      if attributes.key?(:'sec_dep_charge_date')
        self.sec_dep_charge_date = attributes[:'sec_dep_charge_date']
      end

      if attributes.key?(:'signed_date')
        self.signed_date = attributes[:'signed_date']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'tenant_ids')
        if (value = attributes[:'tenant_ids']).is_a?(Array)
          self.tenant_ids = value
        end
      end

      if attributes.key?(:'unit_id')
        self.unit_id = attributes[:'unit_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @end_date.nil?
        invalid_properties.push('invalid value for "end_date", end_date cannot be nil.')
      end

      if @move_in_date.nil?
        invalid_properties.push('invalid value for "move_in_date", move_in_date cannot be nil.')
      end

      if @primary_contact_id.nil?
        invalid_properties.push('invalid value for "primary_contact_id", primary_contact_id cannot be nil.')
      end

      if @start_date.nil?
        invalid_properties.push('invalid value for "start_date", start_date cannot be nil.')
      end

      if @tenant_ids.nil?
        invalid_properties.push('invalid value for "tenant_ids", tenant_ids cannot be nil.')
      end

      if @unit_id.nil?
        invalid_properties.push('invalid value for "unit_id", unit_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @end_date.nil?
      return false if @move_in_date.nil?
      return false if @primary_contact_id.nil?
      prorate_month_validator = EnumAttributeValidator.new('String', ["DO_NOT_PRORATE", "FIRST_MONTH_PRORATE", "SECOND_MONTH_PRORATE"])
      return false unless prorate_month_validator.valid?(@prorate_month)
      return false if @start_date.nil?
      return false if @tenant_ids.nil?
      return false if @unit_id.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prorate_month Object to be assigned
    def prorate_month=(prorate_month)
      validator = EnumAttributeValidator.new('String', ["DO_NOT_PRORATE", "FIRST_MONTH_PRORATE", "SECOND_MONTH_PRORATE"])
      unless validator.valid?(prorate_month)
        fail ArgumentError, "invalid value #{ prorate_month.inspect } for \"prorate_month\", must be one of #{validator.allowable_values}."
      end
      @prorate_month = prorate_month
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          base_rent == o.base_rent &&
          comments == o.comments &&
          end_date == o.end_date &&
          leasing_fee_amount == o.leasing_fee_amount &&
          leasing_fee_date == o.leasing_fee_date &&
          leasing_fee_ref_no == o.leasing_fee_ref_no &&
          move_in_date == o.move_in_date &&
          move_out_date == o.move_out_date &&
          notice_given_date == o.notice_given_date &&
          payment_restriction == o.payment_restriction &&
          post_first_charge == o.post_first_charge &&
          primary_contact_id == o.primary_contact_id &&
          prorate_month == o.prorate_month &&
          public_assistance_program == o.public_assistance_program &&
          reason_for_leaving == o.reason_for_leaving &&
          rent_auto_charge == o.rent_auto_charge &&
          schedule_move_out_date == o.schedule_move_out_date &&
          search_tag == o.search_tag &&
          sec_dep_amount == o.sec_dep_amount &&
          sec_dep_charge_date == o.sec_dep_charge_date &&
          signed_date == o.signed_date &&
          start_date == o.start_date &&
          status == o.status &&
          tenant_ids == o.tenant_ids &&
          unit_id == o.unit_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [base_rent, comments, end_date, leasing_fee_amount, leasing_fee_date, leasing_fee_ref_no, move_in_date, move_out_date, notice_given_date, payment_restriction, post_first_charge, primary_contact_id, prorate_month, public_assistance_program, reason_for_leaving, rent_auto_charge, schedule_move_out_date, search_tag, sec_dep_amount, sec_dep_charge_date, signed_date, start_date, status, tenant_ids, unit_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
