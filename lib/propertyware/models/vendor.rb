=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Vendor
  class Vendor
    # Account number.
    attr_accessor :account_number

    # Indicates if the vendor is active.
    attr_accessor :active

    # Address.
    attr_accessor :address

    # Address line 2.
    attr_accessor :address2

    # Alert Email
    attr_accessor :alert_email

    # City.
    attr_accessor :city

    # Comments.
    attr_accessor :comments

    # Name of the vendor's company.
    attr_accessor :company_name

    # Country.
    attr_accessor :country

    # User who created the record.
    attr_accessor :created_by

    # Date and time the record was created. (Timezone: UTC)
    attr_accessor :created_date_time

    # Credit limit.
    attr_accessor :credit_limit

    # Custom fields.
    attr_accessor :custom_fields

    # Default bill split id
    attr_accessor :default_bill_split_account_id

    # Default markup discount
    attr_accessor :default_markup_discount_percentage

    # Description.
    attr_accessor :description

    # Indicates if the vendor is eligible for a 1099 form.
    attr_accessor :eligible1099

    # Email address.
    attr_accessor :email

    # Fax number.
    attr_accessor :fax

    # Unique identifier.
    attr_accessor :id

    # Include company name on 1099
    attr_accessor :include_company_name_on1099

    # User who last modified the record.
    attr_accessor :last_modified_by

    # Date and time the record was last modified. (Timezone: UTC)
    attr_accessor :last_modified_date_time

    # Markup account id
    attr_accessor :markup_account_id

    # Name.
    attr_accessor :name

    # Name to be used on checks.
    attr_accessor :name_on_check

    # Other phone number.
    attr_accessor :other_phone

    # The number of days within payments are due.
    attr_accessor :payment_term_days_to_pay

    # Payment terms.
    attr_accessor :payment_terms

    # Phone number.
    attr_accessor :phone

    # Search Tag
    attr_accessor :search_tag

    # State.
    attr_accessor :state

    # Vendor Sync To Maintenance.
    attr_accessor :sync_to_vmm

    # Tax identification number.
    attr_accessor :tax_id

    # Tax Payer Name
    attr_accessor :tax_payer_name

    # Time Tracking, is enabled or disabled
    attr_accessor :time_tracking

    # The type of vendor.
    attr_accessor :type

    # Website URL.
    attr_accessor :website

    # ZIP or postal code.
    attr_accessor :zip

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_number' => :'accountNumber',
        :'active' => :'active',
        :'address' => :'address',
        :'address2' => :'address2',
        :'alert_email' => :'alertEmail',
        :'city' => :'city',
        :'comments' => :'comments',
        :'company_name' => :'companyName',
        :'country' => :'country',
        :'created_by' => :'createdBy',
        :'created_date_time' => :'createdDateTime',
        :'credit_limit' => :'creditLimit',
        :'custom_fields' => :'customFields',
        :'default_bill_split_account_id' => :'defaultBillSplitAccountId',
        :'default_markup_discount_percentage' => :'defaultMarkupDiscountPercentage',
        :'description' => :'description',
        :'eligible1099' => :'eligible1099',
        :'email' => :'email',
        :'fax' => :'fax',
        :'id' => :'id',
        :'include_company_name_on1099' => :'includeCompanyNameOn1099',
        :'last_modified_by' => :'lastModifiedBy',
        :'last_modified_date_time' => :'lastModifiedDateTime',
        :'markup_account_id' => :'markupAccountId',
        :'name' => :'name',
        :'name_on_check' => :'nameOnCheck',
        :'other_phone' => :'otherPhone',
        :'payment_term_days_to_pay' => :'paymentTermDaysToPay',
        :'payment_terms' => :'paymentTerms',
        :'phone' => :'phone',
        :'search_tag' => :'searchTag',
        :'state' => :'state',
        :'sync_to_vmm' => :'syncToVMM',
        :'tax_id' => :'taxId',
        :'tax_payer_name' => :'taxPayerName',
        :'time_tracking' => :'timeTracking',
        :'type' => :'type',
        :'website' => :'website',
        :'zip' => :'zip'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_number' => :'String',
        :'active' => :'Boolean',
        :'address' => :'String',
        :'address2' => :'String',
        :'alert_email' => :'String',
        :'city' => :'String',
        :'comments' => :'String',
        :'company_name' => :'String',
        :'country' => :'String',
        :'created_by' => :'String',
        :'created_date_time' => :'Time',
        :'credit_limit' => :'Float',
        :'custom_fields' => :'Array<CustomField>',
        :'default_bill_split_account_id' => :'Integer',
        :'default_markup_discount_percentage' => :'Float',
        :'description' => :'String',
        :'eligible1099' => :'Boolean',
        :'email' => :'String',
        :'fax' => :'String',
        :'id' => :'Integer',
        :'include_company_name_on1099' => :'Boolean',
        :'last_modified_by' => :'String',
        :'last_modified_date_time' => :'Time',
        :'markup_account_id' => :'Integer',
        :'name' => :'String',
        :'name_on_check' => :'String',
        :'other_phone' => :'String',
        :'payment_term_days_to_pay' => :'Integer',
        :'payment_terms' => :'String',
        :'phone' => :'String',
        :'search_tag' => :'String',
        :'state' => :'String',
        :'sync_to_vmm' => :'Boolean',
        :'tax_id' => :'String',
        :'tax_payer_name' => :'String',
        :'time_tracking' => :'String',
        :'type' => :'String',
        :'website' => :'String',
        :'zip' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::Vendor` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::Vendor`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'alert_email')
        self.alert_email = attributes[:'alert_email']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'company_name')
        self.company_name = attributes[:'company_name']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'created_date_time')
        self.created_date_time = attributes[:'created_date_time']
      end

      if attributes.key?(:'credit_limit')
        self.credit_limit = attributes[:'credit_limit']
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end

      if attributes.key?(:'default_bill_split_account_id')
        self.default_bill_split_account_id = attributes[:'default_bill_split_account_id']
      end

      if attributes.key?(:'default_markup_discount_percentage')
        self.default_markup_discount_percentage = attributes[:'default_markup_discount_percentage']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'eligible1099')
        self.eligible1099 = attributes[:'eligible1099']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'include_company_name_on1099')
        self.include_company_name_on1099 = attributes[:'include_company_name_on1099']
      end

      if attributes.key?(:'last_modified_by')
        self.last_modified_by = attributes[:'last_modified_by']
      end

      if attributes.key?(:'last_modified_date_time')
        self.last_modified_date_time = attributes[:'last_modified_date_time']
      end

      if attributes.key?(:'markup_account_id')
        self.markup_account_id = attributes[:'markup_account_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'name_on_check')
        self.name_on_check = attributes[:'name_on_check']
      end

      if attributes.key?(:'other_phone')
        self.other_phone = attributes[:'other_phone']
      end

      if attributes.key?(:'payment_term_days_to_pay')
        self.payment_term_days_to_pay = attributes[:'payment_term_days_to_pay']
      end

      if attributes.key?(:'payment_terms')
        self.payment_terms = attributes[:'payment_terms']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'search_tag')
        self.search_tag = attributes[:'search_tag']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'sync_to_vmm')
        self.sync_to_vmm = attributes[:'sync_to_vmm']
      end

      if attributes.key?(:'tax_id')
        self.tax_id = attributes[:'tax_id']
      end

      if attributes.key?(:'tax_payer_name')
        self.tax_payer_name = attributes[:'tax_payer_name']
      end

      if attributes.key?(:'time_tracking')
        self.time_tracking = attributes[:'time_tracking']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_number == o.account_number &&
          active == o.active &&
          address == o.address &&
          address2 == o.address2 &&
          alert_email == o.alert_email &&
          city == o.city &&
          comments == o.comments &&
          company_name == o.company_name &&
          country == o.country &&
          created_by == o.created_by &&
          created_date_time == o.created_date_time &&
          credit_limit == o.credit_limit &&
          custom_fields == o.custom_fields &&
          default_bill_split_account_id == o.default_bill_split_account_id &&
          default_markup_discount_percentage == o.default_markup_discount_percentage &&
          description == o.description &&
          eligible1099 == o.eligible1099 &&
          email == o.email &&
          fax == o.fax &&
          id == o.id &&
          include_company_name_on1099 == o.include_company_name_on1099 &&
          last_modified_by == o.last_modified_by &&
          last_modified_date_time == o.last_modified_date_time &&
          markup_account_id == o.markup_account_id &&
          name == o.name &&
          name_on_check == o.name_on_check &&
          other_phone == o.other_phone &&
          payment_term_days_to_pay == o.payment_term_days_to_pay &&
          payment_terms == o.payment_terms &&
          phone == o.phone &&
          search_tag == o.search_tag &&
          state == o.state &&
          sync_to_vmm == o.sync_to_vmm &&
          tax_id == o.tax_id &&
          tax_payer_name == o.tax_payer_name &&
          time_tracking == o.time_tracking &&
          type == o.type &&
          website == o.website &&
          zip == o.zip
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_number, active, address, address2, alert_email, city, comments, company_name, country, created_by, created_date_time, credit_limit, custom_fields, default_bill_split_account_id, default_markup_discount_percentage, description, eligible1099, email, fax, id, include_company_name_on1099, last_modified_by, last_modified_date_time, markup_account_id, name, name_on_check, other_phone, payment_term_days_to_pay, payment_terms, phone, search_tag, state, sync_to_vmm, tax_id, tax_payer_name, time_tracking, type, website, zip].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
