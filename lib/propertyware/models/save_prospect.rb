=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Save Prospect 
  class SaveProspect
    # Unique identifier of the building associated with the prospect.
    attr_accessor :building_id

    # This is a description of the Prospect.
    attr_accessor :comments

    # Prospect contacts.
    attr_accessor :contacts

    # Prospect Current Home Type.
    attr_accessor :current_home_type

    # Prospect Current Home Mortgage.
    attr_accessor :current_rent_mortgage

    # Prospect Has Pets.
    attr_accessor :has_pets

    # Prospect Move In Date.
    attr_accessor :move_in_date

    # Prospect Neighborhood Desired.
    attr_accessor :neighborhood_desired

    # Prospect Number Of Bathrooms.
    attr_accessor :number_bathrooms

    # Prospect Number Of Bedrooms.
    attr_accessor :number_bedrooms

    # Prospect Number Of Pets.
    attr_accessor :number_of_pets

    # Prospect Pet Type.
    attr_accessor :pet_type

    # Prospect Pet Weights.
    attr_accessor :pet_weights

    # Prospect Preferred Contact Method.
    attr_accessor :preferred_contact_method

    # Property Address.
    attr_accessor :property_address

    # Property Address Continued.
    attr_accessor :property_address2

    # Property City.
    attr_accessor :property_city

    # Property Country.
    attr_accessor :property_country

    # Property Number Of Bath rooms.
    attr_accessor :property_number_bathrooms

    # Property Number Of Bedrooms.
    attr_accessor :property_number_bedrooms

    # Property State.
    attr_accessor :property_state

    # Property Zip.
    attr_accessor :property_zip

    # Prospect Reason For Moving.
    attr_accessor :reason_for_moving

    # Prospect Rent Maximum.
    attr_accessor :rent_max

    # Prospect Rent Minimum.
    attr_accessor :rent_min

    # Prospect Source.
    attr_accessor :source

    # Prospect Status.
    attr_accessor :status

    # Prospect Time At Current Residence.
    attr_accessor :time_at_current_residence

    # Prospect Type.
    attr_accessor :type

    # Prospect Type Of Inquiry.
    attr_accessor :type_of_inquiry

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'building_id' => :'buildingID',
        :'comments' => :'comments',
        :'contacts' => :'contacts',
        :'current_home_type' => :'currentHomeType',
        :'current_rent_mortgage' => :'currentRentMortgage',
        :'has_pets' => :'hasPets',
        :'move_in_date' => :'moveInDate',
        :'neighborhood_desired' => :'neighborhoodDesired',
        :'number_bathrooms' => :'numberBathrooms',
        :'number_bedrooms' => :'numberBedrooms',
        :'number_of_pets' => :'numberOfPets',
        :'pet_type' => :'petType',
        :'pet_weights' => :'petWeights',
        :'preferred_contact_method' => :'preferredContactMethod',
        :'property_address' => :'propertyAddress',
        :'property_address2' => :'propertyAddress2',
        :'property_city' => :'propertyCity',
        :'property_country' => :'propertyCountry',
        :'property_number_bathrooms' => :'propertyNumberBathrooms',
        :'property_number_bedrooms' => :'propertyNumberBedrooms',
        :'property_state' => :'propertyState',
        :'property_zip' => :'propertyZip',
        :'reason_for_moving' => :'reasonForMoving',
        :'rent_max' => :'rentMax',
        :'rent_min' => :'rentMin',
        :'source' => :'source',
        :'status' => :'status',
        :'time_at_current_residence' => :'timeAtCurrentResidence',
        :'type' => :'type',
        :'type_of_inquiry' => :'typeOfInquiry'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'building_id' => :'Integer',
        :'comments' => :'String',
        :'contacts' => :'Array<SaveProspectContact>',
        :'current_home_type' => :'String',
        :'current_rent_mortgage' => :'Float',
        :'has_pets' => :'Boolean',
        :'move_in_date' => :'Date',
        :'neighborhood_desired' => :'String',
        :'number_bathrooms' => :'Float',
        :'number_bedrooms' => :'Integer',
        :'number_of_pets' => :'Integer',
        :'pet_type' => :'String',
        :'pet_weights' => :'String',
        :'preferred_contact_method' => :'String',
        :'property_address' => :'String',
        :'property_address2' => :'String',
        :'property_city' => :'String',
        :'property_country' => :'String',
        :'property_number_bathrooms' => :'Float',
        :'property_number_bedrooms' => :'Integer',
        :'property_state' => :'String',
        :'property_zip' => :'String',
        :'reason_for_moving' => :'String',
        :'rent_max' => :'Float',
        :'rent_min' => :'Float',
        :'source' => :'String',
        :'status' => :'String',
        :'time_at_current_residence' => :'String',
        :'type' => :'String',
        :'type_of_inquiry' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::SaveProspect` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::SaveProspect`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'building_id')
        self.building_id = attributes[:'building_id']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'contacts')
        if (value = attributes[:'contacts']).is_a?(Array)
          self.contacts = value
        end
      end

      if attributes.key?(:'current_home_type')
        self.current_home_type = attributes[:'current_home_type']
      end

      if attributes.key?(:'current_rent_mortgage')
        self.current_rent_mortgage = attributes[:'current_rent_mortgage']
      end

      if attributes.key?(:'has_pets')
        self.has_pets = attributes[:'has_pets']
      end

      if attributes.key?(:'move_in_date')
        self.move_in_date = attributes[:'move_in_date']
      end

      if attributes.key?(:'neighborhood_desired')
        self.neighborhood_desired = attributes[:'neighborhood_desired']
      end

      if attributes.key?(:'number_bathrooms')
        self.number_bathrooms = attributes[:'number_bathrooms']
      end

      if attributes.key?(:'number_bedrooms')
        self.number_bedrooms = attributes[:'number_bedrooms']
      end

      if attributes.key?(:'number_of_pets')
        self.number_of_pets = attributes[:'number_of_pets']
      end

      if attributes.key?(:'pet_type')
        self.pet_type = attributes[:'pet_type']
      end

      if attributes.key?(:'pet_weights')
        self.pet_weights = attributes[:'pet_weights']
      end

      if attributes.key?(:'preferred_contact_method')
        self.preferred_contact_method = attributes[:'preferred_contact_method']
      end

      if attributes.key?(:'property_address')
        self.property_address = attributes[:'property_address']
      end

      if attributes.key?(:'property_address2')
        self.property_address2 = attributes[:'property_address2']
      end

      if attributes.key?(:'property_city')
        self.property_city = attributes[:'property_city']
      end

      if attributes.key?(:'property_country')
        self.property_country = attributes[:'property_country']
      end

      if attributes.key?(:'property_number_bathrooms')
        self.property_number_bathrooms = attributes[:'property_number_bathrooms']
      end

      if attributes.key?(:'property_number_bedrooms')
        self.property_number_bedrooms = attributes[:'property_number_bedrooms']
      end

      if attributes.key?(:'property_state')
        self.property_state = attributes[:'property_state']
      end

      if attributes.key?(:'property_zip')
        self.property_zip = attributes[:'property_zip']
      end

      if attributes.key?(:'reason_for_moving')
        self.reason_for_moving = attributes[:'reason_for_moving']
      end

      if attributes.key?(:'rent_max')
        self.rent_max = attributes[:'rent_max']
      end

      if attributes.key?(:'rent_min')
        self.rent_min = attributes[:'rent_min']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'time_at_current_residence')
        self.time_at_current_residence = attributes[:'time_at_current_residence']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'type_of_inquiry')
        self.type_of_inquiry = attributes[:'type_of_inquiry']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          building_id == o.building_id &&
          comments == o.comments &&
          contacts == o.contacts &&
          current_home_type == o.current_home_type &&
          current_rent_mortgage == o.current_rent_mortgage &&
          has_pets == o.has_pets &&
          move_in_date == o.move_in_date &&
          neighborhood_desired == o.neighborhood_desired &&
          number_bathrooms == o.number_bathrooms &&
          number_bedrooms == o.number_bedrooms &&
          number_of_pets == o.number_of_pets &&
          pet_type == o.pet_type &&
          pet_weights == o.pet_weights &&
          preferred_contact_method == o.preferred_contact_method &&
          property_address == o.property_address &&
          property_address2 == o.property_address2 &&
          property_city == o.property_city &&
          property_country == o.property_country &&
          property_number_bathrooms == o.property_number_bathrooms &&
          property_number_bedrooms == o.property_number_bedrooms &&
          property_state == o.property_state &&
          property_zip == o.property_zip &&
          reason_for_moving == o.reason_for_moving &&
          rent_max == o.rent_max &&
          rent_min == o.rent_min &&
          source == o.source &&
          status == o.status &&
          time_at_current_residence == o.time_at_current_residence &&
          type == o.type &&
          type_of_inquiry == o.type_of_inquiry
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [building_id, comments, contacts, current_home_type, current_rent_mortgage, has_pets, move_in_date, neighborhood_desired, number_bathrooms, number_bedrooms, number_of_pets, pet_type, pet_weights, preferred_contact_method, property_address, property_address2, property_city, property_country, property_number_bathrooms, property_number_bedrooms, property_state, property_zip, reason_for_moving, rent_max, rent_min, source, status, time_at_current_residence, type, type_of_inquiry].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
