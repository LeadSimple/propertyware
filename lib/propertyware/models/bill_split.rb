=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # BillSplit
  class BillSplit
    # Amount.
    attr_accessor :amount

    # Amount paid.
    attr_accessor :amount_paid

    # Abbreviation of the building associated with this bill split.
    attr_accessor :building_abbr

    # Id of the building associated with this bill split.
    attr_accessor :building_id

    # Comments regarding the bill split.
    attr_accessor :comments

    # Id of the general ledger account associated with this bill split.
    attr_accessor :gl_account_id

    # Unique identifier.
    attr_accessor :id

    # Indicates if the bill split is tied to a markup discount.
    attr_accessor :markup_discount_split

    # Indicates if the bill split has been paid.
    attr_accessor :paid

    # Abbreviation of the portfolio associated with this bill split.
    attr_accessor :portfolio_abbr

    # Id of the portfolio associated with this bill split.
    attr_accessor :portfolio_id

    # Abbreviation of the unit associated with this bill split.
    attr_accessor :unit_abbr

    # Id of the unit associated with this bill split.
    attr_accessor :unit_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'amount_paid' => :'amountPaid',
        :'building_abbr' => :'buildingAbbr',
        :'building_id' => :'buildingID',
        :'comments' => :'comments',
        :'gl_account_id' => :'glAccountID',
        :'id' => :'id',
        :'markup_discount_split' => :'markupDiscountSplit',
        :'paid' => :'paid',
        :'portfolio_abbr' => :'portfolioAbbr',
        :'portfolio_id' => :'portfolioID',
        :'unit_abbr' => :'unitAbbr',
        :'unit_id' => :'unitID'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount' => :'Float',
        :'amount_paid' => :'Float',
        :'building_abbr' => :'String',
        :'building_id' => :'Integer',
        :'comments' => :'String',
        :'gl_account_id' => :'Integer',
        :'id' => :'Integer',
        :'markup_discount_split' => :'Boolean',
        :'paid' => :'Boolean',
        :'portfolio_abbr' => :'String',
        :'portfolio_id' => :'Integer',
        :'unit_abbr' => :'String',
        :'unit_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::BillSplit` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::BillSplit`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'amount_paid')
        self.amount_paid = attributes[:'amount_paid']
      end

      if attributes.key?(:'building_abbr')
        self.building_abbr = attributes[:'building_abbr']
      end

      if attributes.key?(:'building_id')
        self.building_id = attributes[:'building_id']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'gl_account_id')
        self.gl_account_id = attributes[:'gl_account_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'markup_discount_split')
        self.markup_discount_split = attributes[:'markup_discount_split']
      end

      if attributes.key?(:'paid')
        self.paid = attributes[:'paid']
      end

      if attributes.key?(:'portfolio_abbr')
        self.portfolio_abbr = attributes[:'portfolio_abbr']
      end

      if attributes.key?(:'portfolio_id')
        self.portfolio_id = attributes[:'portfolio_id']
      end

      if attributes.key?(:'unit_abbr')
        self.unit_abbr = attributes[:'unit_abbr']
      end

      if attributes.key?(:'unit_id')
        self.unit_id = attributes[:'unit_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          amount_paid == o.amount_paid &&
          building_abbr == o.building_abbr &&
          building_id == o.building_id &&
          comments == o.comments &&
          gl_account_id == o.gl_account_id &&
          id == o.id &&
          markup_discount_split == o.markup_discount_split &&
          paid == o.paid &&
          portfolio_abbr == o.portfolio_abbr &&
          portfolio_id == o.portfolio_id &&
          unit_abbr == o.unit_abbr &&
          unit_id == o.unit_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, amount_paid, building_abbr, building_id, comments, gl_account_id, id, markup_discount_split, paid, portfolio_abbr, portfolio_id, unit_abbr, unit_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
