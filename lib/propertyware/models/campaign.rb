=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Campaign
  class Campaign
    # Indicates if the call tracking terms have been accepted.
    attr_accessor :accepted_call_tracking_terms

    # Campaign ID used for call tracking.
    attr_accessor :call_tracking_campaign_id

    # Indicates if call tracking is enabled for the campaign.
    attr_accessor :call_tracking_enabled

    # Number to which call tracking calls are forwarded.
    attr_accessor :call_tracking_forwar

    # Number to which call tracking calls are forwarded after hours.
    attr_accessor :call_tracking_forwar_after_hours

    # Phone number used for call tracking.
    attr_accessor :call_tracking_phone_number

    # Referrer for call tracking.
    attr_accessor :call_tracking_referrer

    # Search phrase for call tracking.
    attr_accessor :call_tracking_search_phrase

    attr_accessor :campaign_source

    # Code of the campaign.
    attr_accessor :code

    # User who created the record.
    attr_accessor :created_by

    # Date and time the record was created. (Timezone: UTC)
    attr_accessor :created_date_time

    # Custom fields.
    attr_accessor :custom_fields

    # Description of the campaign.
    attr_accessor :description

    # End date of the campaign.
    attr_accessor :end_date

    # Unique identifier.
    attr_accessor :id

    # User who last modified the record.
    attr_accessor :last_modified_by

    # Date and time the record was last modified. (Timezone: UTC)
    attr_accessor :last_modified_date_time

    # Name of the campaign.
    attr_accessor :name

    # Start date of the campaign.
    attr_accessor :start_date

    # Type of the targeted prospect.
    attr_accessor :target_prospect_type

    # Time zone of the campaign.
    attr_accessor :timezone

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'accepted_call_tracking_terms' => :'acceptedCallTrackingTerms',
        :'call_tracking_campaign_id' => :'callTrackingCampaignID',
        :'call_tracking_enabled' => :'callTrackingEnabled',
        :'call_tracking_forwar' => :'callTrackingForwar',
        :'call_tracking_forwar_after_hours' => :'callTrackingForwarAfterHours',
        :'call_tracking_phone_number' => :'callTrackingPhoneNumber',
        :'call_tracking_referrer' => :'callTrackingReferrer',
        :'call_tracking_search_phrase' => :'callTrackingSearchPhrase',
        :'campaign_source' => :'campaignSource',
        :'code' => :'code',
        :'created_by' => :'createdBy',
        :'created_date_time' => :'createdDateTime',
        :'custom_fields' => :'customFields',
        :'description' => :'description',
        :'end_date' => :'endDate',
        :'id' => :'id',
        :'last_modified_by' => :'lastModifiedBy',
        :'last_modified_date_time' => :'lastModifiedDateTime',
        :'name' => :'name',
        :'start_date' => :'startDate',
        :'target_prospect_type' => :'targetProspectType',
        :'timezone' => :'timezone'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'accepted_call_tracking_terms' => :'Boolean',
        :'call_tracking_campaign_id' => :'String',
        :'call_tracking_enabled' => :'Boolean',
        :'call_tracking_forwar' => :'String',
        :'call_tracking_forwar_after_hours' => :'String',
        :'call_tracking_phone_number' => :'String',
        :'call_tracking_referrer' => :'String',
        :'call_tracking_search_phrase' => :'String',
        :'campaign_source' => :'CampaignSource',
        :'code' => :'String',
        :'created_by' => :'String',
        :'created_date_time' => :'Time',
        :'custom_fields' => :'Array<CustomField>',
        :'description' => :'String',
        :'end_date' => :'Date',
        :'id' => :'Integer',
        :'last_modified_by' => :'String',
        :'last_modified_date_time' => :'Time',
        :'name' => :'String',
        :'start_date' => :'Date',
        :'target_prospect_type' => :'String',
        :'timezone' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::Campaign` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::Campaign`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'accepted_call_tracking_terms')
        self.accepted_call_tracking_terms = attributes[:'accepted_call_tracking_terms']
      end

      if attributes.key?(:'call_tracking_campaign_id')
        self.call_tracking_campaign_id = attributes[:'call_tracking_campaign_id']
      end

      if attributes.key?(:'call_tracking_enabled')
        self.call_tracking_enabled = attributes[:'call_tracking_enabled']
      end

      if attributes.key?(:'call_tracking_forwar')
        self.call_tracking_forwar = attributes[:'call_tracking_forwar']
      end

      if attributes.key?(:'call_tracking_forwar_after_hours')
        self.call_tracking_forwar_after_hours = attributes[:'call_tracking_forwar_after_hours']
      end

      if attributes.key?(:'call_tracking_phone_number')
        self.call_tracking_phone_number = attributes[:'call_tracking_phone_number']
      end

      if attributes.key?(:'call_tracking_referrer')
        self.call_tracking_referrer = attributes[:'call_tracking_referrer']
      end

      if attributes.key?(:'call_tracking_search_phrase')
        self.call_tracking_search_phrase = attributes[:'call_tracking_search_phrase']
      end

      if attributes.key?(:'campaign_source')
        self.campaign_source = attributes[:'campaign_source']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'created_date_time')
        self.created_date_time = attributes[:'created_date_time']
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'last_modified_by')
        self.last_modified_by = attributes[:'last_modified_by']
      end

      if attributes.key?(:'last_modified_date_time')
        self.last_modified_date_time = attributes[:'last_modified_date_time']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'target_prospect_type')
        self.target_prospect_type = attributes[:'target_prospect_type']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          accepted_call_tracking_terms == o.accepted_call_tracking_terms &&
          call_tracking_campaign_id == o.call_tracking_campaign_id &&
          call_tracking_enabled == o.call_tracking_enabled &&
          call_tracking_forwar == o.call_tracking_forwar &&
          call_tracking_forwar_after_hours == o.call_tracking_forwar_after_hours &&
          call_tracking_phone_number == o.call_tracking_phone_number &&
          call_tracking_referrer == o.call_tracking_referrer &&
          call_tracking_search_phrase == o.call_tracking_search_phrase &&
          campaign_source == o.campaign_source &&
          code == o.code &&
          created_by == o.created_by &&
          created_date_time == o.created_date_time &&
          custom_fields == o.custom_fields &&
          description == o.description &&
          end_date == o.end_date &&
          id == o.id &&
          last_modified_by == o.last_modified_by &&
          last_modified_date_time == o.last_modified_date_time &&
          name == o.name &&
          start_date == o.start_date &&
          target_prospect_type == o.target_prospect_type &&
          timezone == o.timezone
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [accepted_call_tracking_terms, call_tracking_campaign_id, call_tracking_enabled, call_tracking_forwar, call_tracking_forwar_after_hours, call_tracking_phone_number, call_tracking_referrer, call_tracking_search_phrase, campaign_source, code, created_by, created_date_time, custom_fields, description, end_date, id, last_modified_by, last_modified_date_time, name, start_date, target_prospect_type, timezone].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
