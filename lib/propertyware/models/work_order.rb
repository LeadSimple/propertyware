=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Work Order
  class WorkOrder
    # Number of days that have passed since the work order was created.
    attr_accessor :age

    # Indicates if work order is approved.
    attr_accessor :approved

    # Work order approved Date.
    attr_accessor :approved_date

    # List of vendors attached to the work order.
    attr_accessor :assigned_vendors

    # Indicates if the tenant has granted your management staff access to enter his or her buildings and/or units.
    attr_accessor :authorize_enter

    # Id of the building associated with this work order.
    attr_accessor :building_id

    # This classifies the work order into a category.
    attr_accessor :category

    # Date on which the work was completed.
    attr_accessor :completed_date

    # Contract number.
    attr_accessor :contract_number

    # This indicates the estimated cost as entered by a person, the actual cost as determined by the work order bills, and the invoiced amount is the amount the owner will see on his or her statement based on the bill and markup/discount amount.
    attr_accessor :cost_estimate

    # User who created the record.
    attr_accessor :created_by

    # Date and time the record was created. (Timezone: UTC)
    attr_accessor :created_date_time

    # Custom fields.
    attr_accessor :custom_fields

    # Authorized date to enter unit.
    attr_accessor :date_to_enter

    # This is a detailed description of the problem.
    attr_accessor :description

    # Expected number of hours to complete the work order.
    attr_accessor :hour_estimate

    # Unique identifier.
    attr_accessor :id

    # User who last modified the record.
    attr_accessor :last_modified_by

    # Date and time the record was last modified. (Timezone: UTC)
    attr_accessor :last_modified_date_time

    # If the work order is attached to an occupied building or unit, this is the lease name of that lease.
    attr_accessor :lease

    # Buildings and/or units associated with this work order.
    attr_accessor :location

    # Maintenance notice defined for the building that the work order is attached to.
    attr_accessor :maintenance_notice

    # Name of the person who is responsible for managing the work order.
    attr_accessor :managed_by

    # Number assigned to this work order.
    attr_accessor :number

    # Id of the portfolio associated with this work order.
    attr_accessor :portfolio_id

    # This identifies the priority of the work order as low, medium, or high.
    attr_accessor :priority

    # Publish To Owner Portal.
    attr_accessor :publish_to_owner_portal

    # Publish To Tenant Portal.
    attr_accessor :publish_to_tenant_portal

    # This identifies the person that reported the problem, typically the tenant or owner associated with the buildings or units.
    attr_accessor :requested_by

    # List of materials required to complete the work order.
    attr_accessor :required_materials

    # Date on which the work is scheduled to be completed.
    attr_accessor :scheduled_end_date

    # Search tag name.
    attr_accessor :search_tag

    # This identifies how the problem was reported, such as telephone, in person, email, etc.
    attr_accessor :source

    # This describes the location in the buildings or units where the work is needed.
    attr_accessor :specific_location

    # Date on which the work was started.
    attr_accessor :start_date

    # Current status of the work order.
    attr_accessor :status

    # This classifies the work order into one of the following types: general, service request, turnover, inspection, estimate etc.
    attr_accessor :type

    # Id of the unit associated with this work order.
    attr_accessor :unit_id

    attr_accessor :unit_ids

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'age' => :'age',
        :'approved' => :'approved',
        :'approved_date' => :'approvedDate',
        :'assigned_vendors' => :'assignedVendors',
        :'authorize_enter' => :'authorizeEnter',
        :'building_id' => :'buildingID',
        :'category' => :'category',
        :'completed_date' => :'completedDate',
        :'contract_number' => :'contractNumber',
        :'cost_estimate' => :'costEstimate',
        :'created_by' => :'createdBy',
        :'created_date_time' => :'createdDateTime',
        :'custom_fields' => :'customFields',
        :'date_to_enter' => :'dateToEnter',
        :'description' => :'description',
        :'hour_estimate' => :'hourEstimate',
        :'id' => :'id',
        :'last_modified_by' => :'lastModifiedBy',
        :'last_modified_date_time' => :'lastModifiedDateTime',
        :'lease' => :'lease',
        :'location' => :'location',
        :'maintenance_notice' => :'maintenanceNotice',
        :'managed_by' => :'managedBy',
        :'number' => :'number',
        :'portfolio_id' => :'portfolioID',
        :'priority' => :'priority',
        :'publish_to_owner_portal' => :'publishToOwnerPortal',
        :'publish_to_tenant_portal' => :'publishToTenantPortal',
        :'requested_by' => :'requestedBy',
        :'required_materials' => :'requiredMaterials',
        :'scheduled_end_date' => :'scheduledEndDate',
        :'search_tag' => :'searchTag',
        :'source' => :'source',
        :'specific_location' => :'specificLocation',
        :'start_date' => :'startDate',
        :'status' => :'status',
        :'type' => :'type',
        :'unit_id' => :'unitID',
        :'unit_ids' => :'unitIDs'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'age' => :'Integer',
        :'approved' => :'Boolean',
        :'approved_date' => :'Date',
        :'assigned_vendors' => :'Array<BasicVendor>',
        :'authorize_enter' => :'String',
        :'building_id' => :'Integer',
        :'category' => :'String',
        :'completed_date' => :'Date',
        :'contract_number' => :'String',
        :'cost_estimate' => :'Float',
        :'created_by' => :'String',
        :'created_date_time' => :'Time',
        :'custom_fields' => :'Array<CustomField>',
        :'date_to_enter' => :'Time',
        :'description' => :'String',
        :'hour_estimate' => :'Float',
        :'id' => :'Integer',
        :'last_modified_by' => :'String',
        :'last_modified_date_time' => :'Time',
        :'lease' => :'String',
        :'location' => :'String',
        :'maintenance_notice' => :'String',
        :'managed_by' => :'String',
        :'number' => :'Integer',
        :'portfolio_id' => :'Integer',
        :'priority' => :'String',
        :'publish_to_owner_portal' => :'Boolean',
        :'publish_to_tenant_portal' => :'Boolean',
        :'requested_by' => :'String',
        :'required_materials' => :'String',
        :'scheduled_end_date' => :'Date',
        :'search_tag' => :'String',
        :'source' => :'String',
        :'specific_location' => :'String',
        :'start_date' => :'Date',
        :'status' => :'String',
        :'type' => :'String',
        :'unit_id' => :'Integer',
        :'unit_ids' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::WorkOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::WorkOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'age')
        self.age = attributes[:'age']
      end

      if attributes.key?(:'approved')
        self.approved = attributes[:'approved']
      end

      if attributes.key?(:'approved_date')
        self.approved_date = attributes[:'approved_date']
      end

      if attributes.key?(:'assigned_vendors')
        if (value = attributes[:'assigned_vendors']).is_a?(Array)
          self.assigned_vendors = value
        end
      end

      if attributes.key?(:'authorize_enter')
        self.authorize_enter = attributes[:'authorize_enter']
      end

      if attributes.key?(:'building_id')
        self.building_id = attributes[:'building_id']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'completed_date')
        self.completed_date = attributes[:'completed_date']
      end

      if attributes.key?(:'contract_number')
        self.contract_number = attributes[:'contract_number']
      end

      if attributes.key?(:'cost_estimate')
        self.cost_estimate = attributes[:'cost_estimate']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'created_date_time')
        self.created_date_time = attributes[:'created_date_time']
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end

      if attributes.key?(:'date_to_enter')
        self.date_to_enter = attributes[:'date_to_enter']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'hour_estimate')
        self.hour_estimate = attributes[:'hour_estimate']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'last_modified_by')
        self.last_modified_by = attributes[:'last_modified_by']
      end

      if attributes.key?(:'last_modified_date_time')
        self.last_modified_date_time = attributes[:'last_modified_date_time']
      end

      if attributes.key?(:'lease')
        self.lease = attributes[:'lease']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'maintenance_notice')
        self.maintenance_notice = attributes[:'maintenance_notice']
      end

      if attributes.key?(:'managed_by')
        self.managed_by = attributes[:'managed_by']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'portfolio_id')
        self.portfolio_id = attributes[:'portfolio_id']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'publish_to_owner_portal')
        self.publish_to_owner_portal = attributes[:'publish_to_owner_portal']
      end

      if attributes.key?(:'publish_to_tenant_portal')
        self.publish_to_tenant_portal = attributes[:'publish_to_tenant_portal']
      end

      if attributes.key?(:'requested_by')
        self.requested_by = attributes[:'requested_by']
      end

      if attributes.key?(:'required_materials')
        self.required_materials = attributes[:'required_materials']
      end

      if attributes.key?(:'scheduled_end_date')
        self.scheduled_end_date = attributes[:'scheduled_end_date']
      end

      if attributes.key?(:'search_tag')
        self.search_tag = attributes[:'search_tag']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'specific_location')
        self.specific_location = attributes[:'specific_location']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'unit_id')
        self.unit_id = attributes[:'unit_id']
      end

      if attributes.key?(:'unit_ids')
        self.unit_ids = attributes[:'unit_ids']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      authorize_enter_validator = EnumAttributeValidator.new('String', ["NO", "ANYTIME", "SPECIFIEDTIME"])
      return false unless authorize_enter_validator.valid?(@authorize_enter)
      priority_validator = EnumAttributeValidator.new('String', ["HIGH", "MEDIUM", "LOW"])
      return false unless priority_validator.valid?(@priority)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorize_enter Object to be assigned
    def authorize_enter=(authorize_enter)
      validator = EnumAttributeValidator.new('String', ["NO", "ANYTIME", "SPECIFIEDTIME"])
      unless validator.valid?(authorize_enter)
        fail ArgumentError, "invalid value #{ authorize_enter.inspect } for \"authorize_enter\", must be one of #{validator.allowable_values}."
      end
      @authorize_enter = authorize_enter
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] priority Object to be assigned
    def priority=(priority)
      validator = EnumAttributeValidator.new('String', ["HIGH", "MEDIUM", "LOW"])
      unless validator.valid?(priority)
        fail ArgumentError, "invalid value #{ priority.inspect } for \"priority\", must be one of #{validator.allowable_values}."
      end
      @priority = priority
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          age == o.age &&
          approved == o.approved &&
          approved_date == o.approved_date &&
          assigned_vendors == o.assigned_vendors &&
          authorize_enter == o.authorize_enter &&
          building_id == o.building_id &&
          category == o.category &&
          completed_date == o.completed_date &&
          contract_number == o.contract_number &&
          cost_estimate == o.cost_estimate &&
          created_by == o.created_by &&
          created_date_time == o.created_date_time &&
          custom_fields == o.custom_fields &&
          date_to_enter == o.date_to_enter &&
          description == o.description &&
          hour_estimate == o.hour_estimate &&
          id == o.id &&
          last_modified_by == o.last_modified_by &&
          last_modified_date_time == o.last_modified_date_time &&
          lease == o.lease &&
          location == o.location &&
          maintenance_notice == o.maintenance_notice &&
          managed_by == o.managed_by &&
          number == o.number &&
          portfolio_id == o.portfolio_id &&
          priority == o.priority &&
          publish_to_owner_portal == o.publish_to_owner_portal &&
          publish_to_tenant_portal == o.publish_to_tenant_portal &&
          requested_by == o.requested_by &&
          required_materials == o.required_materials &&
          scheduled_end_date == o.scheduled_end_date &&
          search_tag == o.search_tag &&
          source == o.source &&
          specific_location == o.specific_location &&
          start_date == o.start_date &&
          status == o.status &&
          type == o.type &&
          unit_id == o.unit_id &&
          unit_ids == o.unit_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [age, approved, approved_date, assigned_vendors, authorize_enter, building_id, category, completed_date, contract_number, cost_estimate, created_by, created_date_time, custom_fields, date_to_enter, description, hour_estimate, id, last_modified_by, last_modified_date_time, lease, location, maintenance_notice, managed_by, number, portfolio_id, priority, publish_to_owner_portal, publish_to_tenant_portal, requested_by, required_materials, scheduled_end_date, search_tag, source, specific_location, start_date, status, type, unit_id, unit_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
