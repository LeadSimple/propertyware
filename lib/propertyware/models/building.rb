=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Building
  class Building
    # Property abbreviation.
    attr_accessor :abbreviation

    # Indicates if the property is active or inactive.
    attr_accessor :active

    attr_accessor :address

    # Property amenities list.
    attr_accessor :amenities

    # Application fee rule
    attr_accessor :application_fee_rule

    # Property total area units.
    attr_accessor :area_units

    # Base Year.
    attr_accessor :base_year

    # Base Year Operating Expenses.
    attr_accessor :base_year_operating_expenses

    # Base Year Property Insurance.
    attr_accessor :base_year_property_insurance

    # Base Year Property Taxes.
    attr_accessor :base_year_property_taxes

    # Property category.
    attr_accessor :category

    # Number of units in the building.
    attr_accessor :count_unit

    # Property region of a state.
    attr_accessor :county

    # User who created the record.
    attr_accessor :created_by

    # Date and time the record was created. (Timezone: UTC)
    attr_accessor :created_date_time

    # Custom fields.
    attr_accessor :custom_fields

    # Featured Rental
    attr_accessor :featured_for_rent

    # Floor number.
    attr_accessor :floor_number

    # FTB deductible amount
    attr_accessor :ftb_deductable

    # FTB withholding percentage
    attr_accessor :ftb_withholding_percentage

    # FTB withholding type
    attr_accessor :ftb_withholding_type

    # Unique identifier.
    attr_accessor :id

    # Unique identifier for Global Search.
    attr_accessor :id_number

    # User who last modified the record.
    attr_accessor :last_modified_by

    # Date and time the record was last modified. (Timezone: UTC)
    attr_accessor :last_modified_date_time

    # Related lease ID.
    attr_accessor :lease_id

    # Maintenance labor surcharge amount
    attr_accessor :maintenance_labor_surcharge_amount

    # Maintenance labor surcharge type
    attr_accessor :maintenance_labor_surcharge_type

    # Property maintenance description.
    attr_accessor :maintenance_notice

    # Maintenance spending limit amount
    attr_accessor :maintenance_spending_limit_amount

    # Property maintenance spending limit.
    attr_accessor :maintenance_spending_limit_time

    attr_accessor :management

    attr_accessor :marketing

    # Move in Window must be with in these days given here 1 to 30 and 45,60,75,90
    attr_accessor :move_in_days

    # Indicates if the building is multi family or single family.
    attr_accessor :multi_unit

    # Name of the property.
    attr_accessor :name

    # Property neighborhood.
    attr_accessor :neighborhood

    # Number floors
    attr_accessor :number_floors

    # Number of bathrooms in the property.
    attr_accessor :number_of_bathrooms

    # Number of bedrooms in the property.
    attr_accessor :number_of_bedrooms

    # ID of the portfolio associated with this property.
    attr_accessor :portfolio_id

    # Property manager details.
    attr_accessor :property_manager_list

    # Type of property.
    attr_accessor :property_type

    # Indicates if the property is ready to lease.
    attr_accessor :ready

    # Reason for property lost
    attr_accessor :reason_for_property_lost

    # Indicates if the property is available for rent.
    attr_accessor :rentable

    # Property search tag.
    attr_accessor :search_tag

    # Property status (occupied/vacant).
    attr_accessor :status

    # Syndicate
    attr_accessor :syndicate

    # Target deposit.
    attr_accessor :target_deposit

    # Property target rent.
    attr_accessor :target_rent

    # Property target rent units.
    attr_accessor :target_rent_units

    # Property total area.
    attr_accessor :total_area

    # Property type.
    attr_accessor :type

    # Property website URL.
    attr_accessor :website

    # Property built year.
    attr_accessor :year_built

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'abbreviation' => :'abbreviation',
        :'active' => :'active',
        :'address' => :'address',
        :'amenities' => :'amenities',
        :'application_fee_rule' => :'applicationFeeRule',
        :'area_units' => :'areaUnits',
        :'base_year' => :'baseYear',
        :'base_year_operating_expenses' => :'baseYearOperatingExpenses',
        :'base_year_property_insurance' => :'baseYearPropertyInsurance',
        :'base_year_property_taxes' => :'baseYearPropertyTaxes',
        :'category' => :'category',
        :'count_unit' => :'countUnit',
        :'county' => :'county',
        :'created_by' => :'createdBy',
        :'created_date_time' => :'createdDateTime',
        :'custom_fields' => :'customFields',
        :'featured_for_rent' => :'featuredForRent',
        :'floor_number' => :'floorNumber',
        :'ftb_deductable' => :'ftbDeductable',
        :'ftb_withholding_percentage' => :'ftbWithholdingPercentage',
        :'ftb_withholding_type' => :'ftbWithholdingType',
        :'id' => :'id',
        :'id_number' => :'idNumber',
        :'last_modified_by' => :'lastModifiedBy',
        :'last_modified_date_time' => :'lastModifiedDateTime',
        :'lease_id' => :'leaseID',
        :'maintenance_labor_surcharge_amount' => :'maintenanceLaborSurchargeAmount',
        :'maintenance_labor_surcharge_type' => :'maintenanceLaborSurchargeType',
        :'maintenance_notice' => :'maintenanceNotice',
        :'maintenance_spending_limit_amount' => :'maintenanceSpendingLimitAmount',
        :'maintenance_spending_limit_time' => :'maintenanceSpendingLimitTime',
        :'management' => :'management',
        :'marketing' => :'marketing',
        :'move_in_days' => :'moveInDays',
        :'multi_unit' => :'multiUnit',
        :'name' => :'name',
        :'neighborhood' => :'neighborhood',
        :'number_floors' => :'numberFloors',
        :'number_of_bathrooms' => :'numberOfBathrooms',
        :'number_of_bedrooms' => :'numberOfBedrooms',
        :'portfolio_id' => :'portfolioID',
        :'property_manager_list' => :'propertyManagerList',
        :'property_type' => :'propertyType',
        :'ready' => :'ready',
        :'reason_for_property_lost' => :'reasonForPropertyLost',
        :'rentable' => :'rentable',
        :'search_tag' => :'searchTag',
        :'status' => :'status',
        :'syndicate' => :'syndicate',
        :'target_deposit' => :'targetDeposit',
        :'target_rent' => :'targetRent',
        :'target_rent_units' => :'targetRentUnits',
        :'total_area' => :'totalArea',
        :'type' => :'type',
        :'website' => :'website',
        :'year_built' => :'yearBuilt'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'abbreviation' => :'String',
        :'active' => :'Boolean',
        :'address' => :'Address',
        :'amenities' => :'Array<Amenity>',
        :'application_fee_rule' => :'String',
        :'area_units' => :'String',
        :'base_year' => :'Integer',
        :'base_year_operating_expenses' => :'String',
        :'base_year_property_insurance' => :'String',
        :'base_year_property_taxes' => :'String',
        :'category' => :'String',
        :'count_unit' => :'Integer',
        :'county' => :'String',
        :'created_by' => :'String',
        :'created_date_time' => :'Time',
        :'custom_fields' => :'Array<CustomField>',
        :'featured_for_rent' => :'Boolean',
        :'floor_number' => :'Integer',
        :'ftb_deductable' => :'Float',
        :'ftb_withholding_percentage' => :'Float',
        :'ftb_withholding_type' => :'String',
        :'id' => :'Integer',
        :'id_number' => :'Integer',
        :'last_modified_by' => :'String',
        :'last_modified_date_time' => :'Time',
        :'lease_id' => :'Integer',
        :'maintenance_labor_surcharge_amount' => :'Float',
        :'maintenance_labor_surcharge_type' => :'String',
        :'maintenance_notice' => :'String',
        :'maintenance_spending_limit_amount' => :'Float',
        :'maintenance_spending_limit_time' => :'String',
        :'management' => :'ManagementSettings',
        :'marketing' => :'Marketing',
        :'move_in_days' => :'Integer',
        :'multi_unit' => :'String',
        :'name' => :'String',
        :'neighborhood' => :'String',
        :'number_floors' => :'Integer',
        :'number_of_bathrooms' => :'Float',
        :'number_of_bedrooms' => :'Integer',
        :'portfolio_id' => :'Integer',
        :'property_manager_list' => :'Array<PropertyManager>',
        :'property_type' => :'String',
        :'ready' => :'Boolean',
        :'reason_for_property_lost' => :'String',
        :'rentable' => :'Boolean',
        :'search_tag' => :'String',
        :'status' => :'String',
        :'syndicate' => :'Boolean',
        :'target_deposit' => :'String',
        :'target_rent' => :'Float',
        :'target_rent_units' => :'String',
        :'total_area' => :'Float',
        :'type' => :'String',
        :'website' => :'String',
        :'year_built' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::Building` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::Building`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'abbreviation')
        self.abbreviation = attributes[:'abbreviation']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'amenities')
        if (value = attributes[:'amenities']).is_a?(Array)
          self.amenities = value
        end
      end

      if attributes.key?(:'application_fee_rule')
        self.application_fee_rule = attributes[:'application_fee_rule']
      end

      if attributes.key?(:'area_units')
        self.area_units = attributes[:'area_units']
      else
        self.area_units = 'Sq Ft'
      end

      if attributes.key?(:'base_year')
        self.base_year = attributes[:'base_year']
      end

      if attributes.key?(:'base_year_operating_expenses')
        self.base_year_operating_expenses = attributes[:'base_year_operating_expenses']
      end

      if attributes.key?(:'base_year_property_insurance')
        self.base_year_property_insurance = attributes[:'base_year_property_insurance']
      end

      if attributes.key?(:'base_year_property_taxes')
        self.base_year_property_taxes = attributes[:'base_year_property_taxes']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'count_unit')
        self.count_unit = attributes[:'count_unit']
      end

      if attributes.key?(:'county')
        self.county = attributes[:'county']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'created_date_time')
        self.created_date_time = attributes[:'created_date_time']
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end

      if attributes.key?(:'featured_for_rent')
        self.featured_for_rent = attributes[:'featured_for_rent']
      end

      if attributes.key?(:'floor_number')
        self.floor_number = attributes[:'floor_number']
      end

      if attributes.key?(:'ftb_deductable')
        self.ftb_deductable = attributes[:'ftb_deductable']
      end

      if attributes.key?(:'ftb_withholding_percentage')
        self.ftb_withholding_percentage = attributes[:'ftb_withholding_percentage']
      end

      if attributes.key?(:'ftb_withholding_type')
        self.ftb_withholding_type = attributes[:'ftb_withholding_type']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'id_number')
        self.id_number = attributes[:'id_number']
      end

      if attributes.key?(:'last_modified_by')
        self.last_modified_by = attributes[:'last_modified_by']
      end

      if attributes.key?(:'last_modified_date_time')
        self.last_modified_date_time = attributes[:'last_modified_date_time']
      end

      if attributes.key?(:'lease_id')
        self.lease_id = attributes[:'lease_id']
      end

      if attributes.key?(:'maintenance_labor_surcharge_amount')
        self.maintenance_labor_surcharge_amount = attributes[:'maintenance_labor_surcharge_amount']
      end

      if attributes.key?(:'maintenance_labor_surcharge_type')
        self.maintenance_labor_surcharge_type = attributes[:'maintenance_labor_surcharge_type']
      end

      if attributes.key?(:'maintenance_notice')
        self.maintenance_notice = attributes[:'maintenance_notice']
      end

      if attributes.key?(:'maintenance_spending_limit_amount')
        self.maintenance_spending_limit_amount = attributes[:'maintenance_spending_limit_amount']
      end

      if attributes.key?(:'maintenance_spending_limit_time')
        self.maintenance_spending_limit_time = attributes[:'maintenance_spending_limit_time']
      end

      if attributes.key?(:'management')
        self.management = attributes[:'management']
      end

      if attributes.key?(:'marketing')
        self.marketing = attributes[:'marketing']
      end

      if attributes.key?(:'move_in_days')
        self.move_in_days = attributes[:'move_in_days']
      end

      if attributes.key?(:'multi_unit')
        self.multi_unit = attributes[:'multi_unit']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'neighborhood')
        self.neighborhood = attributes[:'neighborhood']
      end

      if attributes.key?(:'number_floors')
        self.number_floors = attributes[:'number_floors']
      end

      if attributes.key?(:'number_of_bathrooms')
        self.number_of_bathrooms = attributes[:'number_of_bathrooms']
      end

      if attributes.key?(:'number_of_bedrooms')
        self.number_of_bedrooms = attributes[:'number_of_bedrooms']
      end

      if attributes.key?(:'portfolio_id')
        self.portfolio_id = attributes[:'portfolio_id']
      end

      if attributes.key?(:'property_manager_list')
        if (value = attributes[:'property_manager_list']).is_a?(Array)
          self.property_manager_list = value
        end
      end

      if attributes.key?(:'property_type')
        self.property_type = attributes[:'property_type']
      end

      if attributes.key?(:'ready')
        self.ready = attributes[:'ready']
      end

      if attributes.key?(:'reason_for_property_lost')
        self.reason_for_property_lost = attributes[:'reason_for_property_lost']
      end

      if attributes.key?(:'rentable')
        self.rentable = attributes[:'rentable']
      end

      if attributes.key?(:'search_tag')
        self.search_tag = attributes[:'search_tag']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'syndicate')
        self.syndicate = attributes[:'syndicate']
      end

      if attributes.key?(:'target_deposit')
        self.target_deposit = attributes[:'target_deposit']
      end

      if attributes.key?(:'target_rent')
        self.target_rent = attributes[:'target_rent']
      end

      if attributes.key?(:'target_rent_units')
        self.target_rent_units = attributes[:'target_rent_units']
      end

      if attributes.key?(:'total_area')
        self.total_area = attributes[:'total_area']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'year_built')
        self.year_built = attributes[:'year_built']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      area_units_validator = EnumAttributeValidator.new('String', ["Sq Ft", "Sq M"])
      return false unless area_units_validator.valid?(@area_units)
      category_validator = EnumAttributeValidator.new('String', ["RESIDENTIAL", "COMMERCIAL"])
      return false unless category_validator.valid?(@category)
      maintenance_spending_limit_time_validator = EnumAttributeValidator.new('String', ["NO_LIMIT", "MONTHLY_LIMIT", "YEARLY_LIMIT"])
      return false unless maintenance_spending_limit_time_validator.valid?(@maintenance_spending_limit_time)
      property_type_validator = EnumAttributeValidator.new('String', ["NONE", "APARTMENT", "CONDO", "COMMERCIAL", "DU_FOUR_PLEX", "HOUSE", "SECTION_8_AFFORDABLE", "SENIOR", "SHORT_TERM_VACATION", "STUDENT", "TOWNHOUSE", "OTHER"])
      return false unless property_type_validator.valid?(@property_type)
      target_rent_units_validator = EnumAttributeValidator.new('String', ["DOLLAR_PER_SQ_FT_MONTH", "DOLLAR_PER_SQ_FT_YEAR", "DOLLAR_PER_SQ_M_MONTH", "DOLLAR_PER_SQ_M_YEAR", "DOLLAR_PER_MONTH", "DOLLAR_PER_WEEK", "DOLLAR_PER_NIGHT"])
      return false unless target_rent_units_validator.valid?(@target_rent_units)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] area_units Object to be assigned
    def area_units=(area_units)
      validator = EnumAttributeValidator.new('String', ["Sq Ft", "Sq M"])
      unless validator.valid?(area_units)
        area_units = 'Sq Ft'
      end
      @area_units = area_units
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      validator = EnumAttributeValidator.new('String', ["RESIDENTIAL", "COMMERCIAL"])
      unless validator.valid?(category)
        fail ArgumentError, "invalid value #{ category.inspect } for \"category\", must be one of #{validator.allowable_values}."
      end
      @category = category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maintenance_spending_limit_time Object to be assigned
    def maintenance_spending_limit_time=(maintenance_spending_limit_time)
      validator = EnumAttributeValidator.new('String', ["NO_LIMIT", "MONTHLY_LIMIT", "YEARLY_LIMIT"])
      unless validator.valid?(maintenance_spending_limit_time)
        fail ArgumentError, "invalid value #{ maintenance_spending_limit_time.inspect } for \"maintenance_spending_limit_time\", must be one of #{validator.allowable_values}."
      end
      @maintenance_spending_limit_time = maintenance_spending_limit_time
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] property_type Object to be assigned
    def property_type=(property_type)
      validator = EnumAttributeValidator.new('String', ["NONE", "APARTMENT", "CONDO", "COMMERCIAL", "DU_FOUR_PLEX", "HOUSE", "SECTION_8_AFFORDABLE", "SENIOR", "SHORT_TERM_VACATION", "STUDENT", "TOWNHOUSE", "OTHER"])
      unless validator.valid?(property_type)
        fail ArgumentError, "invalid value #{ property_type.inspect } for \"property_type\", must be one of #{validator.allowable_values}."
      end
      @property_type = property_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_rent_units Object to be assigned
    def target_rent_units=(target_rent_units)
      validator = EnumAttributeValidator.new('String', ["DOLLAR_PER_SQ_FT_MONTH", "DOLLAR_PER_SQ_FT_YEAR", "DOLLAR_PER_SQ_M_MONTH", "DOLLAR_PER_SQ_M_YEAR", "DOLLAR_PER_MONTH", "DOLLAR_PER_WEEK", "DOLLAR_PER_NIGHT"])
      unless validator.valid?(target_rent_units)
        fail ArgumentError, "invalid value #{ target_rent_units.inspect } for \"target_rent_units\", must be one of #{validator.allowable_values}."
      end
      @target_rent_units = target_rent_units
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          abbreviation == o.abbreviation &&
          active == o.active &&
          address == o.address &&
          amenities == o.amenities &&
          application_fee_rule == o.application_fee_rule &&
          area_units == o.area_units &&
          base_year == o.base_year &&
          base_year_operating_expenses == o.base_year_operating_expenses &&
          base_year_property_insurance == o.base_year_property_insurance &&
          base_year_property_taxes == o.base_year_property_taxes &&
          category == o.category &&
          count_unit == o.count_unit &&
          county == o.county &&
          created_by == o.created_by &&
          created_date_time == o.created_date_time &&
          custom_fields == o.custom_fields &&
          featured_for_rent == o.featured_for_rent &&
          floor_number == o.floor_number &&
          ftb_deductable == o.ftb_deductable &&
          ftb_withholding_percentage == o.ftb_withholding_percentage &&
          ftb_withholding_type == o.ftb_withholding_type &&
          id == o.id &&
          id_number == o.id_number &&
          last_modified_by == o.last_modified_by &&
          last_modified_date_time == o.last_modified_date_time &&
          lease_id == o.lease_id &&
          maintenance_labor_surcharge_amount == o.maintenance_labor_surcharge_amount &&
          maintenance_labor_surcharge_type == o.maintenance_labor_surcharge_type &&
          maintenance_notice == o.maintenance_notice &&
          maintenance_spending_limit_amount == o.maintenance_spending_limit_amount &&
          maintenance_spending_limit_time == o.maintenance_spending_limit_time &&
          management == o.management &&
          marketing == o.marketing &&
          move_in_days == o.move_in_days &&
          multi_unit == o.multi_unit &&
          name == o.name &&
          neighborhood == o.neighborhood &&
          number_floors == o.number_floors &&
          number_of_bathrooms == o.number_of_bathrooms &&
          number_of_bedrooms == o.number_of_bedrooms &&
          portfolio_id == o.portfolio_id &&
          property_manager_list == o.property_manager_list &&
          property_type == o.property_type &&
          ready == o.ready &&
          reason_for_property_lost == o.reason_for_property_lost &&
          rentable == o.rentable &&
          search_tag == o.search_tag &&
          status == o.status &&
          syndicate == o.syndicate &&
          target_deposit == o.target_deposit &&
          target_rent == o.target_rent &&
          target_rent_units == o.target_rent_units &&
          total_area == o.total_area &&
          type == o.type &&
          website == o.website &&
          year_built == o.year_built
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [abbreviation, active, address, amenities, application_fee_rule, area_units, base_year, base_year_operating_expenses, base_year_property_insurance, base_year_property_taxes, category, count_unit, county, created_by, created_date_time, custom_fields, featured_for_rent, floor_number, ftb_deductable, ftb_withholding_percentage, ftb_withholding_type, id, id_number, last_modified_by, last_modified_date_time, lease_id, maintenance_labor_surcharge_amount, maintenance_labor_surcharge_type, maintenance_notice, maintenance_spending_limit_amount, maintenance_spending_limit_time, management, marketing, move_in_days, multi_unit, name, neighborhood, number_floors, number_of_bathrooms, number_of_bedrooms, portfolio_id, property_manager_list, property_type, ready, reason_for_property_lost, rentable, search_tag, status, syndicate, target_deposit, target_rent, target_rent_units, total_area, type, website, year_built].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
