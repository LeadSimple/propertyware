=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Marketing Information
  class Marketing
    # Available date to lease for a unit/building.
    attr_accessor :available_date

    # Marketing description.
    attr_accessor :comments

    # Indicates if property is featured for rent or sale.
    attr_accessor :featured

    # Indicates if the unit/building is featured for rent.
    attr_accessor :featured_for_rent

    # Indicates if unit/building is featured for sale.
    attr_accessor :featured_for_sale

    # Indicates if this building/unit is for sale.
    attr_accessor :for_sale

    # Latitude for geolocation of this building/unit.
    attr_accessor :latitude

    # Lease terms of a unit/building.
    attr_accessor :lease_terms

    # Unit/building lease terms units.
    attr_accessor :lease_terms_units

    # Longitude for geolocation of this building/unit.
    attr_accessor :longitude

    # Marketing name.
    attr_accessor :marketing_name

    # MLS lease number of this building/unit.
    attr_accessor :mls_lease_number

    # MLS number of this building/unit.
    attr_accessor :mls_number

    # Other tenant charges.
    attr_accessor :other_tenant_charges

    # Parcel number of this building/unit.
    attr_accessor :parcel_number

    # Indicates if pets are allowed in a unit/building.
    attr_accessor :pets_allowed

    # Posting title name for marketing this building/unit.
    attr_accessor :posting_title

    # Published For Rent
    attr_accessor :published_for_rent

    # Indicates if the unit/building is published for sale.
    attr_accessor :published_for_sale

    # Sale price of this building/unit.
    attr_accessor :sale_price

    # Sale terms of this building/unit.
    attr_accessor :sale_terms

    # Marketing short description.
    attr_accessor :short_description

    # Indicates if smoking is allowed in this unit/building.
    attr_accessor :smoking_allowed

    # Specials of this building/unit.
    attr_accessor :specials

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'available_date' => :'availableDate',
        :'comments' => :'comments',
        :'featured' => :'featured',
        :'featured_for_rent' => :'featuredForRent',
        :'featured_for_sale' => :'featuredForSale',
        :'for_sale' => :'forSale',
        :'latitude' => :'latitude',
        :'lease_terms' => :'leaseTerms',
        :'lease_terms_units' => :'leaseTermsUnits',
        :'longitude' => :'longitude',
        :'marketing_name' => :'marketingName',
        :'mls_lease_number' => :'mlsLeaseNumber',
        :'mls_number' => :'mlsNumber',
        :'other_tenant_charges' => :'otherTenantCharges',
        :'parcel_number' => :'parcelNumber',
        :'pets_allowed' => :'petsAllowed',
        :'posting_title' => :'postingTitle',
        :'published_for_rent' => :'publishedForRent',
        :'published_for_sale' => :'publishedForSale',
        :'sale_price' => :'salePrice',
        :'sale_terms' => :'saleTerms',
        :'short_description' => :'shortDescription',
        :'smoking_allowed' => :'smokingAllowed',
        :'specials' => :'specials'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'available_date' => :'Date',
        :'comments' => :'String',
        :'featured' => :'Boolean',
        :'featured_for_rent' => :'Boolean',
        :'featured_for_sale' => :'Boolean',
        :'for_sale' => :'Boolean',
        :'latitude' => :'Float',
        :'lease_terms' => :'Integer',
        :'lease_terms_units' => :'String',
        :'longitude' => :'Float',
        :'marketing_name' => :'String',
        :'mls_lease_number' => :'String',
        :'mls_number' => :'String',
        :'other_tenant_charges' => :'String',
        :'parcel_number' => :'String',
        :'pets_allowed' => :'Boolean',
        :'posting_title' => :'String',
        :'published_for_rent' => :'Boolean',
        :'published_for_sale' => :'Boolean',
        :'sale_price' => :'Float',
        :'sale_terms' => :'String',
        :'short_description' => :'String',
        :'smoking_allowed' => :'Boolean',
        :'specials' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::Marketing` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::Marketing`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'available_date')
        self.available_date = attributes[:'available_date']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'featured')
        self.featured = attributes[:'featured']
      end

      if attributes.key?(:'featured_for_rent')
        self.featured_for_rent = attributes[:'featured_for_rent']
      end

      if attributes.key?(:'featured_for_sale')
        self.featured_for_sale = attributes[:'featured_for_sale']
      end

      if attributes.key?(:'for_sale')
        self.for_sale = attributes[:'for_sale']
      end

      if attributes.key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.key?(:'lease_terms')
        self.lease_terms = attributes[:'lease_terms']
      end

      if attributes.key?(:'lease_terms_units')
        self.lease_terms_units = attributes[:'lease_terms_units']
      end

      if attributes.key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.key?(:'marketing_name')
        self.marketing_name = attributes[:'marketing_name']
      end

      if attributes.key?(:'mls_lease_number')
        self.mls_lease_number = attributes[:'mls_lease_number']
      end

      if attributes.key?(:'mls_number')
        self.mls_number = attributes[:'mls_number']
      end

      if attributes.key?(:'other_tenant_charges')
        self.other_tenant_charges = attributes[:'other_tenant_charges']
      end

      if attributes.key?(:'parcel_number')
        self.parcel_number = attributes[:'parcel_number']
      end

      if attributes.key?(:'pets_allowed')
        self.pets_allowed = attributes[:'pets_allowed']
      end

      if attributes.key?(:'posting_title')
        self.posting_title = attributes[:'posting_title']
      end

      if attributes.key?(:'published_for_rent')
        self.published_for_rent = attributes[:'published_for_rent']
      end

      if attributes.key?(:'published_for_sale')
        self.published_for_sale = attributes[:'published_for_sale']
      end

      if attributes.key?(:'sale_price')
        self.sale_price = attributes[:'sale_price']
      end

      if attributes.key?(:'sale_terms')
        self.sale_terms = attributes[:'sale_terms']
      end

      if attributes.key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.key?(:'smoking_allowed')
        self.smoking_allowed = attributes[:'smoking_allowed']
      end

      if attributes.key?(:'specials')
        self.specials = attributes[:'specials']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          available_date == o.available_date &&
          comments == o.comments &&
          featured == o.featured &&
          featured_for_rent == o.featured_for_rent &&
          featured_for_sale == o.featured_for_sale &&
          for_sale == o.for_sale &&
          latitude == o.latitude &&
          lease_terms == o.lease_terms &&
          lease_terms_units == o.lease_terms_units &&
          longitude == o.longitude &&
          marketing_name == o.marketing_name &&
          mls_lease_number == o.mls_lease_number &&
          mls_number == o.mls_number &&
          other_tenant_charges == o.other_tenant_charges &&
          parcel_number == o.parcel_number &&
          pets_allowed == o.pets_allowed &&
          posting_title == o.posting_title &&
          published_for_rent == o.published_for_rent &&
          published_for_sale == o.published_for_sale &&
          sale_price == o.sale_price &&
          sale_terms == o.sale_terms &&
          short_description == o.short_description &&
          smoking_allowed == o.smoking_allowed &&
          specials == o.specials
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [available_date, comments, featured, featured_for_rent, featured_for_sale, for_sale, latitude, lease_terms, lease_terms_units, longitude, marketing_name, mls_lease_number, mls_number, other_tenant_charges, parcel_number, pets_allowed, posting_title, published_for_rent, published_for_sale, sale_price, sale_terms, short_description, smoking_allowed, specials].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
