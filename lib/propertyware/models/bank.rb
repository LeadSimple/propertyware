=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Bank for Request
  class Bank
    # Account holder.
    attr_accessor :bank_account_holder

    # Account holder SSN.
    attr_accessor :bank_account_holder_ssn_masked

    # Bank account number.
    attr_accessor :bank_account_number_decrypted

    # Bank account type - 1: Checking, 2: Savings
    attr_accessor :bank_account_type

    # Bank address line 1.
    attr_accessor :bank_address

    # Bank address line 2.
    attr_accessor :bank_address2

    # City.
    attr_accessor :bank_city

    # Bank name.
    attr_accessor :bank_institution

    # Bank routing number.
    attr_accessor :bank_routing_number_decrypted

    # State.
    attr_accessor :bank_state

    # Bank transit fraction.
    attr_accessor :bank_transit_fraction

    # Zip.
    attr_accessor :bank_zip

    # Deposit ticket type.
    attr_accessor :deposit_ticket_type

    # Nacha company ID.
    attr_accessor :nacha_company_id

    # Indicates if Nacha payment type is enabled.
    attr_accessor :nacha_enabled

    # Nacha destination number.
    attr_accessor :nacha_immediate_destination_number

    # Nacha immediate origin number.
    attr_accessor :nacha_immediate_origin_number

    # Nacha originating DFI number.
    attr_accessor :nacha_originating_dfi_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bank_account_holder' => :'bankAccountHolder',
        :'bank_account_holder_ssn_masked' => :'bankAccountHolderSSNMasked',
        :'bank_account_number_decrypted' => :'bankAccountNumberDecrypted',
        :'bank_account_type' => :'bankAccountType',
        :'bank_address' => :'bankAddress',
        :'bank_address2' => :'bankAddress2',
        :'bank_city' => :'bankCity',
        :'bank_institution' => :'bankInstitution',
        :'bank_routing_number_decrypted' => :'bankRoutingNumberDecrypted',
        :'bank_state' => :'bankState',
        :'bank_transit_fraction' => :'bankTransitFraction',
        :'bank_zip' => :'bankZip',
        :'deposit_ticket_type' => :'depositTicketType',
        :'nacha_company_id' => :'nachaCompanyID',
        :'nacha_enabled' => :'nachaEnabled',
        :'nacha_immediate_destination_number' => :'nachaImmediateDestinationNumber',
        :'nacha_immediate_origin_number' => :'nachaImmediateOriginNumber',
        :'nacha_originating_dfi_number' => :'nachaOriginatingDFINumber'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'bank_account_holder' => :'String',
        :'bank_account_holder_ssn_masked' => :'String',
        :'bank_account_number_decrypted' => :'String',
        :'bank_account_type' => :'Integer',
        :'bank_address' => :'String',
        :'bank_address2' => :'String',
        :'bank_city' => :'String',
        :'bank_institution' => :'String',
        :'bank_routing_number_decrypted' => :'String',
        :'bank_state' => :'String',
        :'bank_transit_fraction' => :'String',
        :'bank_zip' => :'String',
        :'deposit_ticket_type' => :'Integer',
        :'nacha_company_id' => :'String',
        :'nacha_enabled' => :'Boolean',
        :'nacha_immediate_destination_number' => :'String',
        :'nacha_immediate_origin_number' => :'String',
        :'nacha_originating_dfi_number' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::Bank` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::Bank`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'bank_account_holder')
        self.bank_account_holder = attributes[:'bank_account_holder']
      end

      if attributes.key?(:'bank_account_holder_ssn_masked')
        self.bank_account_holder_ssn_masked = attributes[:'bank_account_holder_ssn_masked']
      end

      if attributes.key?(:'bank_account_number_decrypted')
        self.bank_account_number_decrypted = attributes[:'bank_account_number_decrypted']
      end

      if attributes.key?(:'bank_account_type')
        self.bank_account_type = attributes[:'bank_account_type']
      end

      if attributes.key?(:'bank_address')
        self.bank_address = attributes[:'bank_address']
      end

      if attributes.key?(:'bank_address2')
        self.bank_address2 = attributes[:'bank_address2']
      end

      if attributes.key?(:'bank_city')
        self.bank_city = attributes[:'bank_city']
      end

      if attributes.key?(:'bank_institution')
        self.bank_institution = attributes[:'bank_institution']
      end

      if attributes.key?(:'bank_routing_number_decrypted')
        self.bank_routing_number_decrypted = attributes[:'bank_routing_number_decrypted']
      end

      if attributes.key?(:'bank_state')
        self.bank_state = attributes[:'bank_state']
      end

      if attributes.key?(:'bank_transit_fraction')
        self.bank_transit_fraction = attributes[:'bank_transit_fraction']
      end

      if attributes.key?(:'bank_zip')
        self.bank_zip = attributes[:'bank_zip']
      end

      if attributes.key?(:'deposit_ticket_type')
        self.deposit_ticket_type = attributes[:'deposit_ticket_type']
      end

      if attributes.key?(:'nacha_company_id')
        self.nacha_company_id = attributes[:'nacha_company_id']
      end

      if attributes.key?(:'nacha_enabled')
        self.nacha_enabled = attributes[:'nacha_enabled']
      end

      if attributes.key?(:'nacha_immediate_destination_number')
        self.nacha_immediate_destination_number = attributes[:'nacha_immediate_destination_number']
      end

      if attributes.key?(:'nacha_immediate_origin_number')
        self.nacha_immediate_origin_number = attributes[:'nacha_immediate_origin_number']
      end

      if attributes.key?(:'nacha_originating_dfi_number')
        self.nacha_originating_dfi_number = attributes[:'nacha_originating_dfi_number']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bank_account_holder == o.bank_account_holder &&
          bank_account_holder_ssn_masked == o.bank_account_holder_ssn_masked &&
          bank_account_number_decrypted == o.bank_account_number_decrypted &&
          bank_account_type == o.bank_account_type &&
          bank_address == o.bank_address &&
          bank_address2 == o.bank_address2 &&
          bank_city == o.bank_city &&
          bank_institution == o.bank_institution &&
          bank_routing_number_decrypted == o.bank_routing_number_decrypted &&
          bank_state == o.bank_state &&
          bank_transit_fraction == o.bank_transit_fraction &&
          bank_zip == o.bank_zip &&
          deposit_ticket_type == o.deposit_ticket_type &&
          nacha_company_id == o.nacha_company_id &&
          nacha_enabled == o.nacha_enabled &&
          nacha_immediate_destination_number == o.nacha_immediate_destination_number &&
          nacha_immediate_origin_number == o.nacha_immediate_origin_number &&
          nacha_originating_dfi_number == o.nacha_originating_dfi_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [bank_account_holder, bank_account_holder_ssn_masked, bank_account_number_decrypted, bank_account_type, bank_address, bank_address2, bank_city, bank_institution, bank_routing_number_decrypted, bank_state, bank_transit_fraction, bank_zip, deposit_ticket_type, nacha_company_id, nacha_enabled, nacha_immediate_destination_number, nacha_immediate_origin_number, nacha_originating_dfi_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
