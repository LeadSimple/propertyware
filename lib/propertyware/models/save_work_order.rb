=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Work Order for Request
  class SaveWorkOrder
    # This field indicates if the tenant has granted the maintenance staff permission to enter the unit.
    attr_accessor :authorize_enter

    # Id of the building associated with this work order.
    attr_accessor :building_id

    # Category of the work order.
    attr_accessor :category

    # Enter an estimate of the cost for performing the work outlined in the work order.
    attr_accessor :cost_estimate

    # Authorized date to enter unit.
    attr_accessor :date_to_enter

    # Description of the work order.
    attr_accessor :description

    # Estimated number of hours to complete the work order.
    attr_accessor :hour_estimate

    # Hour to enter. Allowed Value : 0 , 1, 2 ... 23
    attr_accessor :hour_to_enter

    # Minute to enter. Allowed Value : 0, 10, 20, 30, 40, 50
    attr_accessor :minute_to_enter

    # Priority of the work order.
    attr_accessor :priority

    # Publish To Owner Portal. Default=false
    attr_accessor :publish_to_owner_portal

    # Publish To Tenant Portal. Default=false
    attr_accessor :publish_to_tenant_portal

    # Id of the person that reported the problem, typically the tenant or owner associated with the buildings or units.
    attr_accessor :requested_by

    # Required Materials
    attr_accessor :required_materials

    # Date on which the work is scheduled to be completed.
    attr_accessor :scheduled_end_date

    # Enter a key term to allow you to quickly locate the work order.
    attr_accessor :search_tag

    # Source of the work order. This is a user configurable list with the following initial default values : None, Telephone, In Person, Email, Website, Internal, Tenant Portal, Inspection
    attr_accessor :source

    # Specific Location
    attr_accessor :specific_location

    # Date on which the work was started.
    attr_accessor :start_date

    # This classifies the work order into one of the following types: General, Service Request, Turnover, Inspection, Estimate etc.
    attr_accessor :type

    # List of unit Ids that are attached to the building.
    attr_accessor :unit_ids

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'authorize_enter' => :'authorizeEnter',
        :'building_id' => :'buildingID',
        :'category' => :'category',
        :'cost_estimate' => :'costEstimate',
        :'date_to_enter' => :'dateToEnter',
        :'description' => :'description',
        :'hour_estimate' => :'hourEstimate',
        :'hour_to_enter' => :'hourToEnter',
        :'minute_to_enter' => :'minuteToEnter',
        :'priority' => :'priority',
        :'publish_to_owner_portal' => :'publishToOwnerPortal',
        :'publish_to_tenant_portal' => :'publishToTenantPortal',
        :'requested_by' => :'requestedBy',
        :'required_materials' => :'requiredMaterials',
        :'scheduled_end_date' => :'scheduledEndDate',
        :'search_tag' => :'searchTag',
        :'source' => :'source',
        :'specific_location' => :'specificLocation',
        :'start_date' => :'startDate',
        :'type' => :'type',
        :'unit_ids' => :'unitIDs'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'authorize_enter' => :'String',
        :'building_id' => :'Integer',
        :'category' => :'String',
        :'cost_estimate' => :'Float',
        :'date_to_enter' => :'Date',
        :'description' => :'String',
        :'hour_estimate' => :'Float',
        :'hour_to_enter' => :'Integer',
        :'minute_to_enter' => :'Integer',
        :'priority' => :'String',
        :'publish_to_owner_portal' => :'Boolean',
        :'publish_to_tenant_portal' => :'Boolean',
        :'requested_by' => :'Integer',
        :'required_materials' => :'String',
        :'scheduled_end_date' => :'Date',
        :'search_tag' => :'String',
        :'source' => :'String',
        :'specific_location' => :'String',
        :'start_date' => :'Date',
        :'type' => :'String',
        :'unit_ids' => :'Array<Integer>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::SaveWorkOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::SaveWorkOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'authorize_enter')
        self.authorize_enter = attributes[:'authorize_enter']
      end

      if attributes.key?(:'building_id')
        self.building_id = attributes[:'building_id']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'cost_estimate')
        self.cost_estimate = attributes[:'cost_estimate']
      end

      if attributes.key?(:'date_to_enter')
        self.date_to_enter = attributes[:'date_to_enter']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'hour_estimate')
        self.hour_estimate = attributes[:'hour_estimate']
      end

      if attributes.key?(:'hour_to_enter')
        self.hour_to_enter = attributes[:'hour_to_enter']
      end

      if attributes.key?(:'minute_to_enter')
        self.minute_to_enter = attributes[:'minute_to_enter']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'publish_to_owner_portal')
        self.publish_to_owner_portal = attributes[:'publish_to_owner_portal']
      end

      if attributes.key?(:'publish_to_tenant_portal')
        self.publish_to_tenant_portal = attributes[:'publish_to_tenant_portal']
      end

      if attributes.key?(:'requested_by')
        self.requested_by = attributes[:'requested_by']
      end

      if attributes.key?(:'required_materials')
        self.required_materials = attributes[:'required_materials']
      end

      if attributes.key?(:'scheduled_end_date')
        self.scheduled_end_date = attributes[:'scheduled_end_date']
      end

      if attributes.key?(:'search_tag')
        self.search_tag = attributes[:'search_tag']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'specific_location')
        self.specific_location = attributes[:'specific_location']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'unit_ids')
        if (value = attributes[:'unit_ids']).is_a?(Array)
          self.unit_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @building_id.nil?
        invalid_properties.push('invalid value for "building_id", building_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      authorize_enter_validator = EnumAttributeValidator.new('String', ["NO", "ANYTIME", "SPECIFIEDTIME"])
      return false unless authorize_enter_validator.valid?(@authorize_enter)
      return false if @building_id.nil?
      priority_validator = EnumAttributeValidator.new('String', ["HIGH", "MEDIUM", "LOW"])
      return false unless priority_validator.valid?(@priority)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorize_enter Object to be assigned
    def authorize_enter=(authorize_enter)
      validator = EnumAttributeValidator.new('String', ["NO", "ANYTIME", "SPECIFIEDTIME"])
      unless validator.valid?(authorize_enter)
        fail ArgumentError, "invalid value #{ authorize_enter.inspect } for \"authorize_enter\", must be one of #{validator.allowable_values}."
      end
      @authorize_enter = authorize_enter
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] priority Object to be assigned
    def priority=(priority)
      validator = EnumAttributeValidator.new('String', ["HIGH", "MEDIUM", "LOW"])
      unless validator.valid?(priority)
        fail ArgumentError, "invalid value #{ priority.inspect } for \"priority\", must be one of #{validator.allowable_values}."
      end
      @priority = priority
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          authorize_enter == o.authorize_enter &&
          building_id == o.building_id &&
          category == o.category &&
          cost_estimate == o.cost_estimate &&
          date_to_enter == o.date_to_enter &&
          description == o.description &&
          hour_estimate == o.hour_estimate &&
          hour_to_enter == o.hour_to_enter &&
          minute_to_enter == o.minute_to_enter &&
          priority == o.priority &&
          publish_to_owner_portal == o.publish_to_owner_portal &&
          publish_to_tenant_portal == o.publish_to_tenant_portal &&
          requested_by == o.requested_by &&
          required_materials == o.required_materials &&
          scheduled_end_date == o.scheduled_end_date &&
          search_tag == o.search_tag &&
          source == o.source &&
          specific_location == o.specific_location &&
          start_date == o.start_date &&
          type == o.type &&
          unit_ids == o.unit_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [authorize_enter, building_id, category, cost_estimate, date_to_enter, description, hour_estimate, hour_to_enter, minute_to_enter, priority, publish_to_owner_portal, publish_to_tenant_portal, requested_by, required_materials, scheduled_end_date, search_tag, source, specific_location, start_date, type, unit_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
