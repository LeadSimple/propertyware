=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Address.
  class SaveAddress
    # Primary street and/or unit address. Required only if country is USA or Canada.
    attr_accessor :address

    # Address continuation.
    attr_accessor :address_cont

    # City. Required only if Country is United States / Canada.
    attr_accessor :city

    # Country. For US addresses, this value should be \"United States\". For other countries, this should be the full country name (Canada, United Kingdom, ...)
    attr_accessor :country

    # Zip. Required only if Country is United States / Canada.
    attr_accessor :postal_code

    # State. Required only if Country is United States / Canada.
    attr_accessor :state_region

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address' => :'address',
        :'address_cont' => :'addressCont',
        :'city' => :'city',
        :'country' => :'country',
        :'postal_code' => :'postalCode',
        :'state_region' => :'stateRegion'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'address' => :'String',
        :'address_cont' => :'String',
        :'city' => :'String',
        :'country' => :'String',
        :'postal_code' => :'String',
        :'state_region' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::SaveAddress` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::SaveAddress`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address_cont')
        self.address_cont = attributes[:'address_cont']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'postal_code')
        self.postal_code = attributes[:'postal_code']
      end

      if attributes.key?(:'state_region')
        self.state_region = attributes[:'state_region']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@address.nil? && @address.to_s.length > 50
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 50.')
      end

      if !@address.nil? && @address.to_s.length < 0
        invalid_properties.push('invalid value for "address", the character length must be great than or equal to 0.')
      end

      if !@address_cont.nil? && @address_cont.to_s.length > 20
        invalid_properties.push('invalid value for "address_cont", the character length must be smaller than or equal to 20.')
      end

      if !@address_cont.nil? && @address_cont.to_s.length < 0
        invalid_properties.push('invalid value for "address_cont", the character length must be great than or equal to 0.')
      end

      if !@city.nil? && @city.to_s.length > 30
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 30.')
      end

      if !@city.nil? && @city.to_s.length < 0
        invalid_properties.push('invalid value for "city", the character length must be great than or equal to 0.')
      end

      if @country.nil?
        invalid_properties.push('invalid value for "country", country cannot be nil.')
      end

      if @country.to_s.length > 30
        invalid_properties.push('invalid value for "country", the character length must be smaller than or equal to 30.')
      end

      if @country.to_s.length < 0
        invalid_properties.push('invalid value for "country", the character length must be great than or equal to 0.')
      end

      if !@postal_code.nil? && @postal_code.to_s.length > 20
        invalid_properties.push('invalid value for "postal_code", the character length must be smaller than or equal to 20.')
      end

      if !@postal_code.nil? && @postal_code.to_s.length < 0
        invalid_properties.push('invalid value for "postal_code", the character length must be great than or equal to 0.')
      end

      if !@state_region.nil? && @state_region.to_s.length > 20
        invalid_properties.push('invalid value for "state_region", the character length must be smaller than or equal to 20.')
      end

      if !@state_region.nil? && @state_region.to_s.length < 0
        invalid_properties.push('invalid value for "state_region", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@address.nil? && @address.to_s.length > 50
      return false if !@address.nil? && @address.to_s.length < 0
      return false if !@address_cont.nil? && @address_cont.to_s.length > 20
      return false if !@address_cont.nil? && @address_cont.to_s.length < 0
      return false if !@city.nil? && @city.to_s.length > 30
      return false if !@city.nil? && @city.to_s.length < 0
      return false if @country.nil?
      return false if @country.to_s.length > 30
      return false if @country.to_s.length < 0
      return false if !@postal_code.nil? && @postal_code.to_s.length > 20
      return false if !@postal_code.nil? && @postal_code.to_s.length < 0
      return false if !@state_region.nil? && @state_region.to_s.length > 20
      return false if !@state_region.nil? && @state_region.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 50
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 50.'
      end

      if !address.nil? && address.to_s.length < 0
        fail ArgumentError, 'invalid value for "address", the character length must be great than or equal to 0.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address_cont Value to be assigned
    def address_cont=(address_cont)
      if !address_cont.nil? && address_cont.to_s.length > 20
        fail ArgumentError, 'invalid value for "address_cont", the character length must be smaller than or equal to 20.'
      end

      if !address_cont.nil? && address_cont.to_s.length < 0
        fail ArgumentError, 'invalid value for "address_cont", the character length must be great than or equal to 0.'
      end

      @address_cont = address_cont
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 30
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 30.'
      end

      if !city.nil? && city.to_s.length < 0
        fail ArgumentError, 'invalid value for "city", the character length must be great than or equal to 0.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if country.nil?
        fail ArgumentError, 'country cannot be nil'
      end

      if country.to_s.length > 30
        fail ArgumentError, 'invalid value for "country", the character length must be smaller than or equal to 30.'
      end

      if country.to_s.length < 0
        fail ArgumentError, 'invalid value for "country", the character length must be great than or equal to 0.'
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] postal_code Value to be assigned
    def postal_code=(postal_code)
      if !postal_code.nil? && postal_code.to_s.length > 20
        fail ArgumentError, 'invalid value for "postal_code", the character length must be smaller than or equal to 20.'
      end

      if !postal_code.nil? && postal_code.to_s.length < 0
        fail ArgumentError, 'invalid value for "postal_code", the character length must be great than or equal to 0.'
      end

      @postal_code = postal_code
    end

    # Custom attribute writer method with validation
    # @param [Object] state_region Value to be assigned
    def state_region=(state_region)
      if !state_region.nil? && state_region.to_s.length > 20
        fail ArgumentError, 'invalid value for "state_region", the character length must be smaller than or equal to 20.'
      end

      if !state_region.nil? && state_region.to_s.length < 0
        fail ArgumentError, 'invalid value for "state_region", the character length must be great than or equal to 0.'
      end

      @state_region = state_region
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address == o.address &&
          address_cont == o.address_cont &&
          city == o.city &&
          country == o.country &&
          postal_code == o.postal_code &&
          state_region == o.state_region
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address, address_cont, city, country, postal_code, state_region].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
