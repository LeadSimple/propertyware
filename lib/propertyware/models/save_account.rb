=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # Create GL Account Request
  class SaveAccount
    # Account number.
    attr_accessor :account_number

    # Valid account types - 1:Bank, 2:Credit Card, 5:Current Asset, 12:Non-Current Asset, 6:Current Liability, 13:Non-Current Liability, 7:Equity, 8:Income, 9:Expense, 10:Non-Operating Income, 11:Non-Operating Expense.
    attr_accessor :account_type

    # Indicates if prepayments should be auto applied.
    attr_accessor :auto_apply_prepayment

    attr_accessor :bank

    # Account code.
    attr_accessor :code

    attr_accessor :credit_card

    attr_accessor :current_asset

    attr_accessor :current_liability

    # Description.
    attr_accessor :description

    attr_accessor :equity

    attr_accessor :expense

    attr_accessor :income

    attr_accessor :non_current_asset

    attr_accessor :non_current_liability

    attr_accessor :non_operating_expense

    attr_accessor :non_operating_income

    # Parent account ID.
    attr_accessor :parent_gl_account_id

    # Indicates if the account is taxable.
    attr_accessor :taxable

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_number' => :'accountNumber',
        :'account_type' => :'accountType',
        :'auto_apply_prepayment' => :'autoApplyPrepayment',
        :'bank' => :'bank',
        :'code' => :'code',
        :'credit_card' => :'creditCard',
        :'current_asset' => :'currentAsset',
        :'current_liability' => :'currentLiability',
        :'description' => :'description',
        :'equity' => :'equity',
        :'expense' => :'expense',
        :'income' => :'income',
        :'non_current_asset' => :'nonCurrentAsset',
        :'non_current_liability' => :'nonCurrentLiability',
        :'non_operating_expense' => :'nonOperatingExpense',
        :'non_operating_income' => :'nonOperatingIncome',
        :'parent_gl_account_id' => :'parentGLAccountId',
        :'taxable' => :'taxable'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_number' => :'String',
        :'account_type' => :'Integer',
        :'auto_apply_prepayment' => :'Boolean',
        :'bank' => :'Bank',
        :'code' => :'String',
        :'credit_card' => :'CreditCardAccount',
        :'current_asset' => :'CurrentAsset',
        :'current_liability' => :'CurrentLiability',
        :'description' => :'String',
        :'equity' => :'Equity',
        :'expense' => :'Expense',
        :'income' => :'Income',
        :'non_current_asset' => :'NonCurrentAsset',
        :'non_current_liability' => :'NonCurrentLiability',
        :'non_operating_expense' => :'NonOperatingExpense',
        :'non_operating_income' => :'NonOperatingInome',
        :'parent_gl_account_id' => :'Integer',
        :'taxable' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::SaveAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::SaveAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.key?(:'auto_apply_prepayment')
        self.auto_apply_prepayment = attributes[:'auto_apply_prepayment']
      end

      if attributes.key?(:'bank')
        self.bank = attributes[:'bank']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'credit_card')
        self.credit_card = attributes[:'credit_card']
      end

      if attributes.key?(:'current_asset')
        self.current_asset = attributes[:'current_asset']
      end

      if attributes.key?(:'current_liability')
        self.current_liability = attributes[:'current_liability']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'equity')
        self.equity = attributes[:'equity']
      end

      if attributes.key?(:'expense')
        self.expense = attributes[:'expense']
      end

      if attributes.key?(:'income')
        self.income = attributes[:'income']
      end

      if attributes.key?(:'non_current_asset')
        self.non_current_asset = attributes[:'non_current_asset']
      end

      if attributes.key?(:'non_current_liability')
        self.non_current_liability = attributes[:'non_current_liability']
      end

      if attributes.key?(:'non_operating_expense')
        self.non_operating_expense = attributes[:'non_operating_expense']
      end

      if attributes.key?(:'non_operating_income')
        self.non_operating_income = attributes[:'non_operating_income']
      end

      if attributes.key?(:'parent_gl_account_id')
        self.parent_gl_account_id = attributes[:'parent_gl_account_id']
      end

      if attributes.key?(:'taxable')
        self.taxable = attributes[:'taxable']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @account_number.nil?
        invalid_properties.push('invalid value for "account_number", account_number cannot be nil.')
      end

      if @account_type.nil?
        invalid_properties.push('invalid value for "account_type", account_type cannot be nil.')
      end

      if @code.nil?
        invalid_properties.push('invalid value for "code", code cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @account_number.nil?
      return false if @account_type.nil?
      return false if @code.nil?
      return false if @description.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_number == o.account_number &&
          account_type == o.account_type &&
          auto_apply_prepayment == o.auto_apply_prepayment &&
          bank == o.bank &&
          code == o.code &&
          credit_card == o.credit_card &&
          current_asset == o.current_asset &&
          current_liability == o.current_liability &&
          description == o.description &&
          equity == o.equity &&
          expense == o.expense &&
          income == o.income &&
          non_current_asset == o.non_current_asset &&
          non_current_liability == o.non_current_liability &&
          non_operating_expense == o.non_operating_expense &&
          non_operating_income == o.non_operating_income &&
          parent_gl_account_id == o.parent_gl_account_id &&
          taxable == o.taxable
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_number, account_type, auto_apply_prepayment, bank, code, credit_card, current_asset, current_liability, description, equity, expense, income, non_current_asset, non_current_liability, non_operating_expense, non_operating_income, parent_gl_account_id, taxable].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
