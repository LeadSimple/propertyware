=begin
#Open API, powered by Propertyware


The version of the OpenAPI document: 1.0
Contact: support@propertyware.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Propertyware
  # SaveUnit
  class SaveUnit
    # Abbreviation of Unit.
    attr_accessor :abbreviation

    attr_accessor :address

    # Unit Available date to lease.
    attr_accessor :available_date

    # Id of the building associated with this unit.
    attr_accessor :building_id

    # Unit Category.
    attr_accessor :category

    # Unit region of a state.
    attr_accessor :county

    # Marketing Description.
    attr_accessor :description

    # Floor number.
    attr_accessor :floor_number

    # Name of the unit.
    attr_accessor :name

    # Neighborhood.
    attr_accessor :neighborhood

    # Number of bathrooms in the unit.
    attr_accessor :number_bathrooms

    # Number of bedrooms in the unit.
    attr_accessor :number_bedrooms

    # Id of the portfolio associated with this unit.
    attr_accessor :portfolio_id

    # Indicates if property is ready to be leased.
    attr_accessor :ready

    # Reason for property lost.
    attr_accessor :reason_for_property_lost

    # Is Unit is Residential or Commercial.
    attr_accessor :residential

    # Search tag.
    attr_accessor :search_tag

    # Target deposit amount.
    attr_accessor :target_deposit

    # Market rent for the unit.
    attr_accessor :target_rent

    # Property target rent units.
    attr_accessor :target_rent_units

    # Unit Area.
    attr_accessor :total_area

    # Indicates Unit type like Business Office,Medical Office,Showroom,R  and  D,Assigned Parking (Indoor),Assigned Parking (Outdoor),Warehouse,Restaurant,Shopping Mall Retail,Street Retail,Manufacturing,House,Town House,Apartment,Flat,Studio,Loft,Assigned Parking (Indoor),Assigned Parking (Outdoor) etc.
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'abbreviation' => :'abbreviation',
        :'address' => :'address',
        :'available_date' => :'availableDate',
        :'building_id' => :'buildingID',
        :'category' => :'category',
        :'county' => :'county',
        :'description' => :'description',
        :'floor_number' => :'floorNumber',
        :'name' => :'name',
        :'neighborhood' => :'neighborhood',
        :'number_bathrooms' => :'numberBathrooms',
        :'number_bedrooms' => :'numberBedrooms',
        :'portfolio_id' => :'portfolioID',
        :'ready' => :'ready',
        :'reason_for_property_lost' => :'reasonForPropertyLost',
        :'residential' => :'residential',
        :'search_tag' => :'searchTag',
        :'target_deposit' => :'targetDeposit',
        :'target_rent' => :'targetRent',
        :'target_rent_units' => :'targetRentUnits',
        :'total_area' => :'totalArea',
        :'type' => :'type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'abbreviation' => :'String',
        :'address' => :'SaveAddress',
        :'available_date' => :'Date',
        :'building_id' => :'Integer',
        :'category' => :'String',
        :'county' => :'String',
        :'description' => :'String',
        :'floor_number' => :'Integer',
        :'name' => :'String',
        :'neighborhood' => :'String',
        :'number_bathrooms' => :'Float',
        :'number_bedrooms' => :'Integer',
        :'portfolio_id' => :'Integer',
        :'ready' => :'Boolean',
        :'reason_for_property_lost' => :'String',
        :'residential' => :'Boolean',
        :'search_tag' => :'String',
        :'target_deposit' => :'Float',
        :'target_rent' => :'Float',
        :'target_rent_units' => :'String',
        :'total_area' => :'Float',
        :'type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Propertyware::SaveUnit` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Propertyware::SaveUnit`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'abbreviation')
        self.abbreviation = attributes[:'abbreviation']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'available_date')
        self.available_date = attributes[:'available_date']
      end

      if attributes.key?(:'building_id')
        self.building_id = attributes[:'building_id']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'county')
        self.county = attributes[:'county']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'floor_number')
        self.floor_number = attributes[:'floor_number']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'neighborhood')
        self.neighborhood = attributes[:'neighborhood']
      end

      if attributes.key?(:'number_bathrooms')
        self.number_bathrooms = attributes[:'number_bathrooms']
      end

      if attributes.key?(:'number_bedrooms')
        self.number_bedrooms = attributes[:'number_bedrooms']
      end

      if attributes.key?(:'portfolio_id')
        self.portfolio_id = attributes[:'portfolio_id']
      end

      if attributes.key?(:'ready')
        self.ready = attributes[:'ready']
      end

      if attributes.key?(:'reason_for_property_lost')
        self.reason_for_property_lost = attributes[:'reason_for_property_lost']
      end

      if attributes.key?(:'residential')
        self.residential = attributes[:'residential']
      end

      if attributes.key?(:'search_tag')
        self.search_tag = attributes[:'search_tag']
      end

      if attributes.key?(:'target_deposit')
        self.target_deposit = attributes[:'target_deposit']
      end

      if attributes.key?(:'target_rent')
        self.target_rent = attributes[:'target_rent']
      end

      if attributes.key?(:'target_rent_units')
        self.target_rent_units = attributes[:'target_rent_units']
      end

      if attributes.key?(:'total_area')
        self.total_area = attributes[:'total_area']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @abbreviation.nil?
        invalid_properties.push('invalid value for "abbreviation", abbreviation cannot be nil.')
      end

      if @abbreviation.to_s.length > 12
        invalid_properties.push('invalid value for "abbreviation", the character length must be smaller than or equal to 12.')
      end

      if @abbreviation.to_s.length < 1
        invalid_properties.push('invalid value for "abbreviation", the character length must be great than or equal to 1.')
      end

      if @building_id.nil?
        invalid_properties.push('invalid value for "building_id", building_id cannot be nil.')
      end

      if @category.nil?
        invalid_properties.push('invalid value for "category", category cannot be nil.')
      end

      if !@description.nil? && @description.to_s.length > 65535
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 65535.')
      end

      if !@description.nil? && @description.to_s.length < 0
        invalid_properties.push('invalid value for "description", the character length must be great than or equal to 0.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if !@neighborhood.nil? && @neighborhood.to_s.length > 30
        invalid_properties.push('invalid value for "neighborhood", the character length must be smaller than or equal to 30.')
      end

      if !@neighborhood.nil? && @neighborhood.to_s.length < 0
        invalid_properties.push('invalid value for "neighborhood", the character length must be great than or equal to 0.')
      end

      if !@number_bedrooms.nil? && @number_bedrooms > 20
        invalid_properties.push('invalid value for "number_bedrooms", must be smaller than or equal to 20.')
      end

      if !@number_bedrooms.nil? && @number_bedrooms < 0
        invalid_properties.push('invalid value for "number_bedrooms", must be greater than or equal to 0.')
      end

      if @portfolio_id.nil?
        invalid_properties.push('invalid value for "portfolio_id", portfolio_id cannot be nil.')
      end

      if !@search_tag.nil? && @search_tag.to_s.length > 25
        invalid_properties.push('invalid value for "search_tag", the character length must be smaller than or equal to 25.')
      end

      if !@search_tag.nil? && @search_tag.to_s.length < 0
        invalid_properties.push('invalid value for "search_tag", the character length must be great than or equal to 0.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @abbreviation.nil?
      return false if @abbreviation.to_s.length > 12
      return false if @abbreviation.to_s.length < 1
      return false if @building_id.nil?
      return false if @category.nil?
      category_validator = EnumAttributeValidator.new('String', ["RESIDENTIAL", "COMMERCIAL"])
      return false unless category_validator.valid?(@category)
      return false if !@description.nil? && @description.to_s.length > 65535
      return false if !@description.nil? && @description.to_s.length < 0
      floor_number_validator = EnumAttributeValidator.new('Integer', [0, 1, 2])
      return false unless floor_number_validator.valid?(@floor_number)
      return false if @name.nil?
      return false if !@neighborhood.nil? && @neighborhood.to_s.length > 30
      return false if !@neighborhood.nil? && @neighborhood.to_s.length < 0
      number_bathrooms_validator = EnumAttributeValidator.new('Float', [0, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10])
      return false unless number_bathrooms_validator.valid?(@number_bathrooms)
      return false if !@number_bedrooms.nil? && @number_bedrooms > 20
      return false if !@number_bedrooms.nil? && @number_bedrooms < 0
      return false if @portfolio_id.nil?
      reason_for_property_lost_validator = EnumAttributeValidator.new('String', ["EMPTY", "ABANDONED", "FORECLOSURE", "MGR_RETURNED_TO_OWNER", "OTB_AS_FRBO", "OWNER_MOVED_BACK", "REFERRED_TO_SALES", "REFERRED_TO_SALES_OR_SOLD"])
      return false unless reason_for_property_lost_validator.valid?(@reason_for_property_lost)
      return false if !@search_tag.nil? && @search_tag.to_s.length > 25
      return false if !@search_tag.nil? && @search_tag.to_s.length < 0
      target_rent_units_validator = EnumAttributeValidator.new('String', ["DOLLAR_PER_SQ_FT_MONTH", "DOLLAR_PER_SQ_FT_YEAR", "DOLLAR_PER_SQ_M_MONTH", "DOLLAR_PER_SQ_M_YEAR", "DOLLAR_PER_MONTH", "DOLLAR_PER_WEEK", "DOLLAR_PER_NIGHT"])
      return false unless target_rent_units_validator.valid?(@target_rent_units)
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] abbreviation Value to be assigned
    def abbreviation=(abbreviation)
      if abbreviation.nil?
        fail ArgumentError, 'abbreviation cannot be nil'
      end

      if abbreviation.to_s.length > 12
        fail ArgumentError, 'invalid value for "abbreviation", the character length must be smaller than or equal to 12.'
      end

      if abbreviation.to_s.length < 1
        fail ArgumentError, 'invalid value for "abbreviation", the character length must be great than or equal to 1.'
      end

      @abbreviation = abbreviation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      validator = EnumAttributeValidator.new('String', ["RESIDENTIAL", "COMMERCIAL"])
      unless validator.valid?(category)
        fail ArgumentError, "invalid value #{ category.inspect } for \"category\", must be one of #{validator.allowable_values}."
      end
      @category = category
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 65535
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 65535.'
      end

      if !description.nil? && description.to_s.length < 0
        fail ArgumentError, 'invalid value for "description", the character length must be great than or equal to 0.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] floor_number Object to be assigned
    def floor_number=(floor_number)
      validator = EnumAttributeValidator.new('Integer', [0, 1, 2])
      unless validator.valid?(floor_number)
        fail ArgumentError, "invalid value #{ floor_number.inspect } for \"floor_number\", must be one of #{validator.allowable_values}."
      end
      @floor_number = floor_number
    end

    # Custom attribute writer method with validation
    # @param [Object] neighborhood Value to be assigned
    def neighborhood=(neighborhood)
      if !neighborhood.nil? && neighborhood.to_s.length > 30
        fail ArgumentError, 'invalid value for "neighborhood", the character length must be smaller than or equal to 30.'
      end

      if !neighborhood.nil? && neighborhood.to_s.length < 0
        fail ArgumentError, 'invalid value for "neighborhood", the character length must be great than or equal to 0.'
      end

      @neighborhood = neighborhood
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number_bathrooms Object to be assigned
    def number_bathrooms=(number_bathrooms)
      validator = EnumAttributeValidator.new('Float', [0, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10])
      unless validator.valid?(number_bathrooms)
        fail ArgumentError, "invalid value #{ number_bathrooms.inspect } for \"number_bathrooms\", must be one of #{validator.allowable_values}."
      end
      @number_bathrooms = number_bathrooms
    end

    # Custom attribute writer method with validation
    # @param [Object] number_bedrooms Value to be assigned
    def number_bedrooms=(number_bedrooms)
      if !number_bedrooms.nil? && number_bedrooms > 20
        fail ArgumentError, 'invalid value for "number_bedrooms", must be smaller than or equal to 20.'
      end

      if !number_bedrooms.nil? && number_bedrooms < 0
        fail ArgumentError, 'invalid value for "number_bedrooms", must be greater than or equal to 0.'
      end

      @number_bedrooms = number_bedrooms
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason_for_property_lost Object to be assigned
    def reason_for_property_lost=(reason_for_property_lost)
      validator = EnumAttributeValidator.new('String', ["EMPTY", "ABANDONED", "FORECLOSURE", "MGR_RETURNED_TO_OWNER", "OTB_AS_FRBO", "OWNER_MOVED_BACK", "REFERRED_TO_SALES", "REFERRED_TO_SALES_OR_SOLD"])
      unless validator.valid?(reason_for_property_lost)
        fail ArgumentError, "invalid value #{ reason_for_property_lost.inspect } for \"reason_for_property_lost\", must be one of #{validator.allowable_values}."
      end
      @reason_for_property_lost = reason_for_property_lost
    end

    # Custom attribute writer method with validation
    # @param [Object] search_tag Value to be assigned
    def search_tag=(search_tag)
      if !search_tag.nil? && search_tag.to_s.length > 25
        fail ArgumentError, 'invalid value for "search_tag", the character length must be smaller than or equal to 25.'
      end

      if !search_tag.nil? && search_tag.to_s.length < 0
        fail ArgumentError, 'invalid value for "search_tag", the character length must be great than or equal to 0.'
      end

      @search_tag = search_tag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_rent_units Object to be assigned
    def target_rent_units=(target_rent_units)
      validator = EnumAttributeValidator.new('String', ["DOLLAR_PER_SQ_FT_MONTH", "DOLLAR_PER_SQ_FT_YEAR", "DOLLAR_PER_SQ_M_MONTH", "DOLLAR_PER_SQ_M_YEAR", "DOLLAR_PER_MONTH", "DOLLAR_PER_WEEK", "DOLLAR_PER_NIGHT"])
      unless validator.valid?(target_rent_units)
        fail ArgumentError, "invalid value #{ target_rent_units.inspect } for \"target_rent_units\", must be one of #{validator.allowable_values}."
      end
      @target_rent_units = target_rent_units
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          abbreviation == o.abbreviation &&
          address == o.address &&
          available_date == o.available_date &&
          building_id == o.building_id &&
          category == o.category &&
          county == o.county &&
          description == o.description &&
          floor_number == o.floor_number &&
          name == o.name &&
          neighborhood == o.neighborhood &&
          number_bathrooms == o.number_bathrooms &&
          number_bedrooms == o.number_bedrooms &&
          portfolio_id == o.portfolio_id &&
          ready == o.ready &&
          reason_for_property_lost == o.reason_for_property_lost &&
          residential == o.residential &&
          search_tag == o.search_tag &&
          target_deposit == o.target_deposit &&
          target_rent == o.target_rent &&
          target_rent_units == o.target_rent_units &&
          total_area == o.total_area &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [abbreviation, address, available_date, building_id, category, county, description, floor_number, name, neighborhood, number_bathrooms, number_bedrooms, portfolio_id, ready, reason_for_property_lost, residential, search_tag, target_deposit, target_rent, target_rent_units, total_area, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Propertyware.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
